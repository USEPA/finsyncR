SiteNumber = MASTER_SITEID,
SiteName = MASTER_SITEID,
StateFIPSCode = NA,
CountyFIPSCode = NA,
Latitude_dd = LAT_DD83,
Longitude_dd = LON_DD83,
CoordinateDatum = "NAD83",
HUCCode = NA,
DrainageArea_mi2 = NA ,
SampleTypeCode = SAMPLE_TYPE,
IdentificationEntity = NA,
AreaSampTot_m2  = NA,
GeomorphicChannelUnit = NA,
ChannelBoundaries = NA,
ChannelFeatures = NA,
ReplicateType  = NA,
PercentCount = PCTCOUNT,
AreaSampTot_m2 = round(NUMTRANS / 10.76, 3)
) %>%
dplyr::select(-SAMPLE_TYPE, -LAT_DD83, -LON_DD83, -SITETYPE,
-SITE_ID, -MASTER_SITEID, -UID, -UNIQUEID, -DATE_COL,
-YEAR, -PSTL_CODE, -US_L3CODE, -US_L3NAME, -VISIT_NO,
-AG_ECO9, -NRS13_URBN, -RT_NRSA, -PCTCOUNT, -NUMTRANS) %>%
dplyr::relocate(tidyselect::contains("tax_"), .after = last_col())
##To make sure the NRSA sites are correct crosswalked across sampling rounds
# rename the nrsa_comms1$SiteNumber based on the master crosswalk list from
# Richard Mitchell (w/ updates to include MASTER_SITEID)
##if site number in nrsa_comms1 is in the SITEID in the master crosswalk list,
##match the numbers and pull the corresponding unique id, which is the crosswalked site id,
##else provide an NA
nrsa_comms1$UNIQUE_ID <- ifelse(nrsa_comms1$SiteNumber %in% StreamData:::.NRSA_siteIDs$SITE_ID,
StreamData:::.NRSA_siteIDs$UNIQUE_ID[match(nrsa_comms1$SiteNumber,
StreamData:::.NRSA_siteIDs$SITE_ID)],
NA)
##if site number in nrsa_comms1 is in the MASTER_SITEID in the master crosswalk list,
##match the numbers and pull the corresponding unique id, which is the crosswalked site id,
##else give the current UNIQUE ID
nrsa_comms1$UNIQUE_ID <- ifelse(nrsa_comms1$SiteNumber %in% StreamData:::.NRSA_siteIDs$MASTER_SITEID,
StreamData:::.NRSA_siteIDs$UNIQUE_ID[match(nrsa_comms1$SiteNumber,
StreamData:::.NRSA_siteIDs$MASTER_SITEID)],
nrsa_comms1$UNIQUE_ID)
##if there are any NA values in UNIQUE ID, replace these with the SiteNumber
nrsa_comms1$SiteNumber = ifelse(is.na(nrsa_comms1$UNIQUE_ID),
nrsa_comms1$SiteNumber,
nrsa_comms1$UNIQUE_ID)
##remove the UNIQUEID column, as it is no longer needed
nrsa_comms1 <- nrsa_comms1 %>%
select(-UNIQUE_ID)
##Need to then join this dataset to invert_comms1
invert_comms1[setdiff(names(nrsa_comms1), names(invert_comms1))] <- NA
nrsa_comms1[setdiff(names(invert_comms1), names(nrsa_comms1))] <- NA
##Add Agency columns
invert_comms1$Agency <- "USGS"
nrsa_comms1$Agency <- "EPA"
invert_comms1 <- invert_comms1  %>%
dplyr::relocate(tidyselect::contains("tax_"), .after = last_col())
nrsa_comms1 <- nrsa_comms1  %>%
dplyr::relocate(tidyselect::contains("tax_"), .after = last_col()) %>%
dplyr::relocate(tidyselect::any_of(colnames(invert_comms1)))
invert_comms1 <- dplyr::bind_rows(invert_comms1, nrsa_comms1)
invert_comms1 = invert_comms1 %>%
dplyr::mutate(dplyr::across(tidyselect::starts_with("tax_"),
~ifelse(is.na(.x),
0,
.x)))
} else{ }
if(dataType == "occur") {
invert_comms1 = invert_comms1 %>%
dplyr::mutate(dplyr::across(tidyselect::starts_with("tax_"),
~replace(., . > 0, 1)))
}
invert_comms1$CollectionDate = as.Date(invert_comms1$CollectionDayOfYear,
origin = paste(invert_comms1$CollectionYear-1,
'12-31',
sep = "-"))
##Remove the "tax_" prefix
colnames(invert_comms1) = sub("tax_", "", colnames(invert_comms1))
return(data.frame(invert_comms1))
}
inverts1 <- getInvertData(dataType = "abun",
taxonLevel = "Genus",
taxonFix = "lump",
agency = c("USGS", "EPA"),
lifestage = FALSE,
rarefy = TRUE,
sharedTaxa = TRUE,
seed = 0)
inverts1 <- getInvertData(dataType = "abun",
taxonLevel = "Genus",
taxonFix = "lump",
agency = c("USGS", "EPA"),
lifestage = FALSE,
rarefy = FALSE,
sharedTaxa = TRUE,
seed = 0)
inverts1
View(inverts1)
ggplot(inverts1, aes(x = PercentCount))+
facet_wrap(~Agency)+
geom_histogram()
ggplot(inverts1, aes(x = PercentCount))+
facet_wrap(~Agency)+
geom_histogram()+
scale_x_log10()
ggplot(inverts1, aes(x = TotAreaSamp_m2))+
facet_wrap(~Agency)+
geom_histogram()+
scale_x_log10()
inverts1
ggplot(inverts1, aes(x = AreaSampTot_m2 ))+
facet_wrap(~Agency)+
geom_histogram()+
scale_x_log10()
taxdat <- read.csv("C:/Users/mikem/Documents/Research/USGS Stream Macros/MahonRumschlagPowell/20201028.1839.taxon_INVERT.csv")
colnames(taxdat)[1] <- "BenchTaxonName"
colnames(inverts1)
granc <- data.frame(genera = colnames(inverts1)[-c(1:32)])
granc
granc$BenchOrGenus <- ifelse(granc$genera %in% taxdat$Genus,
"Genus",
ifelse(granc$genera %in% taxdat$BenchTaxonName,
"Bench",
"Neither"
))
granc$BenchOrGenus
granc$Order <- taxdat$Order[match(granc$genera, taxdat$Genus)]
granc$Family <- taxdat$Family[match(granc$genera, taxdat$Genus)]
granc$Subfamily <- taxdat$Subfamily[match(granc$genera, taxdat$Genus)]
granc$Tribe <- taxdat$Tribe[match(granc$genera, taxdat$Genus)]
unknowns <- (granc %>%
filter(is.na(Family)))$genera
unknowns
sub("\\..*", "", genera) %in% taxdat$Genus
sub("\\..*", "", unknowns) %in% taxdat$Genus
taxdat$Family[match(sub("\\..*", "", unknowns), taxdat$Genus)]
unknowns2 <- data.frame(group = unknowns,
Order = taxdat$Order[match(sub("\\..*", "", unknowns), taxdat$Genus)],
Family = taxdat$Family[match(sub("\\..*", "", unknowns), taxdat$Genus)],
Subfamily = taxdat$Subfamily[match(sub("\\..*", "", unknowns), taxdat$Genus)],
Tribe = taxdat$Tribe[match(sub("\\..*", "", unknowns), taxdat$Genus)])
unknowns2
unknowns2$Order[1] = "Ephemeroptera"
unknowns2$Order
unknowns2 <- data.frame(group = unknowns,
Order = taxdat$Order[match(sub("\\..*", "", unknowns), taxdat$Genus)],
Family = taxdat$Family[match(sub("\\..*", "", unknowns), taxdat$Genus)],
Subfamily = taxdat$Subfamily[match(sub("\\..*", "", unknowns), taxdat$Genus)],
Tribe = taxdat$Tribe[match(sub("\\..*", "", unknowns), taxdat$Genus)])
unknowns2$Order
grancknowns <- granc %>%
filter(!(is.na(Family)))
grancunknowns <- granc %>%
filter((is.na(Family)))
unknowns2 <- data.frame(genera = unknowns,
Order = taxdat$Order[match(sub("\\..*", "", unknowns), taxdat$Genus)],
Family = taxdat$Family[match(sub("\\..*", "", unknowns), taxdat$Genus)],
Subfamily = taxdat$Subfamily[match(sub("\\..*", "", unknowns), taxdat$Genus)],
Tribe = taxdat$Tribe[match(sub("\\..*", "", unknowns), taxdat$Genus)])
grancknowns <- granc %>%
filter(!(is.na(Family)))
grancunknowns <- granc %>%
filter((is.na(Family)))
grancunknowns$Order <- unknowns2$Order[match(grancunknowns$genera, unknowns2$genera)]
grancunknowns$Family <- unknowns2$Family[match(grancunknowns$genera, unknowns2$genera)]
grancunknowns$Subfamily <- unknowns2$Subfamily[match(grancunknowns$genera, unknowns2$genera)]
grancunknowns$Tribe <- unknowns2$Tribe[match(grancunknowns$genera, unknowns2$genera)]
granc2 <- bind_rows(grancknowns, grancunknowns)
granc2
taxdat <- read.csv("C:/Users/mikem/Documents/Research/USGS Stream Macros/MahonRumschlagPowell/20201028.1839.taxon_INVERT.csv")
colnames(taxdat)[1] <- "BenchTaxonName"
granc <- data.frame(genera = colnames(inverts1)[-c(1:32)])
granc$BenchOrGenus <- ifelse(granc$genera %in% taxdat$Genus,
"Genus",
ifelse(granc$genera %in% taxdat$BenchTaxonName,
"Bench",
"Neither"
))
granc$Phylum <- taxdat$Phylum[match(granc$group, taxdat$group)]
granc$Subphylum <- taxdat$Subphylum[match(granc$group, taxdat$group)]
granc$Superclass <- taxdat$Superclass[match(granc$group, taxdat$group)]
granc$Class <- taxdat$Class[match(granc$group, taxdat$group)]
granc <- data.frame(group = colnames(inverts1)[-c(1:32)])
granc <- data.frame(group = colnames(inverts1)[-c(1:32)])
granc$BenchOrGenus <- ifelse(granc$group %in% taxdat$Genus,
"Genus",
ifelse(granc$group %in% taxdat$BenchTaxonName,
"Bench",
"Neither"
))
granc$Phylum <- taxdat$Phylum[match(granc$group, taxdat$group)]
granc$Subphylum <- taxdat$Subphylum[match(granc$group, taxdat$group)]
granc$Superclass <- taxdat$Superclass[match(granc$group, taxdat$group)]
granc$Class <- taxdat$Class[match(granc$group, taxdat$group)]
granc$Subclass <- taxdat$Subclass[match(granc$group, taxdat$group)]
granc$Infraclass <- taxdat$Infraclass[match(granc$group, taxdat$group)]
granc$Superorder <- taxdat$Superorder[match(granc$group, taxdat$group)]
granc$Order <- taxdat$Order[match(granc$group, taxdat$group)]
granc$Suborder <- taxdat$Suborder[match(granc$group, taxdat$group)]
granc$Infraorder <- taxdat$Infraorder[match(granc$group, taxdat$group)]
granc$Superfamily <- taxdat$Superfamily[match(granc$group, taxdat$group)]
granc$Family <- taxdat$Family[match(granc$group, taxdat$group)]
granc$Subfamily <- taxdat$Subfamily[match(granc$group, taxdat$group)]
granc$Tribe <- taxdat$Tribe[match(granc$group, taxdat$group)]
unknowns <- (granc %>%
filter(is.na(Family)))$group
taxdat$Family[match(sub("\\..*", "", unknowns), taxdat$Genus)]
unknowns2 <- data.frame(genera = unknowns,
Phylum = taxdat$Phylum[match(sub("\\..*", "", unknowns), taxdat$Genus)] ,
Subphylum = taxdat$Subphylum[match(sub("\\..*", "", unknowns), taxdat$Genus)] ,
Superclass = taxdat$Superclass[match(sub("\\..*", "", unknowns), taxdat$Genus)] ,
Class = taxdat$Class[match(sub("\\..*", "", unknowns), taxdat$Genus)] ,
Subclass = taxdat$Subclass[match(sub("\\..*", "", unknowns), taxdat$Genus)] ,
Infraclass = taxdat$Infraclass[match(sub("\\..*", "", unknowns), taxdat$Genus)] ,
Superorder = taxdat$Superorder[match(sub("\\..*", "", unknowns), taxdat$Genus)] ,
Order = taxdat$Order[match(sub("\\..*", "", unknowns), taxdat$Genus)],
Suborder = taxdat$Suborder[match(sub("\\..*", "", unknowns), taxdat$Genus)],
Infraorder = taxdat$Infraorder[match(sub("\\..*", "", unknowns), taxdat$Genus)],
Superfamily = taxdat$Superfamily[match(sub("\\..*", "", unknowns), taxdat$Genus)],
Family = taxdat$Family[match(sub("\\..*", "", unknowns), taxdat$Genus)],
Subfamily = taxdat$Subfamily[match(sub("\\..*", "", unknowns), taxdat$Genus)],
Tribe = taxdat$Tribe[match(sub("\\..*", "", unknowns), taxdat$Genus)])
grancknowns <- granc %>%
filter(!(is.na(Family)))
grancunknowns <- granc %>%
filter((is.na(Family)))
grancunknowns$Phylum <- unknowns2$Phylum[match(grancunknowns$group, unknowns2$group)]
grancunknowns$Subphylum <- unknowns2$Subphylum[match(grancunknowns$group, unknowns2$group)]
grancunknowns$Superclass <- unknowns2$Superclass[match(grancunknowns$group, unknowns2$group)]
grancunknowns$Class <- unknowns2$Class[match(grancunknowns$group, unknowns2$group)]
grancunknowns$Subclass <- unknowns2$Subclass[match(grancunknowns$group, unknowns2$group)]
grancunknowns$Infraclass <- unknowns2$Infraclass[match(grancunknowns$group, unknowns2$group)]
grancunknowns$Superorder <- unknowns2$Superorder[match(grancunknowns$group, unknowns2$group)]
grancunknowns$Order <- unknowns2$Order[match(grancunknowns$group, unknowns2$group)]
grancunknowns$Suborder <- unknowns2$Suborder[match(grancunknowns$group, unknowns2$group)]
grancunknowns$Infraorder <- unknowns2$Infraorder[match(grancunknowns$group, unknowns2$group)]
grancunknowns$Superfamily <- unknowns2$Superfamily[match(grancunknowns$group, unknowns2$group)]
grancunknowns$Family <- unknowns2$Family[match(grancunknowns$group, unknowns2$group)]
grancunknowns$Subfamily <- unknowns2$Subfamily[match(grancunknowns$group, unknowns2$group)]
grancunknowns$Tribe <- unknowns2$Tribe[match(grancunknowns$group, unknowns2$group)]
granc2 <- bind_rows(grancknowns, grancunknowns)
granc2
taxdat
granc <- data.frame(group = colnames(inverts1)[-c(1:32)])
granc
granc$BenchOrGenus <- ifelse(granc$group %in% taxdat$Genus,
"Genus",
ifelse(granc$group %in% taxdat$BenchTaxonName,
"Bench",
"Neither"
))
granc$Phylum <- taxdat$Phylum[match(granc$group, taxdat$group)]
granc
granc$Phylum <- taxdat$Phylum[match(granc$group, taxdat$Genus)]
granc$Subphylum <- taxdat$Subphylum[match(granc$group, taxdat$Genus)]
granc$Superclass <- taxdat$Superclass[match(granc$group, taxdat$Genus)]
granc$Class <- taxdat$Class[match(granc$group, taxdat$Genus)]
granc$Subclass <- taxdat$Subclass[match(granc$group, taxdat$Genus)]
granc$Infraclass <- taxdat$Infraclass[match(granc$group, taxdat$Genus)]
granc$Superorder <- taxdat$Superorder[match(granc$group, taxdat$Genus)]
granc$Order <- taxdat$Order[match(granc$group, taxdat$Genus)]
granc$Suborder <- taxdat$Suborder[match(granc$group, taxdat$Genus)]
granc$Infraorder <- taxdat$Infraorder[match(granc$group, taxdat$Genus)]
granc$Superfamily <- taxdat$Superfamily[match(granc$group, taxdat$Genus)]
granc$Family <- taxdat$Family[match(granc$group, taxdat$Genus)]
granc$Subfamily <- taxdat$Subfamily[match(granc$group, taxdat$Genus)]
granc$Tribe <- taxdat$Tribe[match(granc$group, taxdat$Genus)]
granc
unknowns <- (granc %>%
filter(is.na(Family)))$group
taxdat$Family[match(sub("\\..*", "", unknowns), taxdat$Genus)]
unknowns2 <- data.frame(genera = unknowns,
Phylum = taxdat$Phylum[match(sub("\\..*", "", unknowns), taxdat$Genus)] ,
Subphylum = taxdat$Subphylum[match(sub("\\..*", "", unknowns), taxdat$Genus)] ,
Superclass = taxdat$Superclass[match(sub("\\..*", "", unknowns), taxdat$Genus)] ,
Class = taxdat$Class[match(sub("\\..*", "", unknowns), taxdat$Genus)] ,
Subclass = taxdat$Subclass[match(sub("\\..*", "", unknowns), taxdat$Genus)] ,
Infraclass = taxdat$Infraclass[match(sub("\\..*", "", unknowns), taxdat$Genus)] ,
Superorder = taxdat$Superorder[match(sub("\\..*", "", unknowns), taxdat$Genus)] ,
Order = taxdat$Order[match(sub("\\..*", "", unknowns), taxdat$Genus)],
Suborder = taxdat$Suborder[match(sub("\\..*", "", unknowns), taxdat$Genus)],
Infraorder = taxdat$Infraorder[match(sub("\\..*", "", unknowns), taxdat$Genus)],
Superfamily = taxdat$Superfamily[match(sub("\\..*", "", unknowns), taxdat$Genus)],
Family = taxdat$Family[match(sub("\\..*", "", unknowns), taxdat$Genus)],
Subfamily = taxdat$Subfamily[match(sub("\\..*", "", unknowns), taxdat$Genus)],
Tribe = taxdat$Tribe[match(sub("\\..*", "", unknowns), taxdat$Genus)])
grancknowns <- granc %>%
filter(!(is.na(Family)))
grancunknowns <- granc %>%
filter((is.na(Family)))
grancunknowns$Phylum <- unknowns2$Phylum[match(grancunknowns$group, unknowns2$group)]
grancunknowns$Subphylum <- unknowns2$Subphylum[match(grancunknowns$group, unknowns2$group)]
grancunknowns$Superclass <- unknowns2$Superclass[match(grancunknowns$group, unknowns2$group)]
grancunknowns$Class <- unknowns2$Class[match(grancunknowns$group, unknowns2$group)]
grancunknowns$Subclass <- unknowns2$Subclass[match(grancunknowns$group, unknowns2$group)]
grancunknowns$Infraclass <- unknowns2$Infraclass[match(grancunknowns$group, unknowns2$group)]
unknowns2 <- data.frame(group = unknowns,
Phylum = taxdat$Phylum[match(sub("\\..*", "", unknowns), taxdat$Genus)] ,
Subphylum = taxdat$Subphylum[match(sub("\\..*", "", unknowns), taxdat$Genus)] ,
Superclass = taxdat$Superclass[match(sub("\\..*", "", unknowns), taxdat$Genus)] ,
Class = taxdat$Class[match(sub("\\..*", "", unknowns), taxdat$Genus)] ,
Subclass = taxdat$Subclass[match(sub("\\..*", "", unknowns), taxdat$Genus)] ,
Infraclass = taxdat$Infraclass[match(sub("\\..*", "", unknowns), taxdat$Genus)] ,
Superorder = taxdat$Superorder[match(sub("\\..*", "", unknowns), taxdat$Genus)] ,
Order = taxdat$Order[match(sub("\\..*", "", unknowns), taxdat$Genus)],
Suborder = taxdat$Suborder[match(sub("\\..*", "", unknowns), taxdat$Genus)],
Infraorder = taxdat$Infraorder[match(sub("\\..*", "", unknowns), taxdat$Genus)],
Superfamily = taxdat$Superfamily[match(sub("\\..*", "", unknowns), taxdat$Genus)],
Family = taxdat$Family[match(sub("\\..*", "", unknowns), taxdat$Genus)],
Subfamily = taxdat$Subfamily[match(sub("\\..*", "", unknowns), taxdat$Genus)],
Tribe = taxdat$Tribe[match(sub("\\..*", "", unknowns), taxdat$Genus)])
grancknowns <- granc %>%
filter(!(is.na(Family)))
grancunknowns <- granc %>%
filter((is.na(Family)))
grancunknowns$Phylum <- unknowns2$Phylum[match(grancunknowns$group, unknowns2$group)]
grancunknowns$Subphylum <- unknowns2$Subphylum[match(grancunknowns$group, unknowns2$group)]
grancunknowns$Superclass <- unknowns2$Superclass[match(grancunknowns$group, unknowns2$group)]
grancunknowns$Class <- unknowns2$Class[match(grancunknowns$group, unknowns2$group)]
grancunknowns$Subclass <- unknowns2$Subclass[match(grancunknowns$group, unknowns2$group)]
grancunknowns$Infraclass <- unknowns2$Infraclass[match(grancunknowns$group, unknowns2$group)]
grancunknowns$Superorder <- unknowns2$Superorder[match(grancunknowns$group, unknowns2$group)]
grancunknowns$Order <- unknowns2$Order[match(grancunknowns$group, unknowns2$group)]
grancunknowns$Suborder <- unknowns2$Suborder[match(grancunknowns$group, unknowns2$group)]
grancunknowns$Infraorder <- unknowns2$Infraorder[match(grancunknowns$group, unknowns2$group)]
grancunknowns$Superfamily <- unknowns2$Superfamily[match(grancunknowns$group, unknowns2$group)]
grancunknowns$Family <- unknowns2$Family[match(grancunknowns$group, unknowns2$group)]
grancunknowns$Subfamily <- unknowns2$Subfamily[match(grancunknowns$group, unknowns2$group)]
grancunknowns$Tribe <- unknowns2$Tribe[match(grancunknowns$group, unknowns2$group)]
granc2 <- bind_rows(grancknowns, grancunknowns)
granc2
View(granc2)
granc2
granc2 <- granc2[order(granc2$group),]
colnames(granc2)[1]
colnames(granc2)[1] = "Genus"
granc2
write.csv(granc2,
"C:/Users/mikem/Documents/Research/USGS Stream Macros/MahonRumschlagPowell/GeneraTaxonomicInformation.csv",
row.names = FALSE)
write.csv(granc2,
"C:/Users/mikem/Documents/Research/USGS Stream Macros/MahonRumschlagPowell/GeneraTaxonomicInformation.csv",
row.names = FALSE)
devtools::document()
rm(list = c("getInvertData"))
devtools::document()
devtools::build()
library(tidyverse)
##Read in datasets directly from EPA website
NRSA_1819_inverts = read.csv("https://www.epa.gov/sites/production/files/2021-04/nrsa_1819_benthic_macroinvertebrate_count_-_data.csv",
colClasses = c("UID" = "character"),
stringsAsFactors = FALSE)
NRSA_1819_sites = read.csv("https://www.epa.gov/sites/production/files/2021-04/nrsa_1819_site_information_-_data.csv",
colClasses = c("UID" = "character"),
stringsAsFactors = FALSE)
NRSA_1314_inverts = read.csv("https://www.epa.gov/sites/production/files/2019-04/nrsa1314_bentcnts_04232019.csv",
colClasses = c("UID" = "character"),
stringsAsFactors = FALSE)
NRSA_1314_sites = read.csv("https://www.epa.gov/sites/production/files/2019-04/nrsa1314_siteinformation_wide_04292019.csv",
colClasses = c("UID" = "character",
"STATECTY" = "character"),
stringsAsFactors = FALSE)
NRSA_0809_inverts = read.csv("https://www.epa.gov/sites/production/files/2016-11/nrsa0809bentcts.csv",
colClasses = c("UID" = "character"),
stringsAsFactors = FALSE)
NRSA_0809_inverts_tax = read.csv("https://www.epa.gov/sites/production/files/2016-06/nrsa_0809_benttaxa.csv",
stringsAsFactors = FALSE)
NRSA_0809_sites = read.csv("https://www.epa.gov/sites/production/files/2015-09/siteinfo_0.csv",
colClasses = c("UID" = "character"),
stringsAsFactors = FALSE)
NRSA_0304_inverts = rbind(read.csv("https://www.epa.gov/sites/production/files/2014-10/wsa_bencnt_genus_ts_final_part1.csv",
stringsAsFactors = FALSE),
read.csv("https://www.epa.gov/sites/production/files/2014-10/wsa_bencnt_genus_ts_final_part2.csv",
stringsAsFactors = FALSE))
NRSA_0304_sites = read.csv("https://www.epa.gov/sites/production/files/2014-10/wsa_siteinfo_ts_final.csv",
stringsAsFactors = FALSE)
#############
##First step:
##Filter SAMPLE_TYPE to "BERW", "BERWW", or "REACHWIDE" in NRSA_inverts
sampletype = c("BERW", "BERWW", "REACHWIDE")
##2003/2004
NRSA_0304_inverts = NRSA_0304_inverts %>%
dplyr::filter(INDEX_SAMPTYPE %in% sampletype) %>%
dplyr::select(-DISTINCT, -HABIT, -PTV, -FLAG_PTV, -FFG)
##Replace NAs with "", which is consistent with the other NRSA datasets
NRSA_0304_inverts$GENUS = ifelse(is.na(NRSA_0304_inverts$GENUS),
"",
NRSA_0304_inverts$GENUS)
NRSA_0304_inverts$FAMILY = ifelse(is.na(NRSA_0304_inverts$FAMILY),
"",
NRSA_0304_inverts$FAMILY)
NRSA_0304_inverts$ORDER = ifelse(is.na(NRSA_0304_inverts$ORDER),
"",
NRSA_0304_inverts$ORDER)
NRSA_0304_inverts$CLASS = ifelse(is.na(NRSA_0304_inverts$CLASS),
"",
NRSA_0304_inverts$CLASS)
##Use the names directly in Genus, Family, Order, Class, or Phylum
##Some names don't match or are at the subfamily level, which doesn't exist for all
##Datasets
NRSA_0304_inverts$TARGET_TAXON <- ifelse(NRSA_0304_inverts$GENUS != "",
NRSA_0304_inverts$GENUS,
ifelse(NRSA_0304_inverts$FAMILY != "",
NRSA_0304_inverts$FAMILY,
ifelse(NRSA_0304_inverts$ORDER != "",
NRSA_0304_inverts$ORDER,
ifelse(NRSA_0304_inverts$CLASS != "",
NRSA_0304_inverts$CLASS,
NRSA_0304_inverts$PHYLUM
)
)
)
)
##Create UID based on WSA, Site_id, and Visit_no
NRSA_0304_inverts$UID <- paste("200304",
NRSA_0304_inverts$SITE_ID,
NRSA_0304_inverts$VISIT_NO,
sep = "_")
##Update column names to match those of 08/09 and 13/14
colnames(NRSA_0304_inverts)[c(4,10)] = c("SAMPLE_TYPE", "TOTAL")
##Rearrange columns to match those of 08/09 and 13/14
NRSA_0304_inverts <- NRSA_0304_inverts %>%
dplyr::relocate(any_of(c("UID", "SITE_ID", "YEAR", "VISIT_NO", "SAMPLE_TYPE",
"TARGET_TAXON", "TOTAL", "PHYLUM", "CLASS", "ORDER",
"FAMILY", "GENUS")))
##2008/2009
##Filter to BERW; remove columns that are not needed
NRSA_0809_inverts = NRSA_0809_inverts %>%
dplyr::filter(SAMPLE_TYPE %in% sampletype) %>%
dplyr::select(-IS_DISTINCT, -TOTAL300, -IS_DISTINCT300, -BENT_COM, -DATE_BENT,
-SAMPLE_CAT, -PUBLICATION_DATE) %>%
dplyr::mutate(YEAR = paste("20", stringr::str_sub(DATE_COL, -2,-1), sep = ""),
YEAR = as.numeric(YEAR)) %>%
dplyr::select(-DATE_COL)
##Join the count data to the taxa data to match those of 03/04
NRSA_0809_inverts<- NRSA_0809_inverts %>%
dplyr::left_join(NRSA_0809_inverts_tax %>%
dplyr::select(TAXA_ID, PHYLUM, CLASS, ORDER, FAMILY, GENUS),
by = "TAXA_ID")
##Update this weird TARGET_TAXON that is THIENEMANNIMYIA GENUS GR., but does not
##have a genus associated with it; so make genus = "THIENEMANNIMYIA"
NRSA_0809_inverts$GENUS = ifelse(grepl("GENUS", NRSA_0809_inverts$TARGET_TAXON),
"THIENEMANNIMYIA",
NRSA_0809_inverts$GENUS)
##Rearrange columns to match those of 08/09 and 13/14
NRSA_0809_inverts <- NRSA_0809_inverts %>%
dplyr::relocate(YEAR, .before = SAMPLE_TYPE) %>%
dplyr::select(-TAXA_ID)
##2013/2014
##Filter to BERW; remove columns that are not needed (taxonomic resolutions are
##not available in all datasets, so remove those that are not found across data)
NRSA_1314_inverts = NRSA_1314_inverts %>%
dplyr::filter(SAMPLE_TYPE %in% sampletype) %>%
dplyr::select(-IS_DISTINCT, -TOTAL300, -IS_DISTINCT300, -TOTAL300_OE,
-PUBLICATION_DATE, -TRIBE, -SUBFAMILY, -TAXA_ID)
##Update this weird TARGET_TAXON that is THIENEMANNIMYIA GENUS GR., but does not
##have a genus associated with it; so make genus = "THIENEMANNIMYIA"
NRSA_1314_inverts$GENUS = ifelse(grepl("GENUS", NRSA_1314_inverts$TARGET_TAXON),
"THIENEMANNIMYIA",
NRSA_1314_inverts$GENUS)
##Filter to BERW; remove columns that are not needed (taxonomic resolutions are
##not available in all datasets, so remove those that are not found across data)
NRSA_1819_inverts <- NRSA_1819_inverts %>%
dplyr::filter(SAMPLE_TYPE %in% sampletype) %>%
dplyr::select(-IS_DISTINCT, -TOTAL300, -IS_DISTINCT300, -EPA_REG,
-PUBLICATION_DATE, -TRIBE, -SUBFAMILY, -TAXA_ID,
-FFG, -HABIT, -PTV, -AG_ECO9, -NON_TARGET, -SITESAMP,
-STATE, -UNIQUE_ID) %>%
dplyr::mutate(YEAR = str_sub(DATE_COL, -4,-1),
YEAR = as.numeric(YEAR)) %>%
dplyr::select(-DATE_COL) %>%
dplyr::relocate(colnames(NRSA_1314_inverts))
##Update this weird TARGET_TAXON that is THIENEMANNIMYIA GENUS GR., but does not
##have a genus associated with it; so make genus = "THIENEMANNIMYIA"
NRSA_1819_inverts$GENUS = ifelse(grepl("GENUS", NRSA_1819_inverts$TARGET_TAXON),
"THIENEMANNIMYIA",
NRSA_1819_inverts$GENUS)
##Bind all
NRSA_inverts <- dplyr::bind_rows(list(NRSA_0304_inverts, NRSA_0809_inverts,
NRSA_1314_inverts, NRSA_1819_inverts))
##Catch the "/" genus and make sure it is put in the GENUS column
NRSA_inverts <- NRSA_inverts %>%
mutate(GENUS = ifelse(grepl("/", TARGET_TAXON),
TARGET_TAXON,
GENUS))
##Convert Genera names from all caps to sentence case (GENUS to Genus)
NRSA_inverts$GENUS <- stringr::str_to_sentence(NRSA_inverts$GENUS)
##Fix issue w/ str_to_sentence that is causing Orthocladius to be lowercase
NRSA_inverts$GENUS <- ifelse(NRSA_inverts$GENUS == "Cricotopus/orthocladius",
"Cricotopus/Orthocladius",
NRSA_inverts$GENUS)
##Read in the density conversion dataset from the EPA
NRSADenconv <- utils::read.csv(base::system.file("extdata",
"EPA_DensityConv.csv",
package = "StreamData"),
colClasses = c("SITE_ID" = "character"),
stringsAsFactors = FALSE) %>%
dplyr::select(-ABUNDCNT, -TOTLDENS, -UNIQUE_ID)
##Pair down the EPA dataset to only those site-year-visit_no combinations
##that appear in the NRSA_inverts dataset
NRSADenconv <- NRSADenconv[which((paste(NRSADenconv$SITE_ID,
NRSADenconv$YEAR,
NRSADenconv$VISIT_NO,
sep = "_") %in%
paste(NRSA_inverts$SITE_ID,
NRSA_inverts$YEAR,
NRSA_inverts$VISIT_NO,
sep = "_"))),]
NRSA_inverts <- NRSA_inverts %>%
dplyr::left_join(NRSADenconv, by = c("SITE_ID", "YEAR", "VISIT_NO"))
View(NRSADenconv)
devtools::document()
devtools::build()
