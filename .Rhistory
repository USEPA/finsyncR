#If genera that are one of problem slash genera, rename the Genus with the lumped
#label from fix_slash, else, keep the original Genus label
NRSA_inverts$GENUS <- ifelse(NRSA_inverts$GENUS %in% fix_slash$Slash,
fix_slash$Fix[match(NRSA_inverts$GENUS,
fix_slash$Slash)],
NRSA_inverts$GENUS)
#If bench genera that are one of bench genera in clust_labels, rename the Genus with the lump label from clust_labels
#else, keep the original Genus label
NRSA_inverts$GENUS <- ifelse(NRSA_inverts$GENUS %in% slashlump$genus,
slashlump$lump[match(NRSA_inverts$GENUS,
slashlump$genus)],
NRSA_inverts$GENUS)
}else if(taxonFix == "remove"){
#filter out rows that have bench genus from problem list & no species ID
NRSA_inverts <- NRSA_inverts %>%
dplyr::filter(!(GENUS %in% StreamData:::.clust_labels$genus)) %>%
dplyr::filter(!(grepl("/", GENUS)))
}
##When "taxonLevel" isn't in all caps (in the function), create a NRSA specific
##taxonLevel that is in all caps
taxonLevel.nrsa <- base::toupper(taxonLevel)
if(isTRUE(sharedTaxa)){
##List of NAWQA Genera
NAWQAgenera <- unique(TotalRows$Genus)
##List of NRSA Genera
NRSAgenera <- unique(NRSA_inverts$GENUS)
##Filter NRSA to only those genera in NAWQA
NRSA_inverts <- NRSA_inverts %>%
filter(GENUS %in% NAWQAgenera)
##Select only those taxa that appear in NAWQA
##add "tax_" prefix to the names, as this is how the genera names appear
##as columns in the NAWQA dataset
NAWQAgeneraONLY <- paste("tax_",
NAWQAgenera[!(NAWQAgenera %in% NRSAgenera)],
sep = "")
##Filter NAWQA to only those genera in NRSA (-select [delete] any that
##appear in columns in the invert_comms1 dataset)
invert_comms1 <- invert_comms1 %>%
dplyr::select(-tidyselect::any_of(NAWQAgeneraONLY))
} else {}
##Fourth step: (can get code from the getInvertData function)
## NOTE: this step is only needed when looking at taxonomic resolutions ABOVE genus
##Join all Target_taxon within each UID (sample)
##UPDATE THIS FOR NRSA_MYCOLS
mycols = c("TARGET_TAXON",
"PHYLUM",
"CLASS",
"ORDER",
"FAMILY")
nrsa_comms1 = NRSA_inverts %>%
dplyr::filter_at(dplyr::vars(tidyselect::all_of(taxonLevel.nrsa)), dplyr::any_vars(. != "")) %>%
tidyr::unite(UNIQUEID, c(UID, SITE_ID, YEAR, VISIT_NO, all_of(taxonLevel.nrsa)),
sep = "_", remove = FALSE) %>%
dplyr::group_by(UNIQUEID) %>%
dplyr::mutate(TOTAL = sum(TOTAL)) %>%
dplyr::slice(1) %>%
dplyr::ungroup() %>%
dplyr::select(-UNIQUEID) %>%
dplyr::select(-tidyselect::any_of(mycols)) %>%
tidyr::pivot_wider(names_from = tidyselect::all_of(taxonLevel.nrsa),
names_prefix = "tax_",
values_from = TOTAL,
values_fill = 0)
##Step 6: join w/ site level data
##18/19 - MISSING RT_NRSA, will put in ""
##UID, SITE_ID, VISIT_NO, SITETYPE, DATE_COL, PSTL_CODE, LAT_DD83, LON_DD83,
##AG_ECO9, URBN_NRS18, US_L3CODE, US_L3NAME
NRSA_1819_sites <- NRSA_1819_sites %>%
dplyr::select(UID, SITE_ID, VISIT_NO, SITETYPE, DATE_COL, PSTL_CODE,
LAT_DD83, LON_DD83, AG_ECO9, URBN_NRS18,
US_L3CODE, US_L3NAME) %>%
dplyr::mutate(RT_NRSA = "",
DATE_COL = as.Date(DATE_COL, format = "%m/%d/%Y"),
VISIT_NO = as.character(VISIT_NO),
MASTER_SITEID = SITE_ID) %>%
dplyr::relocate(RT_NRSA, .before = US_L3CODE) %>%
dplyr::relocate(MASTER_SITEID, .after = SITE_ID)
##13/14
##UID, SITE_ID, VISIT_NO, SITETYPE, DATE_COL, PSTL_CODE, LAT_DD83, LON_DD83,
##AG_ECO9, NRS13_Urban, RT_NRSA, US_L3CODE, US_L3NAME,
NRSA_1314_sites <- NRSA_1314_sites %>%
dplyr::select(UID, SITE_ID, VISIT_NO, SITETYPE, DATE_COL, PSTL_CODE,
LAT_DD83, LON_DD83, AG_ECO9, NRS13_URBN, RT_NRSA,
US_L3CODE, US_L3NAME) %>%
dplyr::mutate(RT_NRSA = ifelse(RT_NRSA == "?",
"",
RT_NRSA),
DATE_COL = as.Date(DATE_COL, format = "%m/%d/%Y"),
VISIT_NO = as.character(VISIT_NO),
MASTER_SITEID = SITE_ID) %>%
dplyr::relocate(MASTER_SITEID, .after = SITE_ID)
##08/09 - MISSING L3 NAME (not a problem)
##UID, SITE_ID, VISIT_NO, SITE_CLASS, DATE_COL, STATE, LAT_DD83, LONG_DD83,
##AGGR_ECO9_2015, URBAN, RT_NRSA, US_L3CODE_2015
NRSA_0809_sites <- NRSA_0809_sites %>%
dplyr::select(UID, SITE_ID, MASTER_SITEID, VISIT_NO, SITE_CLASS, DATE_COL, STATE,
LAT_DD83, LON_DD83, AGGR_ECO9_2015, URBAN, RT_NRSA,
US_L3CODE_2015) %>%
dplyr::mutate(RT_NRSA = ifelse(RT_NRSA == "R",
"R",
ifelse(RT_NRSA == "S",
"In",
ifelse(RT_NRSA == "T",
"Im",
"")))) %>%
dplyr::mutate(US_L3NAME = "",
DATE_COL = as.Date(DATE_COL, format = "%d-%b-%y"),
VISIT_NO = as.character(VISIT_NO))
##For some reason, one MASTER_SITEID is missing for one replicate sample, so give it the site id
NRSA_0809_sites$MASTER_SITEID[which(NRSA_0809_sites$SITE_ID == "FW08LA004")] = "FW08LA004"
##03/04 - MISSING UID (will create in the same way as above), URBAN
##SITE_ID, VISIT_NO, SITETYPE, DATE_COL, STATE, LAT_DD, LON_DD,
##ECOWSA9, RT_WSA, ECO3, ECO3_NM
NRSA_0304_sites <- NRSA_0304_sites %>%
dplyr::select(SITE_ID, VISIT_NO, SITETYPE, DATE_COL, STATE, LAT_DD, LON_DD,
ECOWSA9, RT_WSA, ECO3, ECO3_NM) %>%
dplyr::mutate(RT_WSA = ifelse(RT_WSA == "R",
"R",
ifelse(RT_WSA == "S",
"In",
ifelse(RT_WSA == "T",
"Im",
"")))) %>%
dplyr::mutate(URBAN = "",
UID = paste("200304", SITE_ID, VISIT_NO,
sep = "_"),
DATE_COL = as.Date(DATE_COL, format = "%m/%d/%Y"),
VISIT_NO = as.character(VISIT_NO),
MASTER_SITEID = SITE_ID) %>%
dplyr::relocate(UID, .before = SITE_ID) %>%
dplyr::relocate(URBAN, .before = RT_WSA) %>%
dplyr::relocate(MASTER_SITEID, .after = SITE_ID)
##Set all column names equal to each other
colnames(NRSA_0304_sites) =
colnames(NRSA_0809_sites) =
colnames(NRSA_1819_sites) =
colnames(NRSA_1314_sites)
NRSA_sites <-  dplyr::bind_rows(list(NRSA_1819_sites, NRSA_1314_sites,
NRSA_0809_sites, NRSA_0304_sites))
NRSA_sites$YEAR = lubridate::year(NRSA_sites$DATE_COL)
##Join with nrsa_comms1 to get site-level data
nrsa_comms1 = nrsa_comms1 %>%
tidyr::unite(UNIQUEID, c(UID, SITE_ID, YEAR, VISIT_NO),
sep = "_", remove = FALSE) %>%
dplyr::left_join(NRSA_sites %>%
tidyr::unite(UNIQUEID, c(UID, SITE_ID, YEAR, VISIT_NO),
sep = "_", remove = T), by = "UNIQUEID") %>%
dplyr::relocate(tidyselect::contains("tax_"), .after = last_col()) %>%
dplyr::mutate(ProjectLabel = ifelse(YEAR %in% c(2013, 2014),
"NRSA1314",
ifelse(YEAR %in% c(2008, 2009),
"NRSA0809",
ifelse(YEAR %in% c(2018, 2019),
"NRSA1819",
"WSA"))),
ProjectAssignedSampleLabel = UID,
NAWQA.SMCOD = UNIQUEID,
NAWQAStudyUnitCode = SITETYPE,
CollectionDate = DATE_COL,
StartTime = NA,
TimeDatum = NA,
CollectionYear = YEAR,
CollectionMonth = lubridate::month(DATE_COL),
CollectionDayOfYear = lubridate::yday(DATE_COL),
SiteVisitSampleNumber = VISIT_NO,
ProvisionalData = NA,
SiteNumber = MASTER_SITEID,
SiteName = MASTER_SITEID,
StateFIPSCode = NA,
CountyFIPSCode = NA,
Latitude_dd = LAT_DD83,
Longitude_dd = LON_DD83,
CoordinateDatum = "NAD83",
HUCCode = NA,
DrainageArea_mi2 = NA ,
SampleTypeCode = SAMPLE_TYPE,
IdentificationEntity = NA,
AreaSampTot_m2  = NA,
GeomorphicChannelUnit = NA,
ChannelBoundaries = NA,
ChannelFeatures = NA,
ReplicateType  = NA,
PercentCount = PCTCOUNT,
AreaSampTot_m2 = round(NUMTRANS / 10.76, 3)
) %>%
dplyr::select(-SAMPLE_TYPE, -LAT_DD83, -LON_DD83, -SITETYPE,
-SITE_ID, -MASTER_SITEID, -UID, -UNIQUEID, -DATE_COL,
-YEAR, -PSTL_CODE, -US_L3CODE, -US_L3NAME, -VISIT_NO,
-AG_ECO9, -NRS13_URBN, -RT_NRSA, -PCTCOUNT, -NUMTRANS) %>%
dplyr::relocate(tidyselect::contains("tax_"), .after = last_col())
##To make sure the NRSA sites are correct crosswalked across sampling rounds
# rename the nrsa_comms1$SiteNumber based on the master crosswalk list from
# Richard Mitchell (w/ updates to include MASTER_SITEID)
##if site number in nrsa_comms1 is in the SITEID in the master crosswalk list,
##match the numbers and pull the corresponding unique id, which is the crosswalked site id,
##else provide an NA
nrsa_comms1$UNIQUE_ID <- ifelse(nrsa_comms1$SiteNumber %in% StreamData:::.NRSA_siteIDs$SITE_ID,
StreamData:::.NRSA_siteIDs$UNIQUE_ID[match(nrsa_comms1$SiteNumber,
StreamData:::.NRSA_siteIDs$SITE_ID)],
NA)
##if site number in nrsa_comms1 is in the MASTER_SITEID in the master crosswalk list,
##match the numbers and pull the corresponding unique id, which is the crosswalked site id,
##else give the current UNIQUE ID
nrsa_comms1$UNIQUE_ID <- ifelse(nrsa_comms1$SiteNumber %in% StreamData:::.NRSA_siteIDs$MASTER_SITEID,
StreamData:::.NRSA_siteIDs$UNIQUE_ID[match(nrsa_comms1$SiteNumber,
StreamData:::.NRSA_siteIDs$MASTER_SITEID)],
nrsa_comms1$UNIQUE_ID)
##if there are any NA values in UNIQUE ID, replace these with the SiteNumber
nrsa_comms1$SiteNumber = ifelse(is.na(nrsa_comms1$UNIQUE_ID),
nrsa_comms1$SiteNumber,
nrsa_comms1$UNIQUE_ID)
##remove the UNIQUEID column, as it is no longer needed
nrsa_comms1 <- nrsa_comms1 %>%
select(-UNIQUE_ID)
##Need to then join this dataset to invert_comms1
invert_comms1[setdiff(names(nrsa_comms1), names(invert_comms1))] <- NA
nrsa_comms1[setdiff(names(invert_comms1), names(nrsa_comms1))] <- NA
##Add Agency columns
invert_comms1$Agency <- "USGS"
nrsa_comms1$Agency <- "EPA"
invert_comms1 <- invert_comms1  %>%
dplyr::relocate(tidyselect::contains("tax_"), .after = last_col())
nrsa_comms1 <- nrsa_comms1  %>%
dplyr::relocate(tidyselect::contains("tax_"), .after = last_col()) %>%
dplyr::relocate(tidyselect::any_of(colnames(invert_comms1)))
invert_comms1 <- dplyr::bind_rows(invert_comms1, nrsa_comms1)
invert_comms1 = invert_comms1 %>%
dplyr::mutate(dplyr::across(tidyselect::starts_with("tax_"),
~ifelse(is.na(.x),
0,
.x)))
} else{ }
if(dataType == "occur") {
invert_comms1 = invert_comms1 %>%
dplyr::mutate(dplyr::across(tidyselect::starts_with("tax_"),
~replace(., . > 0, 1)))
}
invert_comms1$CollectionDate = as.Date(invert_comms1$CollectionDayOfYear,
origin = paste(invert_comms1$CollectionYear-1,
'12-31',
sep = "-"))
##Remove the "tax_" prefix
colnames(invert_comms1) = sub("tax_", "", colnames(invert_comms1))
return(data.frame(invert_comms1))
}
inverts1 <- getInvertData(dataType = "abun",
taxonLevel = "Genus",
taxonFix = "lump",
agency = c("USGS", "EPA"),
lifestage = FALSE,
rarefy = TRUE,
sharedTaxa = TRUE,
seed = 0)
inverts1 <- getInvertData(dataType = "abun",
taxonLevel = "Genus",
taxonFix = "lump",
agency = c("USGS", "EPA"),
lifestage = FALSE,
rarefy = FALSE,
sharedTaxa = TRUE,
seed = 0)
inverts1
View(inverts1)
ggplot(inverts1, aes(x = PercentCount))+
facet_wrap(~Agency)+
geom_histogram()
ggplot(inverts1, aes(x = PercentCount))+
facet_wrap(~Agency)+
geom_histogram()+
scale_x_log10()
ggplot(inverts1, aes(x = TotAreaSamp_m2))+
facet_wrap(~Agency)+
geom_histogram()+
scale_x_log10()
inverts1
ggplot(inverts1, aes(x = AreaSampTot_m2 ))+
facet_wrap(~Agency)+
geom_histogram()+
scale_x_log10()
taxdat <- read.csv("C:/Users/mikem/Documents/Research/USGS Stream Macros/MahonRumschlagPowell/20201028.1839.taxon_INVERT.csv")
colnames(taxdat)[1] <- "BenchTaxonName"
colnames(inverts1)
granc <- data.frame(genera = colnames(inverts1)[-c(1:32)])
granc
granc$BenchOrGenus <- ifelse(granc$genera %in% taxdat$Genus,
"Genus",
ifelse(granc$genera %in% taxdat$BenchTaxonName,
"Bench",
"Neither"
))
granc$BenchOrGenus
granc$Order <- taxdat$Order[match(granc$genera, taxdat$Genus)]
granc$Family <- taxdat$Family[match(granc$genera, taxdat$Genus)]
granc$Subfamily <- taxdat$Subfamily[match(granc$genera, taxdat$Genus)]
granc$Tribe <- taxdat$Tribe[match(granc$genera, taxdat$Genus)]
unknowns <- (granc %>%
filter(is.na(Family)))$genera
unknowns
sub("\\..*", "", genera) %in% taxdat$Genus
sub("\\..*", "", unknowns) %in% taxdat$Genus
taxdat$Family[match(sub("\\..*", "", unknowns), taxdat$Genus)]
unknowns2 <- data.frame(group = unknowns,
Order = taxdat$Order[match(sub("\\..*", "", unknowns), taxdat$Genus)],
Family = taxdat$Family[match(sub("\\..*", "", unknowns), taxdat$Genus)],
Subfamily = taxdat$Subfamily[match(sub("\\..*", "", unknowns), taxdat$Genus)],
Tribe = taxdat$Tribe[match(sub("\\..*", "", unknowns), taxdat$Genus)])
unknowns2
unknowns2$Order[1] = "Ephemeroptera"
unknowns2$Order
unknowns2 <- data.frame(group = unknowns,
Order = taxdat$Order[match(sub("\\..*", "", unknowns), taxdat$Genus)],
Family = taxdat$Family[match(sub("\\..*", "", unknowns), taxdat$Genus)],
Subfamily = taxdat$Subfamily[match(sub("\\..*", "", unknowns), taxdat$Genus)],
Tribe = taxdat$Tribe[match(sub("\\..*", "", unknowns), taxdat$Genus)])
unknowns2$Order
grancknowns <- granc %>%
filter(!(is.na(Family)))
grancunknowns <- granc %>%
filter((is.na(Family)))
unknowns2 <- data.frame(genera = unknowns,
Order = taxdat$Order[match(sub("\\..*", "", unknowns), taxdat$Genus)],
Family = taxdat$Family[match(sub("\\..*", "", unknowns), taxdat$Genus)],
Subfamily = taxdat$Subfamily[match(sub("\\..*", "", unknowns), taxdat$Genus)],
Tribe = taxdat$Tribe[match(sub("\\..*", "", unknowns), taxdat$Genus)])
grancknowns <- granc %>%
filter(!(is.na(Family)))
grancunknowns <- granc %>%
filter((is.na(Family)))
grancunknowns$Order <- unknowns2$Order[match(grancunknowns$genera, unknowns2$genera)]
grancunknowns$Family <- unknowns2$Family[match(grancunknowns$genera, unknowns2$genera)]
grancunknowns$Subfamily <- unknowns2$Subfamily[match(grancunknowns$genera, unknowns2$genera)]
grancunknowns$Tribe <- unknowns2$Tribe[match(grancunknowns$genera, unknowns2$genera)]
granc2 <- bind_rows(grancknowns, grancunknowns)
granc2
taxdat <- read.csv("C:/Users/mikem/Documents/Research/USGS Stream Macros/MahonRumschlagPowell/20201028.1839.taxon_INVERT.csv")
colnames(taxdat)[1] <- "BenchTaxonName"
granc <- data.frame(genera = colnames(inverts1)[-c(1:32)])
granc$BenchOrGenus <- ifelse(granc$genera %in% taxdat$Genus,
"Genus",
ifelse(granc$genera %in% taxdat$BenchTaxonName,
"Bench",
"Neither"
))
granc$Phylum <- taxdat$Phylum[match(granc$group, taxdat$group)]
granc$Subphylum <- taxdat$Subphylum[match(granc$group, taxdat$group)]
granc$Superclass <- taxdat$Superclass[match(granc$group, taxdat$group)]
granc$Class <- taxdat$Class[match(granc$group, taxdat$group)]
granc <- data.frame(group = colnames(inverts1)[-c(1:32)])
granc <- data.frame(group = colnames(inverts1)[-c(1:32)])
granc$BenchOrGenus <- ifelse(granc$group %in% taxdat$Genus,
"Genus",
ifelse(granc$group %in% taxdat$BenchTaxonName,
"Bench",
"Neither"
))
granc$Phylum <- taxdat$Phylum[match(granc$group, taxdat$group)]
granc$Subphylum <- taxdat$Subphylum[match(granc$group, taxdat$group)]
granc$Superclass <- taxdat$Superclass[match(granc$group, taxdat$group)]
granc$Class <- taxdat$Class[match(granc$group, taxdat$group)]
granc$Subclass <- taxdat$Subclass[match(granc$group, taxdat$group)]
granc$Infraclass <- taxdat$Infraclass[match(granc$group, taxdat$group)]
granc$Superorder <- taxdat$Superorder[match(granc$group, taxdat$group)]
granc$Order <- taxdat$Order[match(granc$group, taxdat$group)]
granc$Suborder <- taxdat$Suborder[match(granc$group, taxdat$group)]
granc$Infraorder <- taxdat$Infraorder[match(granc$group, taxdat$group)]
granc$Superfamily <- taxdat$Superfamily[match(granc$group, taxdat$group)]
granc$Family <- taxdat$Family[match(granc$group, taxdat$group)]
granc$Subfamily <- taxdat$Subfamily[match(granc$group, taxdat$group)]
granc$Tribe <- taxdat$Tribe[match(granc$group, taxdat$group)]
unknowns <- (granc %>%
filter(is.na(Family)))$group
taxdat$Family[match(sub("\\..*", "", unknowns), taxdat$Genus)]
unknowns2 <- data.frame(genera = unknowns,
Phylum = taxdat$Phylum[match(sub("\\..*", "", unknowns), taxdat$Genus)] ,
Subphylum = taxdat$Subphylum[match(sub("\\..*", "", unknowns), taxdat$Genus)] ,
Superclass = taxdat$Superclass[match(sub("\\..*", "", unknowns), taxdat$Genus)] ,
Class = taxdat$Class[match(sub("\\..*", "", unknowns), taxdat$Genus)] ,
Subclass = taxdat$Subclass[match(sub("\\..*", "", unknowns), taxdat$Genus)] ,
Infraclass = taxdat$Infraclass[match(sub("\\..*", "", unknowns), taxdat$Genus)] ,
Superorder = taxdat$Superorder[match(sub("\\..*", "", unknowns), taxdat$Genus)] ,
Order = taxdat$Order[match(sub("\\..*", "", unknowns), taxdat$Genus)],
Suborder = taxdat$Suborder[match(sub("\\..*", "", unknowns), taxdat$Genus)],
Infraorder = taxdat$Infraorder[match(sub("\\..*", "", unknowns), taxdat$Genus)],
Superfamily = taxdat$Superfamily[match(sub("\\..*", "", unknowns), taxdat$Genus)],
Family = taxdat$Family[match(sub("\\..*", "", unknowns), taxdat$Genus)],
Subfamily = taxdat$Subfamily[match(sub("\\..*", "", unknowns), taxdat$Genus)],
Tribe = taxdat$Tribe[match(sub("\\..*", "", unknowns), taxdat$Genus)])
grancknowns <- granc %>%
filter(!(is.na(Family)))
grancunknowns <- granc %>%
filter((is.na(Family)))
grancunknowns$Phylum <- unknowns2$Phylum[match(grancunknowns$group, unknowns2$group)]
grancunknowns$Subphylum <- unknowns2$Subphylum[match(grancunknowns$group, unknowns2$group)]
grancunknowns$Superclass <- unknowns2$Superclass[match(grancunknowns$group, unknowns2$group)]
grancunknowns$Class <- unknowns2$Class[match(grancunknowns$group, unknowns2$group)]
grancunknowns$Subclass <- unknowns2$Subclass[match(grancunknowns$group, unknowns2$group)]
grancunknowns$Infraclass <- unknowns2$Infraclass[match(grancunknowns$group, unknowns2$group)]
grancunknowns$Superorder <- unknowns2$Superorder[match(grancunknowns$group, unknowns2$group)]
grancunknowns$Order <- unknowns2$Order[match(grancunknowns$group, unknowns2$group)]
grancunknowns$Suborder <- unknowns2$Suborder[match(grancunknowns$group, unknowns2$group)]
grancunknowns$Infraorder <- unknowns2$Infraorder[match(grancunknowns$group, unknowns2$group)]
grancunknowns$Superfamily <- unknowns2$Superfamily[match(grancunknowns$group, unknowns2$group)]
grancunknowns$Family <- unknowns2$Family[match(grancunknowns$group, unknowns2$group)]
grancunknowns$Subfamily <- unknowns2$Subfamily[match(grancunknowns$group, unknowns2$group)]
grancunknowns$Tribe <- unknowns2$Tribe[match(grancunknowns$group, unknowns2$group)]
granc2 <- bind_rows(grancknowns, grancunknowns)
granc2
taxdat
granc <- data.frame(group = colnames(inverts1)[-c(1:32)])
granc
granc$BenchOrGenus <- ifelse(granc$group %in% taxdat$Genus,
"Genus",
ifelse(granc$group %in% taxdat$BenchTaxonName,
"Bench",
"Neither"
))
granc$Phylum <- taxdat$Phylum[match(granc$group, taxdat$group)]
granc
granc$Phylum <- taxdat$Phylum[match(granc$group, taxdat$Genus)]
granc$Subphylum <- taxdat$Subphylum[match(granc$group, taxdat$Genus)]
granc$Superclass <- taxdat$Superclass[match(granc$group, taxdat$Genus)]
granc$Class <- taxdat$Class[match(granc$group, taxdat$Genus)]
granc$Subclass <- taxdat$Subclass[match(granc$group, taxdat$Genus)]
granc$Infraclass <- taxdat$Infraclass[match(granc$group, taxdat$Genus)]
granc$Superorder <- taxdat$Superorder[match(granc$group, taxdat$Genus)]
granc$Order <- taxdat$Order[match(granc$group, taxdat$Genus)]
granc$Suborder <- taxdat$Suborder[match(granc$group, taxdat$Genus)]
granc$Infraorder <- taxdat$Infraorder[match(granc$group, taxdat$Genus)]
granc$Superfamily <- taxdat$Superfamily[match(granc$group, taxdat$Genus)]
granc$Family <- taxdat$Family[match(granc$group, taxdat$Genus)]
granc$Subfamily <- taxdat$Subfamily[match(granc$group, taxdat$Genus)]
granc$Tribe <- taxdat$Tribe[match(granc$group, taxdat$Genus)]
granc
unknowns <- (granc %>%
filter(is.na(Family)))$group
taxdat$Family[match(sub("\\..*", "", unknowns), taxdat$Genus)]
unknowns2 <- data.frame(genera = unknowns,
Phylum = taxdat$Phylum[match(sub("\\..*", "", unknowns), taxdat$Genus)] ,
Subphylum = taxdat$Subphylum[match(sub("\\..*", "", unknowns), taxdat$Genus)] ,
Superclass = taxdat$Superclass[match(sub("\\..*", "", unknowns), taxdat$Genus)] ,
Class = taxdat$Class[match(sub("\\..*", "", unknowns), taxdat$Genus)] ,
Subclass = taxdat$Subclass[match(sub("\\..*", "", unknowns), taxdat$Genus)] ,
Infraclass = taxdat$Infraclass[match(sub("\\..*", "", unknowns), taxdat$Genus)] ,
Superorder = taxdat$Superorder[match(sub("\\..*", "", unknowns), taxdat$Genus)] ,
Order = taxdat$Order[match(sub("\\..*", "", unknowns), taxdat$Genus)],
Suborder = taxdat$Suborder[match(sub("\\..*", "", unknowns), taxdat$Genus)],
Infraorder = taxdat$Infraorder[match(sub("\\..*", "", unknowns), taxdat$Genus)],
Superfamily = taxdat$Superfamily[match(sub("\\..*", "", unknowns), taxdat$Genus)],
Family = taxdat$Family[match(sub("\\..*", "", unknowns), taxdat$Genus)],
Subfamily = taxdat$Subfamily[match(sub("\\..*", "", unknowns), taxdat$Genus)],
Tribe = taxdat$Tribe[match(sub("\\..*", "", unknowns), taxdat$Genus)])
grancknowns <- granc %>%
filter(!(is.na(Family)))
grancunknowns <- granc %>%
filter((is.na(Family)))
grancunknowns$Phylum <- unknowns2$Phylum[match(grancunknowns$group, unknowns2$group)]
grancunknowns$Subphylum <- unknowns2$Subphylum[match(grancunknowns$group, unknowns2$group)]
grancunknowns$Superclass <- unknowns2$Superclass[match(grancunknowns$group, unknowns2$group)]
grancunknowns$Class <- unknowns2$Class[match(grancunknowns$group, unknowns2$group)]
grancunknowns$Subclass <- unknowns2$Subclass[match(grancunknowns$group, unknowns2$group)]
grancunknowns$Infraclass <- unknowns2$Infraclass[match(grancunknowns$group, unknowns2$group)]
unknowns2 <- data.frame(group = unknowns,
Phylum = taxdat$Phylum[match(sub("\\..*", "", unknowns), taxdat$Genus)] ,
Subphylum = taxdat$Subphylum[match(sub("\\..*", "", unknowns), taxdat$Genus)] ,
Superclass = taxdat$Superclass[match(sub("\\..*", "", unknowns), taxdat$Genus)] ,
Class = taxdat$Class[match(sub("\\..*", "", unknowns), taxdat$Genus)] ,
Subclass = taxdat$Subclass[match(sub("\\..*", "", unknowns), taxdat$Genus)] ,
Infraclass = taxdat$Infraclass[match(sub("\\..*", "", unknowns), taxdat$Genus)] ,
Superorder = taxdat$Superorder[match(sub("\\..*", "", unknowns), taxdat$Genus)] ,
Order = taxdat$Order[match(sub("\\..*", "", unknowns), taxdat$Genus)],
Suborder = taxdat$Suborder[match(sub("\\..*", "", unknowns), taxdat$Genus)],
Infraorder = taxdat$Infraorder[match(sub("\\..*", "", unknowns), taxdat$Genus)],
Superfamily = taxdat$Superfamily[match(sub("\\..*", "", unknowns), taxdat$Genus)],
Family = taxdat$Family[match(sub("\\..*", "", unknowns), taxdat$Genus)],
Subfamily = taxdat$Subfamily[match(sub("\\..*", "", unknowns), taxdat$Genus)],
Tribe = taxdat$Tribe[match(sub("\\..*", "", unknowns), taxdat$Genus)])
grancknowns <- granc %>%
filter(!(is.na(Family)))
grancunknowns <- granc %>%
filter((is.na(Family)))
grancunknowns$Phylum <- unknowns2$Phylum[match(grancunknowns$group, unknowns2$group)]
grancunknowns$Subphylum <- unknowns2$Subphylum[match(grancunknowns$group, unknowns2$group)]
grancunknowns$Superclass <- unknowns2$Superclass[match(grancunknowns$group, unknowns2$group)]
grancunknowns$Class <- unknowns2$Class[match(grancunknowns$group, unknowns2$group)]
grancunknowns$Subclass <- unknowns2$Subclass[match(grancunknowns$group, unknowns2$group)]
grancunknowns$Infraclass <- unknowns2$Infraclass[match(grancunknowns$group, unknowns2$group)]
grancunknowns$Superorder <- unknowns2$Superorder[match(grancunknowns$group, unknowns2$group)]
grancunknowns$Order <- unknowns2$Order[match(grancunknowns$group, unknowns2$group)]
grancunknowns$Suborder <- unknowns2$Suborder[match(grancunknowns$group, unknowns2$group)]
grancunknowns$Infraorder <- unknowns2$Infraorder[match(grancunknowns$group, unknowns2$group)]
grancunknowns$Superfamily <- unknowns2$Superfamily[match(grancunknowns$group, unknowns2$group)]
grancunknowns$Family <- unknowns2$Family[match(grancunknowns$group, unknowns2$group)]
grancunknowns$Subfamily <- unknowns2$Subfamily[match(grancunknowns$group, unknowns2$group)]
grancunknowns$Tribe <- unknowns2$Tribe[match(grancunknowns$group, unknowns2$group)]
granc2 <- bind_rows(grancknowns, grancunknowns)
granc2
View(granc2)
granc2
granc2 <- granc2[order(granc2$group),]
colnames(granc2)[1]
colnames(granc2)[1] = "Genus"
granc2
write.csv(granc2,
"C:/Users/mikem/Documents/Research/USGS Stream Macros/MahonRumschlagPowell/GeneraTaxonomicInformation.csv",
row.names = FALSE)
write.csv(granc2,
"C:/Users/mikem/Documents/Research/USGS Stream Macros/MahonRumschlagPowell/GeneraTaxonomicInformation.csv",
row.names = FALSE)
devtools::document()
rm(list = c("getInvertData"))
devtools::document()
devtools::build()
