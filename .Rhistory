fix_slash$Slash)],
TotalRows$Genus)
grep("Chironomus/Einfeldia", TotalRows$Genus)
TotalRows %>%
dplyr::mutate(BenchGenus = as.character(gsub( " .*$", "", BenchTaxonName)))
TotalRows$BenchGenus
#create bench genus in TotalRows
TotalRows <- TotalRows %>%
dplyr::mutate(BenchGenus = as.character(gsub( " .*$", "", BenchTaxonName)))
TotalRows$BenchGenus
TotalRows$BenchGenus %in% slashlump$genus &
TotalRows$PublishedTaxonNameLevel == "Genus"
##Fix a naming issue with "Einfeldia" groups
slashlump$lump[grep("Einfeldia/Glyptotendipes", slashlump$lump)] <- "Chironomus/Einfeldia/Glyptotendipes"
dat1
##Fix a naming issue. Needs to include "Glyptotendipes"
dat1$Slash[grep("Chironomus/Einfeldia", dat1$Slash)] <- "Chironomus/Einfeldia/Glyptotendipes"
dat1$Slash
fix_slash
dat1L
dat1L
##Third, pull the "lump" information from clust_labels based on the "group"
## from dat1L
dat1L$lump <- StreamData:::.clust_labels[match(dat1L$group,
StreamData:::.clust_labels$group),]$lump
dat1L
##Add "Anafroptilum.Centroptilum.Procloeon" to the fix list
dat1L[(nrow(dat1L) + 1),] <- list(10.6, 65, 1, "Anafroptilum.Centroptilum.Procloeon")
##Remove replicate genus from the dat1L list
dat1L <- dat1L %>%
dplyr::group_by(genus) %>%
dplyr::slice(1) %>%
dplyr::ungroup()
##Add "Anafroptilum.Centroptilum.Procloeon" to the fix list
dat1L[(nrow(dat1L) + 1),] <- list(10.6, 65, 1, "Anafroptilum.Centroptilum.Procloeon")
##Third, pull the "lump" information from clust_labels based on the "group"
## from dat1L
dat1L$lump <- StreamData:::.clust_labels[match(dat1L$group,
StreamData:::.clust_labels$group),]$lump
dat1L
dat1L
##Remove all observations with an NA for the group in dat1 (does not appear in
## clust_labels); then take 1 observation for each slash genus and generate
## information (this does not matter) to better join this dataset with the
## clust_labels dataset
dat1L <- dat1 %>%
dplyr::filter(!is.na(group)) %>%
dplyr::group_by(Slash) %>%
dplyr::slice(1) %>%
dplyr::mutate(X = 10.65,
num = 65,
genus = Slash) %>%
dplyr::ungroup() %>%
dplyr::select(X, num, group, genus)
dat1L$genus <- ifelse(dat1L$genus %in% fix_slash$Slash,
fix_slash$Fix[match(dat1L$genus,
fix_slash$Slash)],
dat1L$genus)
##Remove replicate genus from the dat1L list
dat1L <- dat1L %>%
dplyr::group_by(genus) %>%
dplyr::slice(1) %>%
dplyr::ungroup()
dat1L
##Add "Anafroptilum.Centroptilum.Procloeon" to the fix list
dat1L[(nrow(dat1L) + 1),] <- list(10.6, 65, 1, "Anafroptilum.Centroptilum.Procloeon")
dat1L
##Third, pull the "lump" information from clust_labels based on the "group"
## from dat1L
dat1L$lump <- StreamData:::.clust_labels[match(dat1L$group,
StreamData:::.clust_labels$group),]$lump
dat1L
fix_slash$Slash
fix_slash
dat1L
dat1 = data.frame(Genus = gns,
Slash = slashgen_fin[cnt])
##Fix a naming issue. Needs to include "Glyptotendipes"
dat1$Slash[grep("Chironomus/Einfeldia", dat1$Slash)] <- "Chironomus/Einfeldia/Glyptotendipes"
dat1
##From the genus to slash dataset from above, remove all of those that do not
## appear in the clust_labels dataset
##First, match the group information based on the genera present in both the dat1
## and clust_labels dataset
dat1$group <- StreamData:::.clust_labels[match(dat1$Genus,
StreamData:::.clust_labels$genus),]$group
dat1
dat1L
##Fix a naming issue with "Einfeldia" groups
slashlump$lump[grep("Einfeldia/Glyptotendipes", slashlump$lump)] <- "Chironomus/Einfeldia/Glyptotendipes"
slashlump
fix_slash$Fix
##Do the same for those in slashlump
TotalRows$Genus <- ifelse(TotalRows$Genus %in% slashlump$genus,
slashlump$lump[match(TotalRows$Genus,
slashlump$genus)],
TotalRows$Genus)
grep("Chironomus/Einfeldia", TotalRows$Genus)
TotalRows$Genus[grep("Chironomus/Einfeldia", TotalRows$Genus)]
devtools::document()
devtools::document()
devtools::build()
library(StreamData)
detach("package:StreamData", unload = TRUE)
install.packages("C:/Users/mikem/Documents/R Package Builds/StreamData_0.0.0.9203.tar.gz", repo = NULL, type = "source")
library(StreamData)
dat = getInvertData(
dataType = "occur",
taxonLevel = "Genus",
taxonFix = "lump",
program = "National Water Quality Assessment",
lifestage = FALSE,
abunMeasure = "density",
rarefy = TRUE,
NRSA = T,
seed = 4292021
)
library(tidyverse)
ps = colnames(dat)[(30+grep("\\.", colnames(dat)[31:980]))]
ps
str_count(ps, "\\.")
dbls <- (data.frame(names = unlist(str_split(ps, "\\."))) %>%
group_by(names) %>%
summarize(count = n()) %>%
filter(count > 1))$names
dbls
NAWQAsubset = TRUE
isTRUE(NAWQAsubset)
taxonLevel
TotalRows %>%
dplyr::select(tidyselect::all_of(taxonLevel))
unique(TotalRows %>%
dplyr::select(tidyselect::all_of(taxonLevel)))
NRSA_inverts %>%
filter(dplyr::vars(tidyselect::all_of(taxonLevel.nrsa)),
dplyr::any_vars(. %in% unique(TotalRows %>%
dplyr::select(tidyselect::all_of(taxonLevel)))
))
##Read in datasets directly from EPA website
NRSA_1819_inverts = read.csv("https://www.epa.gov/sites/production/files/2021-04/nrsa_1819_benthic_macroinvertebrate_count_-_data.csv",
colClasses = c("UID" = "character"),
stringsAsFactors = FALSE)
NRSA_1819_sites = read.csv("https://www.epa.gov/sites/production/files/2021-04/nrsa_1819_site_information_-_data.csv",
colClasses = c("UID" = "character"),
stringsAsFactors = FALSE)
NRSA_1314_inverts = read.csv("https://www.epa.gov/sites/production/files/2019-04/nrsa1314_bentcnts_04232019.csv",
colClasses = c("UID" = "character"),
stringsAsFactors = FALSE)
NRSA_1314_sites = read.csv("https://www.epa.gov/sites/production/files/2019-04/nrsa1314_siteinformation_wide_04292019.csv",
colClasses = c("UID" = "character",
"STATECTY" = "character"),
stringsAsFactors = FALSE)
NRSA_0809_inverts = read.csv("https://www.epa.gov/sites/production/files/2016-11/nrsa0809bentcts.csv",
colClasses = c("UID" = "character"),
stringsAsFactors = FALSE)
NRSA_0809_inverts_tax = read.csv("https://www.epa.gov/sites/production/files/2016-06/nrsa_0809_benttaxa.csv",
stringsAsFactors = FALSE)
NRSA_0809_sites = read.csv("https://www.epa.gov/sites/production/files/2015-09/siteinfo_0.csv",
colClasses = c("UID" = "character"),
stringsAsFactors = FALSE)
NRSA_0304_inverts = rbind(read.csv("https://www.epa.gov/sites/production/files/2014-10/wsa_bencnt_genus_ts_final_part1.csv",
stringsAsFactors = FALSE),
read.csv("https://www.epa.gov/sites/production/files/2014-10/wsa_bencnt_genus_ts_final_part2.csv",
stringsAsFactors = FALSE))
NRSA_0304_sites = read.csv("https://www.epa.gov/sites/production/files/2014-10/wsa_siteinfo_ts_final.csv",
stringsAsFactors = FALSE)
#############
##First step:
##Filter SAMPLE_TYPE to "BERW", "BERWW", or "REACHWIDE" in NRSA_inverts
sampletype = c("BERW", "BERWW", "REACHWIDE")
##2003/2004
NRSA_0304_inverts = NRSA_0304_inverts %>%
dplyr::filter(INDEX_SAMPTYPE %in% sampletype) %>%
dplyr::select(-DISTINCT, -HABIT, -PTV, -FLAG_PTV, -FFG)
##Replace NAs with "", which is consistent with the other NRSA datasets
NRSA_0304_inverts$GENUS = ifelse(is.na(NRSA_0304_inverts$GENUS),
"",
NRSA_0304_inverts$GENUS)
NRSA_0304_inverts$FAMILY = ifelse(is.na(NRSA_0304_inverts$FAMILY),
"",
NRSA_0304_inverts$FAMILY)
NRSA_0304_inverts$ORDER = ifelse(is.na(NRSA_0304_inverts$ORDER),
"",
NRSA_0304_inverts$ORDER)
NRSA_0304_inverts$CLASS = ifelse(is.na(NRSA_0304_inverts$CLASS),
"",
NRSA_0304_inverts$CLASS)
##Use the names directly in Genus, Family, Order, Class, or Phylum
##Some names don't match or are at the subfamily level, which doesn't exist for all
##Datasets
NRSA_0304_inverts$TARGET_TAXON <- ifelse(NRSA_0304_inverts$GENUS != "",
NRSA_0304_inverts$GENUS,
ifelse(NRSA_0304_inverts$FAMILY != "",
NRSA_0304_inverts$FAMILY,
ifelse(NRSA_0304_inverts$ORDER != "",
NRSA_0304_inverts$ORDER,
ifelse(NRSA_0304_inverts$CLASS != "",
NRSA_0304_inverts$CLASS,
NRSA_0304_inverts$PHYLUM
)
)
)
)
##Create UID based on WSA, Site_id, and Visit_no
NRSA_0304_inverts$UID <- paste("200304",
NRSA_0304_inverts$SITE_ID,
NRSA_0304_inverts$VISIT_NO,
sep = "_")
##Update column names to match those of 08/09 and 13/14
colnames(NRSA_0304_inverts)[c(4,10)] = c("SAMPLE_TYPE", "TOTAL")
##Rearrange columns to match those of 08/09 and 13/14
NRSA_0304_inverts <- NRSA_0304_inverts %>%
dplyr::relocate(any_of(c("UID", "SITE_ID", "YEAR", "VISIT_NO", "SAMPLE_TYPE",
"TARGET_TAXON", "TOTAL", "PHYLUM", "CLASS", "ORDER",
"FAMILY", "GENUS")))
##2008/2009
##Filter to BERW; remove columns that are not needed
NRSA_0809_inverts = NRSA_0809_inverts %>%
dplyr::filter(SAMPLE_TYPE %in% sampletype) %>%
dplyr::select(-IS_DISTINCT, -TOTAL300, -IS_DISTINCT300, -BENT_COM, -DATE_BENT,
-SAMPLE_CAT, -PUBLICATION_DATE) %>%
dplyr::mutate(YEAR = paste("20", stringr::str_sub(DATE_COL, -2,-1), sep = ""),
YEAR = as.numeric(YEAR)) %>%
dplyr::select(-DATE_COL)
##Join the count data to the taxa data to match those of 03/04
NRSA_0809_inverts<- NRSA_0809_inverts %>%
dplyr::left_join(NRSA_0809_inverts_tax %>%
dplyr::select(TAXA_ID, PHYLUM, CLASS, ORDER, FAMILY, GENUS),
by = "TAXA_ID")
##Update this weird TARGET_TAXON that is THIENEMANNIMYIA GENUS GR., but does not
##have a genus associated with it; so make genus = "THIENEMANNIMYIA"
NRSA_0809_inverts$GENUS = ifelse(grepl("GENUS", NRSA_0809_inverts$TARGET_TAXON),
"THIENEMANNIMYIA",
NRSA_0809_inverts$GENUS)
##Rearrange columns to match those of 08/09 and 13/14
NRSA_0809_inverts <- NRSA_0809_inverts %>%
dplyr::relocate(YEAR, .before = SAMPLE_TYPE) %>%
dplyr::select(-TAXA_ID)
##2013/2014
##Filter to BERW; remove columns that are not needed (taxonomic resolutions are
##not available in all datasets, so remove those that are not found across data)
NRSA_1314_inverts = NRSA_1314_inverts %>%
dplyr::filter(SAMPLE_TYPE %in% sampletype) %>%
dplyr::select(-IS_DISTINCT, -TOTAL300, -IS_DISTINCT300, -TOTAL300_OE,
-PUBLICATION_DATE, -TRIBE, -SUBFAMILY, -TAXA_ID)
##Update this weird TARGET_TAXON that is THIENEMANNIMYIA GENUS GR., but does not
##have a genus associated with it; so make genus = "THIENEMANNIMYIA"
NRSA_1314_inverts$GENUS = ifelse(grepl("GENUS", NRSA_1314_inverts$TARGET_TAXON),
"THIENEMANNIMYIA",
NRSA_1314_inverts$GENUS)
##2018/2019
##Filter to BERW; remove columns that are not needed (taxonomic resolutions are
##not available in all datasets, so remove those that are not found across data)
NRSA_1819_inverts <- NRSA_1819_inverts %>%
dplyr::filter(SAMPLE_TYPE %in% sampletype) %>%
dplyr::select(-IS_DISTINCT, -TOTAL300, -IS_DISTINCT300, -EPA_REG,
-PUBLICATION_DATE, -TRIBE, -SUBFAMILY, -TAXA_ID,
-FFG, -HABIT, -PTV, -AG_ECO9, -NON_TARGET, -SITESAMP,
-STATE, -UNIQUE_ID) %>%
dplyr::mutate(YEAR = str_sub(DATE_COL, -4,-1),
YEAR = as.numeric(YEAR)) %>%
dplyr::select(-DATE_COL) %>%
dplyr::relocate(colnames(NRSA_1314_inverts))
##Update this weird TARGET_TAXON that is THIENEMANNIMYIA GENUS GR., but does not
##have a genus associated with it; so make genus = "THIENEMANNIMYIA"
NRSA_1819_inverts$GENUS = ifelse(grepl("GENUS", NRSA_1819_inverts$TARGET_TAXON),
"THIENEMANNIMYIA",
NRSA_1819_inverts$GENUS)
##Bind all
NRSA_inverts <- dplyr::bind_rows(list(NRSA_0304_inverts, NRSA_0809_inverts,
NRSA_1314_inverts, NRSA_1819_inverts))
##Catch the "/" genus and make sure it is put in the GENUS column
NRSA_inverts <- NRSA_inverts %>%
mutate(GENUS = ifelse(grepl("/", TARGET_TAXON),
TARGET_TAXON,
GENUS))
##Convert Genera names from all caps to sentence case (GENUS to Genus)
NRSA_inverts$GENUS <- stringr::str_to_sentence(NRSA_inverts$GENUS)
##Fix issue w/ str_to_sentence that is causing Orthocladius to be lowercase
NRSA_inverts$GENUS <- ifelse(NRSA_inverts$GENUS == "Cricotopus/orthocladius",
"Cricotopus/Orthocladius",
NRSA_inverts$GENUS)
##Second step:
##Rarefy samples to 300 in the same manner as the NAQWA data for consistency
if(isTRUE(rarefy)) {
set.seed(seed)
NRSA_inverts <- NRSA_inverts %>%
##Create unique grouping based on UID, SITE_ID, YEAR, and VISIT_NO
##Group by this column
##Take the total individuals counted, remove those that are less than 300
tidyr::unite(Unique, c(UID, SITE_ID, YEAR, VISIT_NO), sep = "_", remove = F) %>%
dplyr::group_by(Unique) %>%
dplyr::mutate(indcounted = sum(TOTAL)) %>%
dplyr::filter(indcounted > 299) %>%
dplyr::select(-indcounted) %>%
dplyr::ungroup() %>%
##Again group by the unique sample column
##Replicate each unique sample and target taxon by the number of individuals
## found in the sample, then take 300 random individuals from these samples
dplyr::group_by(Unique, TARGET_TAXON) %>%
dplyr::slice(rep(1:dplyr::n(), times=TOTAL)) %>%
dplyr::ungroup() %>%
dplyr::group_by(Unique) %>%
dplyr::sample_n(size = 300) %>%
dplyr::group_by(Unique, TARGET_TAXON) %>%
dplyr::mutate(TOTAL = dplyr::n()) %>%
dplyr::slice(1) %>%
dplyr::ungroup() %>%
dplyr::select(-Unique)
} else {}
##Third step:
##FIX ALL TAXONOMIC ISSUES; only needed IF taxonLevel = "Genus"
##NEED TO UPDATE THIS FOR FAMILY
###NEED TO GET switch1to1 in StreamData env
##Convert those genera that need to be updated
NRSA_inverts$GENUS <- ifelse(NRSA_inverts$GENUS %in% StreamData:::.switch1to1$BenchGenus,
StreamData:::.switch1to1$Genus,
NRSA_inverts$GENUS)
#If genera that are one of genera in dat1, rename the Genus with the slash
#label from dat1, else, keep the original Genus label
NRSA_inverts$GENUS <- ifelse(NRSA_inverts$GENUS %in% dat1$Genus,
dat1$Slash[match(NRSA_inverts$GENUS,
dat1$Genus)],
NRSA_inverts$GENUS)
#If genera that are one of problem slash genera, rename the Genus with the lumped
#label from fix_slash, else, keep the original Genus label
NRSA_inverts$GENUS <- ifelse(NRSA_inverts$GENUS %in% fix_slash$Slash,
fix_slash$Fix[match(NRSA_inverts$GENUS,
fix_slash$Slash)],
NRSA_inverts$GENUS)
#If bench genera that are one of bench genera in clust_labels, rename the Genus with the lump label from clust_labels
#else, keep the original Genus label
NRSA_inverts$GENUS <- ifelse(NRSA_inverts$GENUS %in% slashlump$genus,
slashlump$lump[match(NRSA_inverts$GENUS,
slashlump$genus)],
NRSA_inverts$GENUS)
if(isTRUE(NAWQAsubset)){
} else {}
##When "taxonLevel" isn't in all caps (in the function), create a NRSA specific
##taxonLevel that is in all caps
taxonLevel.nrsa <- base::toupper(taxonLevel)
NRSA_inverts %>%
filter(dplyr::vars(tidyselect::all_of(taxonLevel.nrsa)),
dplyr::any_vars(. %in% unique(TotalRows %>%
dplyr::select(tidyselect::all_of(taxonLevel)))
))
unique(TotalRows %>%
dplyr::select(tidyselect::all_of(taxonLevel))
nique(TotalRows %>%
dplyr::select(tidyselect::all_of(taxonLevel)))
unique(TotalRows %>%
dplyr::select(tidyselect::all_of(taxonLevel)))
filter(dplyr::vars(tidyselect::all_of(taxonLevel.nrsa)),
dplyr::any_vars(. %in% unique(TotalRows %>%
dplyr::select(tidyselect::all_of(taxonLevel)))
))
NRSA_inverts %>%
dplyr::filter(dplyr::vars(tidyselect::all_of(taxonLevel.nrsa)),
dplyr::any_vars(. %in% unique(TotalRows %>%
dplyr::select(tidyselect::all_of(taxonLevel)))
))
NRSA_inverts %>%
dplyr::filter(dplyr::vars(tidyselect::all_of(taxonLevel.nrsa)),
dplyr::any_vars(. == ""))
taxonLevel.nrsa
NRSA_inverts
NRSA_inverts %>%
dplyr::filter(dplyr::vars(tidyselect::all_of(taxonLevel.nrsa)),
dplyr::vars(. == ""))
NRSA_inverts %>%
dplyr::filter(dplyr::vars(tidyselect::all_of(taxonLevel.nrsa)) %in%
nique(TotalRows %>%
dplyr::select(tidyselect::all_of(taxonLevel))))
NRSA_inverts %>%
dplyr::filter(dplyr::vars(tidyselect::all_of(taxonLevel.nrsa)) %in%
unique(TotalRows %>%
dplyr::select(tidyselect::all_of(taxonLevel))))
NRSA_inverts %>%
dplyr::filter(dplyr::vars(tidyselect::all_of(taxonLevel.nrsa)) %in% "")
NRSA_inverts %>%
dplyr::filter_at(dplyr::vars(tidyselect::all_of(taxonLevel.nrsa)),
dplyr::any_vars(. %in% unique(TotalRows %>%
dplyr::select(tidyselect::all_of(taxonLevel)))
))
NRSA_inverts %>%
dplyr::filter_at(dplyr::vars(tidyselect::all_of(taxonLevel.nrsa)),
dplyr::any_vars(. == "")
))
NRSA_inverts %>%
dplyr::filter_at(dplyr::vars(tidyselect::all_of(taxonLevel.nrsa)),
dplyr::any_vars(. == "")
)
NRSA_inverts %>%
dplyr::filter_at(dplyr::vars(tidyselect::all_of(taxonLevel.nrsa)),
dplyr::any_vars(. %in% unique(TotalRows %>%
dplyr::select(tidyselect::all_of(taxonLevel)))
))
?%in%
?in
?\%in%
NRSA_inverts$GENUS %in%   unique(TotalRows$Genus)
NRSA_inverts %>%
filter(GENUS %in% unique(TotalRows$Genus)               )
NRSA_inverts %>%
filter(tidyselect::all_of(taxonLevel.nrsa) %in% unique(TotalRows$Genus))
NRSA_inverts %>%
filter(tidyselect::all_of(taxonLevel.nrsa), ~ . %in% unique(TotalRows$Genus))
NRSA_inverts %>%
filter(tidyselect::all_of(taxonLevel.nrsa), . %in% unique(TotalRows$Genus))
NAWQAsubset
NRSA_inverts
NRSA_inverts %>%
filter(GENUS %in% unique(TotalRows$Genus))
NAWQAgenera <- unique(TotalRows$Genus)
NRSAgenera <- unique(NRSA_inverts$GENUS)
NAWQAgeneraONLY <- NAWQAgenera[!(NAWQAgenera %in% NRSAgenera)]
NAWQAgeneraONLY
NRSAgenera[!(NRSAgenera %in% NAWQAgenera)]
invert_comms1
#All species are one
invert_comms1 = TotalRows %>%
dplyr::filter(PublishedTaxonNameLevel %in% taxcols) %>%
dplyr::filter_at(dplyr::vars(tidyselect::all_of(taxonLevel)), dplyr::any_vars(. != "")) %>%
tidyr::unite(UNIQUEID, c(SIDNO, tidyselect::all_of(taxonLevel)), sep = "_", remove = FALSE) %>%
dplyr::group_by(UNIQUEID) %>%
dplyr::mutate(Abundance = sum(Abundance)) %>%
dplyr::slice(1) %>%
dplyr::ungroup() %>%
dplyr::mutate(Density_m2 = ifelse(is.na(AreaSampTot_m2),
NA,
Abundance / AreaSampTot_m2)) %>%
dplyr::select(-tidyselect::any_of(c("LabOrderID", "LabRecordID", "FieldComponent",
"LabComponent", "LabProcName",
"TaxonomicResultReviewStatus",
"PublishedSortOrder", "BioDataTaxonName", "BioDataShortName",
"BenchTaxonName", "BenchTaxonNameReferenceCode",
"AdjRawCount", "RawCount",
"FieldSplitRatio", "LabSubsamplingRatio", "UniqueTaxonFlag",
"TargetLevelNotReachedReason", "Artifact", "BenchNotes",
"TaxonRecordSource", "IdentificationDate",
"VerificationEntity", "VerificationDate", "CurationEntity",
"CurationDate", 'ITIS_TSN', "ITIS_MatchCode", "PublishedTaxonName",
"PublishedTaxonNameAuthority", "ScientificName",
"TaxonVersionNumber", "NWQLSubsamplingCode",
"Ratio", 'X', "NumbEntries", "SampleGrouping", "LabRecordIDs",
"Ratios", "Note", "Lifestage", "UNIQUEID", "PublishedTaxonNameLevel",
"SamplerType", "DatasetPortion", "TotAreaSampled_m2"))) %>%
dplyr::select(-tidyselect::any_of(mycols)) %>%
dplyr::select(-tidyselect::any_of(notAbun)) %>%
tidyr::pivot_wider(names_from = tidyselect::all_of(taxonLevel),
names_prefix = "tax_",
values_from = tidyselect::all_of(abunMeasure),
values_fill = 0)
invert_comms1 = invert_comms1 %>%
dplyr::select(-Identifier,
-SIDNO,
-ReleaseCategory) %>%
dplyr::relocate(tidyselect::any_of(StreamData:::.ReorderUSGSBioDataColNames))
invert_comms1
NAWQAgeneraONLY <- paste("tax_", NAWQAgenera[!(NAWQAgenera %in% NRSAgenera)])
NAWQAgeneraONLY
NAWQAgeneraONLY <- paste("tax_", NAWQAgenera[!(NAWQAgenera %in% NRSAgenera)], sep = "")
NAWQAgeneraONLY
invert_comms1 %>%
dplyr::select(-tidyselect::any_of(NAWQAgeneraONLY))
invert_comms1
devtools::document()
27+27+40
devtools::document()
devtools::build()
devtools::document()
devtools::build()
##Read in NLCD data from streamcat dataset from Ryan Hill
streamcat <- read.csv(base::system.file("extdata",
"streamcat-usgs-nawqa-join.csv",
package = "StreamData"))
base::system.file("extdata",
"streamcat-usgs-nawqa-join.csv",
package = "StreamData")
devtools::document()
devtools::build()
devtools::document()
devtools::build()
?getNLCDData
devtools::document()
?getNLCDData
?left_join
?select
?unite
?mutate
?filter
devtools::document()
?tidyr
?getNLCDData
data.frame(SiteNumber = "USGS-05276005",
CollectionYear = 2007)
data = data.frame(SiteNumber = "USGS-05276005", CollectionYear = 2007)
scale = "Cat"
group = T
##Read in NLCD data from streamcat dataset from Ryan Hill
streamcat <- read.csv(base::system.file("extdata",
"streamcat-usgs-nawqa-join.csv",
package = "StreamData"))
streamcat <- read.csv(base::system.file("extdata",
"streamcat-usgs-nawqa-join.csv",
package = "StreamData"))
?isTRUE
read.csv(base::system.file("extdata",
"streamcat-usgs-nawqa-join.csv",
package = "StreamData"))
devtools::document()
devtools::document()
