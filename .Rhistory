dplyr::mutate(Density = ifelse(is.na(AreaSampTot_m2),
NA,
Abundance / AreaSampTot_m2)) %>%
dplyr::select(-tidyselect::any_of(c("LabOrderID", "LabRecordID", "FieldComponent",
"LabComponent", "LabProcName",
"Density_m2",
"TaxonomicResultReviewStatus",
"PublishedSortOrder", "BioDataTaxonName", "BioDataShortName",
"BenchTaxonName", "BenchTaxonNameReferenceCode",
"AdjRawCount", "Abundance",
"UniqueTaxonFlag",
"TargetLevelNotReachedReason", "Artifact", "BenchNotes",
"TaxonRecordSource", "IdentificationDate",
"VerificationEntity", "VerificationDate", "CurationEntity",
"CurationDate", 'ITIS_TSN', "ITIS_MatchCode", "PublishedTaxonName",
"PublishedTaxonNameAuthority", "ScientificName",
"TaxonVersionNumber", "NWQLSubsamplingCode",
"Ratio", 'X', "NumbEntries", "SampleGrouping", "LabRecordIDs",
"Ratios", "Note", "Lifestage", "UNIQUEID", "PublishedTaxonNameLevel",
"SamplerType", "DatasetPortion", "TotAreaSampled_m2"))) %>%
dplyr::select(-tidyselect::any_of(mycols)) %>%
dplyr::select(-tidyselect::any_of(notMeasure)) %>%
tidyr::pivot_wider(names_from = tidyselect::all_of(taxonLevel),
names_prefix = "tax_",
values_from = tidyselect::all_of(abunMeasure),
values_fill = 0)
}
if(dataType == "abun"){
invert_comms1 = invert_comms1 %>%
dplyr::filter(!is.na(AreaSampTot_m2)) %>%
dplyr::filter(AreaSampTot_m2 != 0)
}
invert_comms1 = invert_comms1 %>%
dplyr::select(-Identifier,
-SIDNO,
-ReleaseCategory) %>%
dplyr::relocate(tidyselect::any_of(c(StreamData:::.ReorderUSGSBioDataColNames[-26],
"FieldSplitRatio", "LabSubsamplingRatio",
"PropID", "AreaSampTot_m2"))) %>%
dplyr::mutate(SiteNumber = paste("USGS-", SiteNumber, sep = ""))
if(any(grepl("EPA", agency))){
##Read in datasets directly from EPA website
NRSA_1819_inverts = read.csv("https://www.epa.gov/sites/production/files/2021-04/nrsa_1819_benthic_macroinvertebrate_count_-_data.csv",
colClasses = c("UID" = "character"),
stringsAsFactors = FALSE)
NRSA_1819_sites = read.csv("https://www.epa.gov/sites/production/files/2021-04/nrsa_1819_site_information_-_data.csv",
colClasses = c("UID" = "character"),
stringsAsFactors = FALSE)
NRSA_1314_inverts = read.csv("https://www.epa.gov/sites/production/files/2019-04/nrsa1314_bentcnts_04232019.csv",
colClasses = c("UID" = "character"),
stringsAsFactors = FALSE)
NRSA_1314_sites = read.csv("https://www.epa.gov/sites/production/files/2019-04/nrsa1314_siteinformation_wide_04292019.csv",
colClasses = c("UID" = "character",
"STATECTY" = "character"),
stringsAsFactors = FALSE)
NRSA_0809_inverts = read.csv("https://www.epa.gov/sites/production/files/2016-11/nrsa0809bentcts.csv",
colClasses = c("UID" = "character"),
stringsAsFactors = FALSE)
NRSA_0809_inverts_tax = read.csv("https://www.epa.gov/sites/production/files/2016-06/nrsa_0809_benttaxa.csv",
stringsAsFactors = FALSE)
NRSA_0809_sites = read.csv("https://www.epa.gov/sites/production/files/2015-09/siteinfo_0.csv",
colClasses = c("UID" = "character"),
stringsAsFactors = FALSE)
NRSA_0304_inverts = rbind(read.csv("https://www.epa.gov/sites/production/files/2014-10/wsa_bencnt_genus_ts_final_part1.csv",
stringsAsFactors = FALSE),
read.csv("https://www.epa.gov/sites/production/files/2014-10/wsa_bencnt_genus_ts_final_part2.csv",
stringsAsFactors = FALSE))
NRSA_0304_sites = read.csv("https://www.epa.gov/sites/production/files/2014-10/wsa_siteinfo_ts_final.csv",
stringsAsFactors = FALSE)
#############
##First step:
##Filter SAMPLE_TYPE to "BERW", "BERWW", or "REACHWIDE" in NRSA_inverts
sampletype = c("BERW", "BERWW", "REACHWIDE")
##2003/2004
NRSA_0304_inverts = NRSA_0304_inverts %>%
dplyr::filter(INDEX_SAMPTYPE %in% sampletype) %>%
dplyr::select(-DISTINCT, -HABIT, -PTV, -FLAG_PTV, -FFG)
##Replace NAs with "", which is consistent with the other NRSA datasets
NRSA_0304_inverts$GENUS = ifelse(is.na(NRSA_0304_inverts$GENUS),
"",
NRSA_0304_inverts$GENUS)
NRSA_0304_inverts$FAMILY = ifelse(is.na(NRSA_0304_inverts$FAMILY),
"",
NRSA_0304_inverts$FAMILY)
NRSA_0304_inverts$ORDER = ifelse(is.na(NRSA_0304_inverts$ORDER),
"",
NRSA_0304_inverts$ORDER)
NRSA_0304_inverts$CLASS = ifelse(is.na(NRSA_0304_inverts$CLASS),
"",
NRSA_0304_inverts$CLASS)
##Use the names directly in Genus, Family, Order, Class, or Phylum
##Some names don't match or are at the subfamily level, which doesn't exist for all
##Datasets
NRSA_0304_inverts$TARGET_TAXON <- ifelse(NRSA_0304_inverts$GENUS != "",
NRSA_0304_inverts$GENUS,
ifelse(NRSA_0304_inverts$FAMILY != "",
NRSA_0304_inverts$FAMILY,
ifelse(NRSA_0304_inverts$ORDER != "",
NRSA_0304_inverts$ORDER,
ifelse(NRSA_0304_inverts$CLASS != "",
NRSA_0304_inverts$CLASS,
NRSA_0304_inverts$PHYLUM
)
)
)
)
##Create UID based on WSA, Site_id, and Visit_no
NRSA_0304_inverts$UID <- paste("200304",
NRSA_0304_inverts$SITE_ID,
NRSA_0304_inverts$VISIT_NO,
sep = "_")
##Update column names to match those of 08/09 and 13/14
colnames(NRSA_0304_inverts)[c(4,10)] = c("SAMPLE_TYPE", "TOTAL")
##Rearrange columns to match those of 08/09 and 13/14
NRSA_0304_inverts <- NRSA_0304_inverts %>%
dplyr::relocate(any_of(c("UID", "SITE_ID", "YEAR", "VISIT_NO", "SAMPLE_TYPE",
"TARGET_TAXON", "TOTAL", "PHYLUM", "CLASS", "ORDER",
"FAMILY", "GENUS")))
##2008/2009
##Filter to BERW; remove columns that are not needed
NRSA_0809_inverts = NRSA_0809_inverts %>%
dplyr::filter(SAMPLE_TYPE %in% sampletype) %>%
dplyr::select(-IS_DISTINCT, -TOTAL300, -IS_DISTINCT300, -BENT_COM, -DATE_BENT,
-SAMPLE_CAT, -PUBLICATION_DATE) %>%
dplyr::mutate(YEAR = paste("20", stringr::str_sub(DATE_COL, -2,-1), sep = ""),
YEAR = as.numeric(YEAR)) %>%
dplyr::select(-DATE_COL)
##Join the count data to the taxa data to match those of 03/04
NRSA_0809_inverts<- NRSA_0809_inverts %>%
dplyr::left_join(NRSA_0809_inverts_tax %>%
dplyr::select(TAXA_ID, PHYLUM, CLASS, ORDER, FAMILY, GENUS),
by = "TAXA_ID")
##Update this weird TARGET_TAXON that is THIENEMANNIMYIA GENUS GR., but does not
##have a genus associated with it; so make genus = "THIENEMANNIMYIA"
NRSA_0809_inverts$GENUS = ifelse(grepl("GENUS", NRSA_0809_inverts$TARGET_TAXON),
"THIENEMANNIMYIA",
NRSA_0809_inverts$GENUS)
##Rearrange columns to match those of 08/09 and 13/14
NRSA_0809_inverts <- NRSA_0809_inverts %>%
dplyr::relocate(YEAR, .before = SAMPLE_TYPE) %>%
dplyr::select(-TAXA_ID)
##2013/2014
##Filter to BERW; remove columns that are not needed (taxonomic resolutions are
##not available in all datasets, so remove those that are not found across data)
NRSA_1314_inverts = NRSA_1314_inverts %>%
dplyr::filter(SAMPLE_TYPE %in% sampletype) %>%
dplyr::select(-IS_DISTINCT, -TOTAL300, -IS_DISTINCT300, -TOTAL300_OE,
-PUBLICATION_DATE, -TRIBE, -SUBFAMILY, -TAXA_ID)
##Update this weird TARGET_TAXON that is THIENEMANNIMYIA GENUS GR., but does not
##have a genus associated with it; so make genus = "THIENEMANNIMYIA"
NRSA_1314_inverts$GENUS = ifelse(grepl("GENUS", NRSA_1314_inverts$TARGET_TAXON),
"THIENEMANNIMYIA",
NRSA_1314_inverts$GENUS)
##2018/2019
##Filter to BERW; remove columns that are not needed (taxonomic resolutions are
##not available in all datasets, so remove those that are not found across data)
NRSA_1819_inverts <- NRSA_1819_inverts %>%
dplyr::filter(SAMPLE_TYPE %in% sampletype) %>%
dplyr::select(-IS_DISTINCT, -TOTAL300, -IS_DISTINCT300, -EPA_REG,
-PUBLICATION_DATE, -TRIBE, -SUBFAMILY, -TAXA_ID,
-FFG, -HABIT, -PTV, -AG_ECO9, -NON_TARGET, -SITESAMP,
-STATE, -UNIQUE_ID) %>%
dplyr::mutate(YEAR = str_sub(DATE_COL, -4,-1),
YEAR = as.numeric(YEAR)) %>%
dplyr::select(-DATE_COL) %>%
dplyr::relocate(colnames(NRSA_1314_inverts))
##Update this weird TARGET_TAXON that is THIENEMANNIMYIA GENUS GR., but does not
##have a genus associated with it; so make genus = "THIENEMANNIMYIA"
NRSA_1819_inverts$GENUS = ifelse(grepl("GENUS", NRSA_1819_inverts$TARGET_TAXON),
"THIENEMANNIMYIA",
NRSA_1819_inverts$GENUS)
##Bind all
NRSA_inverts <- dplyr::bind_rows(list(NRSA_0304_inverts, NRSA_0809_inverts,
NRSA_1314_inverts, NRSA_1819_inverts))
##Catch the "/" genus and make sure it is put in the GENUS column
NRSA_inverts <- NRSA_inverts %>%
mutate(GENUS = ifelse(grepl("/", TARGET_TAXON),
TARGET_TAXON,
GENUS))
##Convert Genera names from all caps to sentence case (GENUS to Genus)
NRSA_inverts$GENUS <- stringr::str_to_sentence(NRSA_inverts$GENUS)
##Fix issue w/ str_to_sentence that is causing Orthocladius to be lowercase
NRSA_inverts$GENUS <- ifelse(NRSA_inverts$GENUS == "Cricotopus/orthocladius",
"Cricotopus/Orthocladius",
NRSA_inverts$GENUS)
##Read in the density conversion dataset from the EPA
NRSADenconv <- utils::read.csv(base::system.file("extdata",
"EPA_DensityConv.csv",
package = "StreamData"),
colClasses = c("SITE_ID" = "character"),
stringsAsFactors = FALSE) %>%
dplyr::select(-ABUNDCNT, -TOTLDENS, -UNIQUE_ID)
##Pair down the EPA dataset to only those site-year-visit_no combinations
##that appear in the NRSA_inverts dataset
NRSADenconv <- NRSADenconv[which((paste(NRSADenconv$SITE_ID,
NRSADenconv$YEAR,
NRSADenconv$VISIT_NO,
sep = "_") %in%
paste(NRSA_inverts$SITE_ID,
NRSA_inverts$YEAR,
NRSA_inverts$VISIT_NO,
sep = "_"))),]
NRSA_inverts <- NRSA_inverts %>%
dplyr::left_join(NRSADenconv, by = c("SITE_ID", "YEAR", "VISIT_NO"))
##Incorporate abundance conversions here
if(dataType == "abun"){
##Join the datasets together; convert TOTAL to density, using the
##DenAbunRatio; multiple this by 10.76 to convert from ind ft^-2 to ind m^-2
##Remove the DenAbunRatio from the final dataset; and output
NRSA_inverts <- NRSA_inverts %>%
dplyr::mutate(TOTAL = round(((TOTAL / PCTCOUNT) / NUMTRANS) * 10.76, 4))
}
##Second step:
##Rarefy samples to 300 in the same manner as the NAQWA data for consistency
if(isTRUE(rarefy)) {
set.seed(seed)
NRSA_inverts <- NRSA_inverts %>%
##Create unique grouping based on UID, SITE_ID, YEAR, and VISIT_NO
##Group by this column
##Take the total individuals counted, remove those that are less than 300
tidyr::unite(Unique, c(UID, SITE_ID, YEAR, VISIT_NO), sep = "_", remove = F) %>%
dplyr::group_by(Unique) %>%
dplyr::mutate(indcounted = sum(TOTAL)) %>%
dplyr::filter(indcounted > 299) %>%
dplyr::select(-indcounted) %>%
dplyr::ungroup() %>%
##Again group by the unique sample column
##Replicate each unique sample and target taxon by the number of individuals
## found in the sample, then take 300 random individuals from these samples
dplyr::group_by(Unique, TARGET_TAXON) %>%
dplyr::slice(rep(1:dplyr::n(), times=TOTAL)) %>%
dplyr::ungroup() %>%
dplyr::group_by(Unique) %>%
dplyr::sample_n(size = 300) %>%
dplyr::group_by(Unique, TARGET_TAXON) %>%
dplyr::mutate(TOTAL = dplyr::n()) %>%
dplyr::slice(1) %>%
dplyr::ungroup() %>%
dplyr::select(-Unique)
} else {}
##Third step:
##FIX ALL TAXONOMIC ISSUES; only needed IF taxonLevel = "Genus"
##NEED TO UPDATE THIS FOR FAMILY
##Convert those genera that need to be updated
NRSA_inverts$GENUS <- ifelse(NRSA_inverts$GENUS %in% StreamData:::.switch1to1$BenchGenus,
StreamData:::.switch1to1$Genus,
NRSA_inverts$GENUS)
##This is the same code as the NAWQA taxonomy fix
if(taxonFix == "none"){
} else if(taxonFix == "lump"){
#If genera that are one of genera in dat1, rename the Genus with the slash
#label from dat1, else, keep the original Genus label
NRSA_inverts$GENUS <- ifelse(NRSA_inverts$GENUS %in% dat1$Genus,
dat1$Slash[match(NRSA_inverts$GENUS,
dat1$Genus)],
NRSA_inverts$GENUS)
#If genera that are one of problem slash genera, rename the Genus with the lumped
#label from fix_slash, else, keep the original Genus label
NRSA_inverts$GENUS <- ifelse(NRSA_inverts$GENUS %in% fix_slash$Slash,
fix_slash$Fix[match(NRSA_inverts$GENUS,
fix_slash$Slash)],
NRSA_inverts$GENUS)
#If bench genera that are one of bench genera in clust_labels, rename the Genus with the lump label from clust_labels
#else, keep the original Genus label
NRSA_inverts$GENUS <- ifelse(NRSA_inverts$GENUS %in% slashlump$genus,
slashlump$lump[match(NRSA_inverts$GENUS,
slashlump$genus)],
NRSA_inverts$GENUS)
}else if(taxonFix == "remove"){
#filter out rows that have bench genus from problem list & no species ID
NRSA_inverts <- NRSA_inverts %>%
dplyr::filter(!(GENUS %in% StreamData:::.clust_labels$genus)) %>%
dplyr::filter(!(grepl("/", GENUS)))
}
##When "taxonLevel" isn't in all caps (in the function), create a NRSA specific
##taxonLevel that is in all caps
taxonLevel.nrsa <- base::toupper(taxonLevel)
if(isTRUE(sharedTaxa)){
##List of NAWQA Genera
NAWQAgenera <- unique(TotalRows$Genus)
##List of NRSA Genera
NRSAgenera <- unique(NRSA_inverts$GENUS)
##Filter NRSA to only those genera in NAWQA
NRSA_inverts <- NRSA_inverts %>%
filter(GENUS %in% NAWQAgenera)
##Select only those taxa that appear in NAWQA
##add "tax_" prefix to the names, as this is how the genera names appear
##as columns in the NAWQA dataset
NAWQAgeneraONLY <- paste("tax_",
NAWQAgenera[!(NAWQAgenera %in% NRSAgenera)],
sep = "")
##Filter NAWQA to only those genera in NRSA (-select [delete] any that
##appear in columns in the invert_comms1 dataset)
invert_comms1 <- invert_comms1 %>%
dplyr::select(-tidyselect::any_of(NAWQAgeneraONLY))
} else {}
##Fourth step: (can get code from the getInvertData function)
## NOTE: this step is only needed when looking at taxonomic resolutions ABOVE genus
##Join all Target_taxon within each UID (sample)
##UPDATE THIS FOR NRSA_MYCOLS
mycols = c("TARGET_TAXON",
"PHYLUM",
"CLASS",
"ORDER",
"FAMILY")
nrsa_comms1 = NRSA_inverts %>%
dplyr::filter_at(dplyr::vars(tidyselect::all_of(taxonLevel.nrsa)), dplyr::any_vars(. != "")) %>%
tidyr::unite(UNIQUEID, c(UID, SITE_ID, YEAR, VISIT_NO, all_of(taxonLevel.nrsa)),
sep = "_", remove = FALSE) %>%
dplyr::group_by(UNIQUEID) %>%
dplyr::mutate(TOTAL = sum(TOTAL)) %>%
dplyr::slice(1) %>%
dplyr::ungroup() %>%
dplyr::select(-UNIQUEID) %>%
dplyr::select(-tidyselect::any_of(mycols)) %>%
tidyr::pivot_wider(names_from = tidyselect::all_of(taxonLevel.nrsa),
names_prefix = "tax_",
values_from = TOTAL,
values_fill = 0)
##Step 6: join w/ site level data
##18/19 - MISSING RT_NRSA, will put in ""
##UID, SITE_ID, VISIT_NO, SITETYPE, DATE_COL, PSTL_CODE, LAT_DD83, LON_DD83,
##AG_ECO9, URBN_NRS18, US_L3CODE, US_L3NAME
NRSA_1819_sites <- NRSA_1819_sites %>%
dplyr::select(UID, SITE_ID, VISIT_NO, SITETYPE, DATE_COL, PSTL_CODE,
LAT_DD83, LON_DD83, AG_ECO9, URBN_NRS18,
US_L3CODE, US_L3NAME) %>%
dplyr::mutate(RT_NRSA = "",
DATE_COL = as.Date(DATE_COL, format = "%m/%d/%Y"),
VISIT_NO = as.character(VISIT_NO),
MASTER_SITEID = SITE_ID) %>%
dplyr::relocate(RT_NRSA, .before = US_L3CODE) %>%
dplyr::relocate(MASTER_SITEID, .after = SITE_ID)
##13/14
##UID, SITE_ID, VISIT_NO, SITETYPE, DATE_COL, PSTL_CODE, LAT_DD83, LON_DD83,
##AG_ECO9, NRS13_Urban, RT_NRSA, US_L3CODE, US_L3NAME,
NRSA_1314_sites <- NRSA_1314_sites %>%
dplyr::select(UID, SITE_ID, VISIT_NO, SITETYPE, DATE_COL, PSTL_CODE,
LAT_DD83, LON_DD83, AG_ECO9, NRS13_URBN, RT_NRSA,
US_L3CODE, US_L3NAME) %>%
dplyr::mutate(RT_NRSA = ifelse(RT_NRSA == "?",
"",
RT_NRSA),
DATE_COL = as.Date(DATE_COL, format = "%m/%d/%Y"),
VISIT_NO = as.character(VISIT_NO),
MASTER_SITEID = SITE_ID) %>%
dplyr::relocate(MASTER_SITEID, .after = SITE_ID)
##08/09 - MISSING L3 NAME (not a problem)
##UID, SITE_ID, VISIT_NO, SITE_CLASS, DATE_COL, STATE, LAT_DD83, LONG_DD83,
##AGGR_ECO9_2015, URBAN, RT_NRSA, US_L3CODE_2015
NRSA_0809_sites <- NRSA_0809_sites %>%
dplyr::select(UID, SITE_ID, MASTER_SITEID, VISIT_NO, SITE_CLASS, DATE_COL, STATE,
LAT_DD83, LON_DD83, AGGR_ECO9_2015, URBAN, RT_NRSA,
US_L3CODE_2015) %>%
dplyr::mutate(RT_NRSA = ifelse(RT_NRSA == "R",
"R",
ifelse(RT_NRSA == "S",
"In",
ifelse(RT_NRSA == "T",
"Im",
"")))) %>%
dplyr::mutate(US_L3NAME = "",
DATE_COL = as.Date(DATE_COL, format = "%d-%b-%y"),
VISIT_NO = as.character(VISIT_NO))
##For some reason, one MASTER_SITEID is missing for one replicate sample, so give it the site id
NRSA_0809_sites$MASTER_SITEID[which(NRSA_0809_sites$SITE_ID == "FW08LA004")] = "FW08LA004"
##03/04 - MISSING UID (will create in the same way as above), URBAN
##SITE_ID, VISIT_NO, SITETYPE, DATE_COL, STATE, LAT_DD, LON_DD,
##ECOWSA9, RT_WSA, ECO3, ECO3_NM
NRSA_0304_sites <- NRSA_0304_sites %>%
dplyr::select(SITE_ID, VISIT_NO, SITETYPE, DATE_COL, STATE, LAT_DD, LON_DD,
ECOWSA9, RT_WSA, ECO3, ECO3_NM) %>%
dplyr::mutate(RT_WSA = ifelse(RT_WSA == "R",
"R",
ifelse(RT_WSA == "S",
"In",
ifelse(RT_WSA == "T",
"Im",
"")))) %>%
dplyr::mutate(URBAN = "",
UID = paste("200304", SITE_ID, VISIT_NO,
sep = "_"),
DATE_COL = as.Date(DATE_COL, format = "%m/%d/%Y"),
VISIT_NO = as.character(VISIT_NO),
MASTER_SITEID = SITE_ID) %>%
dplyr::relocate(UID, .before = SITE_ID) %>%
dplyr::relocate(URBAN, .before = RT_WSA) %>%
dplyr::relocate(MASTER_SITEID, .after = SITE_ID)
##Set all column names equal to each other
colnames(NRSA_0304_sites) =
colnames(NRSA_0809_sites) =
colnames(NRSA_1819_sites) =
colnames(NRSA_1314_sites)
NRSA_sites <-  dplyr::bind_rows(list(NRSA_1819_sites, NRSA_1314_sites,
NRSA_0809_sites, NRSA_0304_sites))
NRSA_sites$YEAR = lubridate::year(NRSA_sites$DATE_COL)
##Join with nrsa_comms1 to get site-level data
nrsa_comms1 = nrsa_comms1 %>%
tidyr::unite(UNIQUEID, c(UID, SITE_ID, YEAR, VISIT_NO),
sep = "_", remove = FALSE) %>%
dplyr::left_join(NRSA_sites %>%
tidyr::unite(UNIQUEID, c(UID, SITE_ID, YEAR, VISIT_NO),
sep = "_", remove = T), by = "UNIQUEID") %>%
dplyr::relocate(tidyselect::contains("tax_"), .after = last_col()) %>%
dplyr::mutate(ProjectLabel = ifelse(YEAR %in% c(2013, 2014),
"NRSA1314",
ifelse(YEAR %in% c(2008, 2009),
"NRSA0809",
ifelse(YEAR %in% c(2018, 2019),
"NRSA1819",
"WSA"))),
ProjectAssignedSampleLabel = UID,
NAWQA.SMCOD = UNIQUEID,
NAWQAStudyUnitCode = SITETYPE,
CollectionDate = DATE_COL,
StartTime = NA,
TimeDatum = NA,
CollectionYear = YEAR,
CollectionMonth = lubridate::month(DATE_COL),
CollectionDayOfYear = lubridate::yday(DATE_COL),
SiteVisitSampleNumber = VISIT_NO,
ProvisionalData = NA,
SiteNumber = MASTER_SITEID,
SiteName = MASTER_SITEID,
StateFIPSCode = NA,
CountyFIPSCode = NA,
Latitude_dd = LAT_DD83,
Longitude_dd = LON_DD83,
CoordinateDatum = "NAD83",
HUCCode = NA,
DrainageArea_mi2 = NA ,
SampleTypeCode = SAMPLE_TYPE,
IdentificationEntity = NA,
AreaSampTot_m2  = NA,
GeomorphicChannelUnit = NA,
ChannelBoundaries = NA,
ChannelFeatures = NA,
ReplicateType  = NA,
FieldSplitRatio = NA,
LabSubsamplingRatio = NA,
PropID = PCTCOUNT,
AreaSampTot_m2 = round(NUMTRANS / 10.76, 3)
) %>%
dplyr::select(-SAMPLE_TYPE, -LAT_DD83, -LON_DD83, -SITETYPE,
-SITE_ID, -MASTER_SITEID, -UID, -UNIQUEID, -DATE_COL,
-YEAR, -PSTL_CODE, -US_L3CODE, -US_L3NAME, -VISIT_NO,
-AG_ECO9, -NRS13_URBN, -RT_NRSA, -PCTCOUNT, -NUMTRANS) %>%
dplyr::relocate(tidyselect::contains("tax_"), .after = last_col())
##To make sure the NRSA sites are correct crosswalked across sampling rounds
# rename the nrsa_comms1$SiteNumber based on the master crosswalk list from
# Richard Mitchell (w/ updates to include MASTER_SITEID)
##if site number in nrsa_comms1 is in the SITEID in the master crosswalk list,
##match the numbers and pull the corresponding unique id, which is the crosswalked site id,
##else provide an NA
nrsa_comms1$UNIQUE_ID <- ifelse(nrsa_comms1$SiteNumber %in% StreamData:::.NRSA_siteIDs$SITE_ID,
StreamData:::.NRSA_siteIDs$UNIQUE_ID[match(nrsa_comms1$SiteNumber,
StreamData:::.NRSA_siteIDs$SITE_ID)],
NA)
##if site number in nrsa_comms1 is in the MASTER_SITEID in the master crosswalk list,
##match the numbers and pull the corresponding unique id, which is the crosswalked site id,
##else give the current UNIQUE ID
nrsa_comms1$UNIQUE_ID <- ifelse(nrsa_comms1$SiteNumber %in% StreamData:::.NRSA_siteIDs$MASTER_SITEID,
StreamData:::.NRSA_siteIDs$UNIQUE_ID[match(nrsa_comms1$SiteNumber,
StreamData:::.NRSA_siteIDs$MASTER_SITEID)],
nrsa_comms1$UNIQUE_ID)
##if there are any NA values in UNIQUE ID, replace these with the SiteNumber
nrsa_comms1$SiteNumber = ifelse(is.na(nrsa_comms1$UNIQUE_ID),
nrsa_comms1$SiteNumber,
nrsa_comms1$UNIQUE_ID)
##remove the UNIQUEID column, as it is no longer needed
nrsa_comms1 <- nrsa_comms1 %>%
select(-UNIQUE_ID)
##Need to then join this dataset to invert_comms1
invert_comms1[setdiff(names(nrsa_comms1), names(invert_comms1))] <- NA
nrsa_comms1[setdiff(names(invert_comms1), names(nrsa_comms1))] <- NA
##Add Agency columns
invert_comms1$Agency <- "USGS"
nrsa_comms1$Agency <- "EPA"
invert_comms1 <- invert_comms1  %>%
dplyr::relocate(tidyselect::contains("tax_"), .after = last_col())
nrsa_comms1 <- nrsa_comms1  %>%
dplyr::relocate(tidyselect::contains("tax_"), .after = last_col()) %>%
dplyr::relocate(tidyselect::any_of(colnames(invert_comms1)))
invert_comms1 <- dplyr::bind_rows(invert_comms1, nrsa_comms1)
invert_comms1 = invert_comms1 %>%
dplyr::mutate(dplyr::across(tidyselect::starts_with("tax_"),
~ifelse(is.na(.x),
0,
.x)))
} else{ }
if(dataType == "occur") {
invert_comms1 = invert_comms1 %>%
dplyr::mutate(dplyr::across(tidyselect::starts_with("tax_"),
~replace(., . > 0, 1)))
}
invert_comms1$CollectionDate = as.Date(invert_comms1$CollectionDayOfYear,
origin = paste(invert_comms1$CollectionYear-1,
'12-31',
sep = "-"))
##Remove the "tax_" prefix
colnames(invert_comms1) = sub("tax_", "", colnames(invert_comms1))
return(data.frame(invert_comms1))
}
datInv <- getInvertData(dataType = "abun",
taxonLevel = "Genus",
taxonFix = "lump",
agency = c("USGS", "EPA"),
lifestage = FALSE,
rarefy = FALSE,
sharedTaxa = TRUE,
seed = 0)
traceback()
