group_by(BenchTaxonName) %>%
slice(1) %>%
ungroup() %>%
dplyr::select(BenchTaxonName, PublishedTaxonNameLevel, PublishedTaxonName)
slashies_unique <- slashies_no_spp %>%
group_by(BenchTaxonName) %>%
slice(1) %>%
ungroup() %>%
dplyr::select(BenchTaxonName, PublishedTaxonNameLevel, PublishedTaxonName)
View(slashies_unique)
slashies_unique <- slashies_no_spp %>%
filter(!(grepl("idae", BenchTaxonName))) %>%
group_by(BenchTaxonName) %>%
slice(1) %>%
ungroup() %>%
dplyr::select(BenchTaxonName, PublishedTaxonNameLevel, PublishedTaxonName)
sub("\\/.*", "", slashies_unique$BenchTaxonName)
sub(".*\\/", "", slashies_unique$BenchTaxonName)
slashies_unique$BenchTaxonName
sub("\\/.*", "", slashies_unique$BenchTaxonName)
sub(".*\\/", "", slashies_unique$BenchTaxonName)
c(sub("\\/.*", "", slashies_unique$BenchTaxonName),
sub(".*\\/", "", slashies_unique$BenchTaxonName),
"Neocloeon")
slashedgen <- c(sub("\\/.*", "", slashies_unique$BenchTaxonName),
sub(".*\\/", "", slashies_unique$BenchTaxonName),
"Neocloeon")
slashedgen <- unique(c(sub("\\/.*", "", slashies_unique$BenchTaxonName),
sub(".*\\/", "", slashies_unique$BenchTaxonName),
"Neocloeon"))
slashedgen
Inverts <- utils::read.csv(base::unz(base::system.file("extdata",
"20201217.0749.InvertResults.zip",
package = "StreamData"),
"20201217.0749.InvertResults.csv"),
colClasses = c("SiteNumber" = "character"),
stringsAsFactors = FALSE)
if(colnames(Inverts)[1] != "SIDNO"){
colnames(Inverts)[1] = "SIDNO"
}
Inverts <- Inverts %>%
dplyr::filter(ProjectLabel %in% (Project %>%
dplyr::filter(Program %in% database) %>%
dplyr::distinct(ProjectLabel,
.keep_all = FALSE))[ , "ProjectLabel"])
SamplingRatio_SamplerType <- StreamData:::.SamplingRatio_SamplerType
Inverts <- dplyr::left_join(Inverts,
SamplingRatio_SamplerType,
by = "LabRecordID")
### Have to sum invertebrate abundance of duplicate species entries for
### all samplers
## Folsom samplers split the sample repeatedly, and count ***ALL*** individuals
## towards the abundance measures
## So, this first step in determining 'Abundance' is to sum (e.g., collapse) all
## entries for a given species at each collection site for a single
## 'Abundance' measure
## "IRTH" == "Invertebrate Richest Taxa Habitat" theoretically supports the faunistically
## richest invertebrate community and is typically represented by a
## coarse-grained riffle or a woody snag. The semi-quantitative RTH sample
## consists of a series of discrete collections (for example, five Slack
## samples or 10 woody snag sections) that are processed and combined
## into a single composited sample.
## 'FieldComponent' "M" refers to the "Main-body sample"
## Convert 'CollectionDate' to date format from factor
## Added in a distinct 'SIDNO' (sample number) x 'SiteNumber' x 'CollectionDate'
## identifier to each row, Easier to sort on this later
## Based on Devin Jones's notes, the biodata data dictionary, and my
## understanding of the datasets, I believe it is best to go with
## "PublishedTaxonName" as the basis for the "SampleGrouping".
Inverts <- Inverts %>%
dplyr::filter(SampleTypeCode %in% c("IRTH", "BERW")) %>%
dplyr::filter(FieldComponent == "M") %>%
dplyr::mutate(CollectionDate = as.Date(CollectionDate,
format = "%m/%d/%Y"),
Identifier = paste(SIDNO,
SiteNumber,
CollectionDate, sep = "_"),
SampleGrouping = paste(SIDNO,
SiteNumber,
CollectionDate,
PublishedTaxonName,
Lifestage,
sep = "_" ))
Inverts %>%
filter(Genus %in% slashedgen)
Inverts %>%
filter(Genus %in% slashedgen) %>%
group_by(Genus) %>%
summarize(count = n())
View(Inverts %>%
filter(Genus %in% slashedgen) %>%
group_by(Genus) %>%
summarize(count = n()))
View(Inverts %>%
filter(Genus %in% slashedgen) %>%
group_by(Genus) %>%
summarize(count = length(unique(SitenNumber))))
View(Inverts %>%
filter(Genus %in% slashedgen) %>%
group_by(Genus) %>%
summarize(count = length(unique(SiteNumber))))
View(Inverts %>%
filter(Genus %in% slashedgen) %>%
group_by(Family, Genus) %>%
summarize(count = length(unique(SiteNumber))))
slashies_unique$BenchTaxonName
slashedgen %in% Inverts$Genus
slashedgen[slashedgen %in% Inverts$Genus]
slashedgen[!(slashedgen %in% Inverts$Genus)]
StreamData:::.clust_labels
slashedgen %in% StreamData:::.clust_labels$genus
StreamData:::.clust_labels[slashedgen %in% StreamData:::.clust_labels$genus]
StreamData:::.clust_labels[slashedgen %in% StreamData:::.clust_labels$genus,]
StreamData:::.clust_labels[slashedgen %in% StreamData:::.clust_labels$genus,]$lump
View(slashies_unique$BenchTaxonName)
StreamData:::.clust_labels[match(StreamData:::.clust_labels$genus, slashedgen),]$lump
StreamData:::.clust_labels[match(slashedgen, StreamData:::.clust_labels$genus),]$lump
StreamData:::.clust_labels[match(slashedgen, StreamData:::.clust_labels$genus),]
StreamData:::.clust_labels[which(match(slashedgen, StreamData:::.clust_labels$genus)),]
StreamData:::.clust_labels[match(StreamData:::.clust_labels$genus, slashedgen)),]
StreamData:::.clust_labels[match(StreamData:::.clust_labels$genus, slashedgen),]
StreamData:::.clust_labels[StreamData:::.clust_labels$genus %in% slashedgen,]
StreamData:::.clust_labels[StreamData:::.clust_labels$genus %in% slashedgen,] %>%
filter(group != 1)
x[!(slashedgen %in% Inverts$Genus)]
slashedgen
slashies_unique$BenchTaxonName
View(slashies_unique$BenchTaxonName)
slashies_unique$BenchTaxonName
StreamData:::.clust_labels[StreamData:::.clust_labels$genus %in% slashedgen,] %>%
filter(group != 1)
slashies_unique$BenchTaxonName
unique(Inverts[grepl("/", Inverts$BenchTaxonName),]$BenchTaxonName)
slashgen <- unique(Inverts[grepl("/", Inverts$BenchTaxonName),]$BenchTaxonName)
slashgen
slashgen_no_spp <- slashgen[!(grepl(" ", slashgen))]
slashgen_no_spp
slashgen_fin <- slashgen_no_spp[!(grepl("idae", slashgen_no_spp))]
slashgen_fin
slashgen_fin
ifelse(Inverts$BenchTaxonName %in% slashgen_fin,
Inverts$BenchTaxonName,
Inverts$Genus)
##Generate a list of those individual genera that make up the slash genera
slashedgen <- unique(c(sub("\\/.*", "", slashgen_fin),
sub(".*\\/", "", slashgen_fin),
"Neocloeon"))
slashedgen
which(slashedgen %in% slashgen_fin)
slashedgen %in% slashgen_fin
grepl(slashedgen, slashgen_fin)
grepl(paste(slashedgen, collapse = "|"), slashgen_fin)
grep(paste(slashedgen, collapse = "|"), slashgen_fin)
slashedgen
slashgen_fin
grep(paste(slashedgen, collapse = "|"), slashgen_fin)
grepl(paste(slashedgen, collapse = "|"), slashgen_fin)
stringr::str_locate(slashgen_fin, slashedgen)
sjmisc::str_contains
cnt <- c()
for(i in slashedgen){
cnt <- c(cnt, grep(i, slashgen_fin, fixed = T))
}
cnt
slashgen_fin[cnt]
slashedgen
slashedgen
slashgen_fin[cnt]
i in slashedgen
for(i in slashedgen)
{}
grep(i, slashgen_fin, fixed = T)
i
data.frame(Genus = as.character(),
Group = as.character())
df1 <- data.frame(Genus = as.character(),
Group = as.character())
cnt()
cnt <- c()
length(cnt)
cnt <- grep(i, slashgen_fin, fixed = T)
length(cnt)
for(i in slashedgen){
cnt <- c(cnt, grep(i, slashgen_fin, fixed = T))
}
cnt
cnt = c()
for(i in slashedgen){
cnt <- c(cnt, grep(i, slashgen_fin, fixed = T))
}
slashgen_fin[cnt]
cntslsh <- slashgen_fin[cnt]
i = 1
grepl(cnt[i], cntslsh[i])
cntslsh
cnt
grepl(slashedgen[i], cntslsh[i])
slashedgen
i in slashedgen
for(i in slashedgen){
hldr <- grep(i, slashgen_fin, fixed = T)
cnt <- c(cnt, hldr)
}
i
cnt = c()
hldr = c()
gens = c()
for(i in slashedgen){
hldr <- grep(i, slashgen_fin, fixed = T)
cnt <- c(cnt, hldr)
gns = rep(slashedgen, times = length(hldr))
}
gns
cnt = c()
hldr = c()
gens = c()
for(i in slashedgen){
hldr <- grep(i, slashgen_fin, fixed = T)
cnt <- c(cnt, hldr)
gns = c(gns,rep(i, times = length(hldr)))
}
gns
cnt
gns
gens = c()
gns = c()
for(i in slashedgen){
hldr <- grep(i, slashgen_fin, fixed = T)
cnt <- c(cnt, hldr)
gns = c(gns, rep(i, times = length(hldr)))
}
gns
data.frame(Genus = gns,
Slash = slashgen_fin[cnt])
gns
cnt
cnt = c()
hldr = c()
gns = c()
for(i in slashedgen){
hldr <- grep(i, slashgen_fin, fixed = T)
cnt <- c(cnt, hldr)
gns = c(gns, rep(i, times = length(hldr)))
}
data.frame(Genus = gns,
Slash = slashgen_fin[cnt])
dat1 = data.frame(Genus = gns,
Slash = slashgen_fin[cnt])
dat1
order(slashedgen)
slashedgen[order(slashedgen)]
slashedgen <- slashedgen[order(slashedgen)]
for(i in slashedgen){
hldr <- grep(i, slashgen_fin, fixed = T)
cnt <- c(cnt, hldr)
gns = c(gns, rep(i, times = length(hldr)))
}
cnt = c()
hldr = c()
gns = c()
slashedgen <- slashedgen[order(slashedgen)]
for(i in slashedgen){
hldr <- grep(i, slashgen_fin, fixed = T)
cnt <- c(cnt, hldr)
gns = c(gns, rep(i, times = length(hldr)))
}
dat1 = data.frame(Genus = gns,
Slash = slashgen_fin[cnt])
dat1
StreamData:::.clust_labels[StreamData:::.clust_labels$genus %in% dat1$gns,] %>%
filter(group != 1)
StreamData:::.clust_labels[StreamData:::.clust_labels$genus %in% dat1$Genus,] %>%
filter(group != 1)
StreamData:::.clust_labels[StreamData:::.clust_labels$genus %in% dat1$Genus,]
StreamData:::.clust_labels[StreamData:::.clust_labels$genus %in% dat1$Genus,]$group
match(dat1$Genus, StreamData:::.clust_labels$genus)
StreamData:::.clust_labels[match(dat1$Genus, StreamData:::.clust_labels$genus)
StreamData:::.clust_labels[match(dat1$Genus, StreamData:::.clust_labels$genus),]
StreamData:::.clust_labels[StreamData:::.clust_labels$genus %in% dat1$Genus,]$group
StreamData:::.clust_labels[match(dat1$Genus, StreamData:::.clust_labels$genus),]$group
dat1$group <- StreamData:::.clust_labels[match(dat1$Genus, StreamData:::.clust_labels$genus),]$group
dat1
dat1 %>%
filter(!is.na(group))
StreamData:::.clust_labels[StreamData:::.clust_labels$genus %in% dat1$Genus,]
dat1 %>%
filter(!is.na(group)) %>%
group_by(Slash) %>%
slice(1)
dat1 %>%
filter(!is.na(group)) %>%
group_by(Slash) %>%
slice(1) %>%
dplyr::select(-Genus)
StreamData:::.clust_labels
str(dat1$group <- StreamData:::.clust_labels[match(dat1$Genus, StreamData:::.clust_labels$genus),]$group
dat1 %>%
filter(!is.na(group)) %>%
group_by(Slash) %>%
slice(1))
str(StreamData:::.clust_labels)
dplyr::select(X, num, group, genus)
dat1 %>%
filter(!is.na(group)) %>%
group_by(Slash) %>%
slice(1) %>%
mutate(X = 10.65,
num = 65,
genus = Slash) %>%
dplyr::select(X, num, group, genus)
dat1 %>%
filter(!is.na(group)) %>%
group_by(Slash) %>%
slice(1) %>%
mutate(X = 10.65,
num = 65,
genus = Slash) %>%
dplyr::select(X, num, group, genus, - Slash)
dat1 %>%
filter(!is.na(group)) %>%
group_by(Slash) %>%
slice(1) %>%
mutate(X = 10.65,
num = 65,
genus = Slash) %>%
dplyr::select(X, num, group, genus, -Slash)
dat1 %>%
filter(!is.na(group)) %>%
group_by(Slash) %>%
slice(1) %>%
mutate(X = 10.65,
num = 65,
genus = Slash) %>%
ungroup() %>%
dplyr::select(X, num, group, genus)
dat1L <- dat1 %>%
filter(!is.na(group)) %>%
group_by(Slash) %>%
slice(1) %>%
mutate(X = 10.65,
num = 65,
genus = Slash) %>%
ungroup() %>%
dplyr::select(X, num, group, genus)
dat1L$Lump = StreamData:::.clust_labels[match(dat1$group, StreamData:::.clust_labels$group),]$Lump
dat1L
dat1L$Lump = StreamData:::.clust_labels[match(dat1$group, StreamData:::.clust_labels$group),]$Lump
dat1L$Lump
dat1L$Lump <- StreamData:::.clust_labels[match(dat1L$group, StreamData:::.clust_labels$group),]$Lump
dat1L
dat1L$Lump
StreamData:::.clust_labels[match(dat1L$group, StreamData:::.clust_labels$group),]$Lump
StreamData:::.clust_labels
dat1L$lump <- StreamData:::.clust_labels[match(dat1L$group, StreamData:::.clust_labels$group),]$lump
dat1L$lump
bind_rows(list(StreamData:::.clust_labels, dat1L))
slashlump <- bind_rows(list(StreamData:::.clust_labels, dat1L))
slashlump
iNEXT::ChatInd
install.packages("iNEXT")
iNEXT:::ChatInd
iNEXT:::Chat.Ind
dat1
Inverts %>%
dplyr::mutate(Genus = ifelse(BenchTaxonName %in% slashgen_fin,
BenchTaxonName,
Genus)
)
Inverts <- Inverts %>%
dplyr::mutate(Genus = ifelse(BenchTaxonName %in% slashgen_fin,
BenchTaxonName,
Genus),
PublishedTaxonNameLevel = ifelse(BenchTaxonName %in% slashgen_fin,
"Genus",
PublishedTaxonNameLevel)
)
View(Inverts)
NRSA_inverts %>%
mutate(GENUS = ifelse(grepl("/", TARGET_TAXON),
TARGET_TAXON,
GENUS))
?bind_rows
?ungrou[p]
?ungroup
?slice
?mtuate
?mtuate
?mutate
slashgen_fin
dat1
##Fix all genera where single genera are found in multiple slash genera
##
dat1 %>%
group_by(Genus) %>%
mutate(count = n()) %>%
filter(count >1) %>%
dplyr::select(-count)
##Fix all genera where single genera are found in multiple slash genera
##
probslash <- dat1 %>%
group_by(Genus) %>%
mutate(count = n()) %>%
filter(count >1) %>%
dplyr::select(-count)
split(probslash, probslash$Genus)
##dat1 needs to be used before the normal lumping
slashedgen <- unique(c(sub("\\/.*", "", slashgen_fin),
sub(".*\\/", "", slashgen_fin),
"Neocloeon"))
slashedgen
probslashl
probslashl <- split(probslash, probslash$Genus)
probslashl
unique(c(sub("\\/.*", "", probslashl[[1]]),
sub(".*\\/", "", probslashl[[1]])))
unique(c(sub("\\/.*", "", probslashl[[1]]$Slash),
sub(".*\\/", "", probslashl[[1]]$Slash)))
sort(unique(c(sub("\\/.*", "", probslashl[[1]]$Slash),
sub(".*\\/", "", probslashl[[1]]$Slash))))
paste(sort(unique(c(sub("\\/.*", "", probslashl[[1]]$Slash),
sub(".*\\/", "", probslashl[[1]]$Slash)))), collapse = "/")
for(i in 1:length(probslash)){
paste(sort(unique(c(sub("\\/.*", "", probslashl[[i]]$Slash),
sub(".*\\/", "", probslashl[[i]]$Slash)))), collapse = "/")
}
probslashfix[i] <- paste(sort(unique(c(sub("\\/.*", "", probslashl[[i]]$Slash),
sub(".*\\/", "", probslashl[[i]]$Slash)))), collapse = "/")
probslashfix <- c()
for(i in 1:length(probslash)){
probslashfix[i] <- paste(sort(unique(c(sub("\\/.*", "", probslashl[[i]]$Slash),
sub(".*\\/", "", probslashl[[i]]$Slash)))), collapse = "/")
}
probslashfix
probslash
probslashfix <- c()
for(i in 1:length(probslashl)){
probslashfix[i] <- paste(sort(unique(c(sub("\\/.*", "", probslashl[[i]]$Slash),
sub(".*\\/", "", probslashl[[i]]$Slash)))), collapse = "/")
}
probslashfix
for(i in 1:length(probslashl)){
probslashl[[i]]$Fix <- paste(sort(unique(c(sub("\\/.*", "", probslashl[[i]]$Slash),
sub(".*\\/", "", probslashl[[i]]$Slash)))), collapse = "/")
}
probslashl
dplyr::bind_rows(probslashl)
dat1L
fix_slash
fix_slash <- dplyr::bind_rows(probslashl)
fix_slash
dat1L$genus <- ifelse(dat1L$genus %in% fix_slash$Slash,
fix_slash$Fix[match(dat1L$genus,
fix_slash$Slash)],
dat1L$genus)
dat1L
dat1L %>%
group_by(genus) %>%
slice(1)
fix_slash
devtools::document()
devtools::build()
devtools::document()
devtools::build()
library(StreamData)
detach("package:StreamData", unload = TRUE)
install.packages("C:/Users/mikem/Documents/R Package Builds/StreamData_0.0.0.9170.tar.gz", repos = NULL, type="source")
library(StreamData)
library(tidyverse)
dat = getInvertData(
dataType = "occur",
taxonLevel = "Genus",
taxonFix = "lump",
program = "National Water Quality Assessment",
lifestage = FALSE,
abunMeasure = "density",
rarefy = TRUE,
NRSA = T,
seed = 4292021
)
colnames(dat)[1:40]
colnames(dat)[-c(1:34)]
grep("ORTHOCLADIUS", colnames(dat)[-c(1:34)])
colnames(dat)[35+564]
colnames(dat)[34+564]
to_lower(colnames(dat)[34+564])
stringer::to_lower(colnames(dat)[34+564])
stringr::to_lower(colnames(dat)[34+564])
stringr::str_to_sentence(colnames(dat)[34+564])
stringr::str_to_sentence("Cricotopus/orthocladius")
stringr::str_to_sentence("Cricotopus/Orthocladius")
grep("Cricotopus", colnames(dat)[-c(1:34)])
colnames(dat)[34+33]
devtools::document()
devtools::build()
library(StreamData)
detach("package:StreamData", unload = TRUE)
install.packages("C:/Users/mikem/Documents/R Package Builds/StreamData_0.0.0.9200.tar.gz", repos = NULL, type = "source")
library(StreamData)
library(tidyverse)
dat = getInvertData(
dataType = "occur",
taxonLevel = "Genus",
taxonFix = "lump",
program = "National Water Quality Assessment",
lifestage = FALSE,
abunMeasure = "density",
rarefy = TRUE,
NRSA = T,
seed = 4292021
)
grep("Cricotopus", colnames(dat)[-c(1:34)])
grep("CRICOTOPUS", colnames(dat)[-c(1:34)])
