dplyr::mutate(CountyFIPSCode = sprintf("%03d", CountyFIPSCode),
StateFIPSCode = sprintf("%02d", StateFIPSCode))
algae = dplyr::left_join(algae, algsampinfo, by = "SIDNO")
devtools::document()
library(StreamData)
devtools::build_vignettes()
devtools::build()
install.packages("C:/Users/mikem/Documents/R Package Builds/StreamData_0.0.0.9000.tar.gz", repo = NULL, type = "source")
detach("package:StreamData", unload = TRUE)
install.packages("C:/Users/mikem/Documents/R Package Builds/StreamData_0.0.0.9000.tar.gz", repo = NULL, type = "source")
library(StreamData)
##Read in the StreamData R package
library(StreamData)
Inverts <- getInvertData(dataType = "abun",
taxonLevel = "Family",
program = "National Water Quality Assessment",
lifestage = FALSE,
abunMeasure = "density")
devtools::document()
devtools::document()
library(StreamData)
getInvertData(taxonLevel = "Family")
devtools::build_readme()
devtools::document()
devtools::document()
algae = utils::read.csv(unzip(system.file("extdata",
"AlgaeResults.zip",
package = "StreamData")),
colClasses = c("SiteNumber" = "character"))
View(algae)
unique(algae$ProjectLabel)
Project <- utils::read.csv(system.file("extdata",
"20201217.0757.Project.csv",
package = "StreamData"))
View(Project)
if(colnames(algae)[1] != "SIDNO"){
colnames(algae)[1] = "SIDNO"
}
grepl("RSQA", algae$ProjectLabel)
algae$RSQA = ifelse(grepl("RSQA", algae$ProjectLabel),
"RSQA",
"Non-RSQA")
algae$RSQA
algae %>%
group_by(SiteNumber) %>%
slice(1)
library(tidyverse)
algae %>%
group_by(SiteNumber) %>%
slice(1)
algae %>%
mutate(RSQA = ifelse(grepl("RSQA", algae$ProjectLabel),
"RSQA",
"Non-RSQA")) %>%
group_by(SiteNumber) %>%
slice(1)
algae = algae %>%
mutate(RSQA = ifelse(grepl("RSQA", algae$ProjectLabel),
"RSQA",
"Non-RSQA")) %>%
group_by(SiteNumber) %>%
slice(1)
algae = utils::read.csv(unzip(system.file("extdata",
"AlgaeResults.zip",
package = "StreamData")),
colClasses = c("SiteNumber" = "character"))
if(colnames(algae)[1] != "SIDNO"){
colnames(algae)[1] = "SIDNO"
}
algae = algae %>%
mutate(RSQA = ifelse(grepl("RSQA", algae$ProjectLabel),
"RSQA",
"Non-RSQA")) %>%
group_by(SiteNumber) %>%
slice(1)
algaesites = read.csv("C:/Users/mikem/Documents/Research/USGS Stream Macros/Algae/20201217.0757.SiteInfo.csv",
colClasses = c("SiteNumber" = "character"))
algaesites
colnames(algaesites)
colnames(algae)
algae = algae %>%
mutate(RSQA = ifelse(grepl("RSQA", algae$ProjectLabel),
"RSQA",
"Non-RSQA")) %>%
group_by(SiteNumber) %>%
slice(1) %>%
dplyr::select(SiteNumber, RSQA)
algae = utils::read.csv(unzip(system.file("extdata",
"AlgaeResults.zip",
package = "StreamData")),
colClasses = c("SiteNumber" = "character"))
if(colnames(algae)[1] != "SIDNO"){
colnames(algae)[1] = "SIDNO"
}
algae = algae %>%
mutate(RSQA = ifelse(grepl("RSQA", algae$ProjectLabel),
"RSQA",
"Non-RSQA")) %>%
group_by(SiteNumber) %>%
slice(1) %>%
dplyr::select(SiteNumber, RSQA)
algae = utils::read.csv(unzip(system.file("extdata",
"AlgaeResults.zip",
package = "StreamData")),
colClasses = c("SiteNumber" = "character"))
if(colnames(algae)[1] != "SIDNO"){
colnames(algae)[1] = "SIDNO"
}
algae = algae %>%
mutate(RSQA = ifelse(grepl("RSQA", ProjectLabel),
"RSQA",
"Non-RSQA")) %>%
group_by(SiteNumber) %>%
slice(1) %>%
dplyr::select(SiteNumber, RSQA)
algae
algaesites = read.csv("C:/Users/mikem/Documents/Research/USGS Stream Macros/Algae/20201217.0757.SiteInfo.csv",
colClasses = c("SiteNumber" = "character"))
algaesites = algaesites %>%
dplyr::select(SiteNumber, Latitude_dd, Longitude_dd, CoordinateDatum)
algae = algae %>%
mutate(RSQA = ifelse(grepl("RSQA", ProjectLabel),
"RSQA",
"Non-RSQA")) %>%
group_by(SiteNumber) %>%
slice(1) %>%
dplyr::select(SiteNumber, RSQA) %>%
group_by(RSQA) %>%
summarize(count = n())
algae %>%
group_by(RSQA) %>%
summarize(count = n())
fish <- utils::read.csv(unzip(system.file("extdata",
"FishResults.zip",
package = "StreamData")),
colClasses = c("SiteNumber" = "character"))
if(colnames(fish)[1] != "SIDNO"){
colnames(fish)[1] = "SIDNO"
}
fish = fish %>%
mutate(RSQA = ifelse(grepl("RSQA", ProjectLabel),
"RSQA",
"Non-RSQA")) %>%
group_by(SiteNumber) %>%
slice(1) %>%
dplyr::select(SiteNumber, RSQA)
fish
fish %>%
group_by(RSQA) %>%
summarize(count = n())
Inverts <- utils::read.csv(unzip(system.file("extdata",
"InvertResults.zip",
package = "StreamData")),
colClasses = c("SiteNumber" = "character"))
if(colnames(Inverts)[1] != "SIDNO"){
colnames(Inverts)[1] = "SIDNO"
}
Inverts = Inverts %>%
mutate(RSQA = ifelse(grepl("RSQA", ProjectLabel),
"RSQA",
"Non-RSQA")) %>%
group_by(SiteNumber) %>%
slice(1) %>%
dplyr::select(SiteNumber, RSQA)
Inverts %>%
group_by(RSQA) %>%
summarize(count = n())
do.call(bind_rows(), Algae, Fish, Inverts)
do.call(bind_rows(), list(Algae, Fish, Inverts))
do.call(bind_rows(), list(algae, Fish, Inverts))
do.call(bind_rows(), list(algae, fish, Inverts))
list(algae, fish, Inverts)
do.call(bind_rows, list(algae, fish, Inverts))
allsites = do.call(bind_rows, list(algae, fish, Inverts))
allsites %>%
group_by(SiteNumber) %>%
slice() %>%
ungroup() %>%
group_by(RSQA) %>%
summarize(count = n())
732 / (732+5658)
allsites %>%
group_by(SiteNumber) %>%
slice(1) %>%
ungroup() %>%
group_by(RSQA) %>%
summarize(count = n())
402 / (402+2639)
Inverts <- utils::read.csv(unzip(system.file("extdata",
"InvertResults.zip",
package = "StreamData")),
colClasses = c("SiteNumber" = "character"))
if(colnames(Inverts)[1] != "SIDNO"){
colnames(Inverts)[1] = "SIDNO"
}
Project <- utils::read.csv(system.file("extdata",
"20201217.0749.Project.csv",
package = "StreamData"),
comment.char="#")
if(program == "ALL") {
database <- c("National Water Quality Assessment",
"Cooperative Water Program",
"Collection of Basic Records",
"Other Federal Agencies")
} else {database <- program }
program = "National Water Quality Assessment"
Project <- utils::read.csv(system.file("extdata",
"20201217.0749.Project.csv",
package = "StreamData"),
comment.char="#")
if(program == "ALL") {
database <- c("National Water Quality Assessment",
"Cooperative Water Program",
"Collection of Basic Records",
"Other Federal Agencies")
} else {database <- program }
Inverts <- Inverts %>%
dplyr::filter(ProjectLabel %in% (Project %>%
dplyr::filter(Program %in% database) %>%
dplyr::distinct(ProjectLabel,
.keep_all = FALSE))[ , "ProjectLabel"])
Inverts <- Inverts %>%
dplyr::filter(ProjectLabel %in% (Project %>%
dplyr::filter(Program %in% database) %>%
dplyr::distinct(ProjectLabel,
.keep_all = FALSE))[ , "ProjectLabel"])
library(tidyverse)
Inverts <- Inverts %>%
dplyr::filter(ProjectLabel %in% (Project %>%
dplyr::filter(Program %in% database) %>%
dplyr::distinct(ProjectLabel,
.keep_all = FALSE))[ , "ProjectLabel"])
SamplingRatio_SamplerType <- StreamData:::.SamplingRatio_SamplerType
Inverts <- dplyr::left_join(Inverts,
SamplingRatio_SamplerType,
by = "LabRecordID")
Inverts <- Inverts %>%
dplyr::filter(SampleTypeCode %in% c("IRTH", "BERW")) %>%
dplyr::filter(FieldComponent == "M") %>%
dplyr::mutate(CollectionDate = as.Date(CollectionDate,
format = "%m/%d/%Y"),
Identifier = paste(SIDNO,
SiteNumber,
CollectionDate, sep = "_"),
SampleGrouping = paste(SIDNO,
SiteNumber,
CollectionDate,
PublishedTaxonName,
Lifestage,
sep = "_" ))
## We now have to clean the data for sites that used a Folsom Sampler that
## identified invertebrates with multiple 'LabSubsamplingRatio'
### IF n_distinct(LabSubsamplingRatio) == 1, then the sample was either fully
### counted or only the subsample was entered (WHICH IS WHAT WE WANT)
### IF n_distinct(LabSubsamplingRatio) >= 2, then the sample was split multiple
### times (FS), or includes "lab large rare" individuals (e.g., species entry
### will include 1:1 and other subsampled ratio) on a Gridded tray
## So we first filter all sites for those with >= 2 'LabSubsamplingRatio'
Invert_MixedRatios <- Inverts %>%
dplyr::group_by(Identifier) %>%
dplyr::filter(n_distinct(LabSubsamplingRatio) >= 2) %>%
dplyr::ungroup()
Invert_SingleRatios <- suppressMessages({dplyr::anti_join(Inverts, Invert_MixedRatios) %>%
dplyr::mutate(DatasetPortion = "SingleRatios")})
SingleRatio_Duplicates <-
Invert_SingleRatios[duplicated(Invert_SingleRatios$SampleGrouping) |
duplicated(Invert_SingleRatios$SampleGrouping,
fromLast = TRUE), ] %>%
dplyr::group_by(SampleGrouping) %>%
dplyr::mutate(LabRecordIDs = paste(LabRecordID, collapse = "_"),
Ratios = paste(Ratio, collapse = "_")) %>%
dplyr::ungroup()
SumSingleRatioData = suppressWarnings({SingleRatio_Duplicates %>%
dplyr::group_by(SampleGrouping) %>%
dplyr::mutate(SummedAbundance = sum(Abundance)) %>%
dplyr::ungroup() %>%
dplyr::group_by(SampleGrouping) %>%
dplyr::slice(1) %>%
dplyr::ungroup() %>%
dplyr::mutate(Abundance = SummedAbundance,
Density_m2 = as.numeric("NA"),
AdjRawCount = as.numeric("NA"),
RawCount = as.numeric("NA"),
TotAreaSampled_m2 = as.numeric("NA"),
FieldSplitRatio = as.numeric("NA"),
Note = "Abundance measure is summed 'Abundance' across multiple inputs
(see 'LabRecordsIDs'); Likely due to changed identification
(e.g., BenchNotes)",
DatasetPortion = "SummedAbundance_SingleRatios") %>%
dplyr::select(-SummedAbundance)})
Corrected_SingleRatios <- suppressMessages({dplyr::bind_rows((dplyr::anti_join(Invert_SingleRatios,
SingleRatio_Duplicates) %>%
dplyr::mutate(DatasetPortion =
"NonDuplicate_SingleRatio")),
SumSingleRatioData)})
Invert_MixedRatios_GridsAndFS <- Invert_MixedRatios %>%
dplyr::group_by(Identifier) %>%
dplyr::filter(dplyr::n_distinct(SamplerType) == 2) %>%
dplyr::ungroup()
Invert_MixedSamplerType_GridOnly_LLRRemoved <- Invert_MixedRatios_GridsAndFS %>%
dplyr::group_by(Identifier) %>%
dplyr::filter(SamplerType == "Grid") %>%
dplyr::ungroup() %>%
dplyr::mutate(DatasetPortion = "Grid_LRRRemoved")
## Now that we have all the gridded portion of samples
## we can check the subsampled gridded samples for any duplicates
Gridded_LLRRemoved_Duplicates <-
Invert_MixedSamplerType_GridOnly_LLRRemoved[
duplicated(Invert_MixedSamplerType_GridOnly_LLRRemoved$SampleGrouping) |
duplicated(Invert_MixedSamplerType_GridOnly_LLRRemoved$SampleGrouping,
fromLast = TRUE), ]
SumGridLLRData <- Gridded_LLRRemoved_Duplicates %>%
dplyr::group_by(SampleGrouping) %>%
dplyr::mutate(LabRecordIDs = paste(LabRecordID, collapse = "_"),
Ratios = paste(Ratio, collapse = "_")) %>%
dplyr::ungroup() %>%
dplyr::mutate(DatasetPortion = "Gridded_LLRRemoved_Duplicates")
SumGridLLRData2 = suppressWarnings({SumGridLLRData %>%
dplyr::select(-"LabRecordID", -"NWQLSubsamplingCode", -"Ratio",
-"X", -"NumbEntries") %>%
dplyr::group_by(SampleGrouping) %>%
dplyr::mutate(SummedAbundance = sum(Abundance)) %>%
dplyr::ungroup() %>%
dplyr::group_by(SampleGrouping) %>%
dplyr::slice(1) %>%
dplyr::ungroup() %>%
dplyr::mutate(Abundance = SummedAbundance,
Density_m2 = as.numeric("NA"),
AdjRawCount = as.numeric("NA"),
RawCount = as.numeric("NA"),
TotAreaSampled_m2 = as.numeric("NA"),
FieldSplitRatio = as.numeric("NA"),
Note = "Abundance measure is summed 'Abundance' across multiple inputs
(see 'LabRecordsIDs'); Likely due to changed identification
(e.g., BenchNotes)",
DatasetPortion = "SummedAbundance_Gridded_LLRRemoved") %>%
dplyr::select(-SummedAbundance)})
## Now that we have the corrected summed values for the
## 'Gridded_LLRRemoved_Duplicates', we need to add these rows to the
## non-duplicated rows within the 'SingleRatio' portions
Corrected_Gridded_LLRRemoved <- suppressMessages({dplyr::bind_rows(
(dplyr::anti_join(Invert_MixedSamplerType_GridOnly_LLRRemoved,
Gridded_LLRRemoved_Duplicates) %>%
dplyr::mutate(DatasetPortion =
"NonDuplicate_Gridded_LLRRemoved")),
SumGridLLRData2)})
Invert_MixedRatios_FolsomSamplerOnly_AntiJoin <- suppressMessages({Inverts %>%
dplyr::group_by(SIDNO, SiteNumber, CollectionDate) %>%
dplyr::filter(n_distinct(LabSubsamplingRatio) >= 2) %>%
dplyr::anti_join(Invert_MixedRatios_GridsAndFS)})
## Now we can reduce the dataset to duplicate entries
## We will include both "from the first duplicate" and
## "from the last duplicate" to bookend each duplicate entry
Invert_MixedRatios_Folsom_AntiJoin_Duplicates <-
Invert_MixedRatios_FolsomSamplerOnly_AntiJoin[
duplicated(Invert_MixedRatios_FolsomSamplerOnly_AntiJoin$SampleGrouping)|
duplicated(Invert_MixedRatios_FolsomSamplerOnly_AntiJoin$SampleGrouping,
fromLast = TRUE), ]
Invert_MixedRatios_Folsom_AntiJoin_Duplicates <-
Invert_MixedRatios_Folsom_AntiJoin_Duplicates  %>%
dplyr::group_by(SampleGrouping) %>%
dplyr::mutate(LabRecordIDs = paste(LabRecordID, collapse = "_"),
Ratios = paste(Ratio, collapse = "_")) %>%
dplyr::ungroup()
SumData <- suppressWarnings({Invert_MixedRatios_Folsom_AntiJoin_Duplicates %>%
dplyr::select(-"LabRecordID", -"NWQLSubsamplingCode", -"Ratio",
-"X", -"NumbEntries") %>%
dplyr::group_by(SampleGrouping) %>%
dplyr::mutate(SummedAbundance = sum(Abundance)) %>%
dplyr::ungroup() %>%
dplyr::group_by(SampleGrouping) %>%
dplyr::slice(1) %>%
dplyr::ungroup() %>%
dplyr::mutate(Abundance = SummedAbundance,
Density_m2 = as.numeric("NA"),
AdjRawCount = as.numeric("NA"),
RawCount = as.numeric("NA"),
TotAreaSampled_m2 = as.numeric("NA"),
FieldSplitRatio = as.numeric("NA"),
Note = "Abundance measure is summed 'Abundance' across multiple
folsom sampler inputs (see 'LabRecordsIDs')",
DatasetPortion = "SummedAbundance_FolsomSampler") %>%
dplyr::select(-SummedAbundance)})
Corrected_MixedRatios_FolsomSamplerOnly <- suppressMessages({dplyr::bind_rows((
dplyr::anti_join(Invert_MixedRatios_FolsomSamplerOnly_AntiJoin,
Invert_MixedRatios_Folsom_AntiJoin_Duplicates,
by = "SampleGrouping") %>%
dplyr::mutate(DatasetPortion = "NonDuplicate_FolsomSampler")),
SumData)})
TotalRows <- do.call(dplyr::bind_rows,list(Corrected_MixedRatios_FolsomSamplerOnly,
Corrected_Gridded_LLRRemoved,
Corrected_SingleRatios))
invertsamp = utils::read.csv(system.file("extdata",
"20201217.0749.InvertSamp.csv",
package = "StreamData"),
colClasses = c("SiteNumber" = "character")) %>%
dplyr::rename(SIDNO = grep("SIDNO", names(.))) %>%
dplyr::select(SIDNO,
SiteNumber,
AreaSampTot_m2,
GeomorphicChannelUnit,
ChannelBoundaries,
ChannelFeatures)
invertsampinv = utils::read.csv(system.file("extdata",
"20201217.0749.SampleInv.csv",
package = "StreamData"),
colClasses = c("SiteNumber" = "character")) %>%
dplyr::rename(SIDNO = grep("SIDNO", names(.))) %>%
dplyr::select(SIDNO,
ReplicateType)
invertsite = utils::read.csv(system.file("extdata",
"20201217.0749.SiteInfo.csv",
package = "StreamData"),
colClasses = c("SiteNumber" = "character")) %>%
dplyr::select(SiteNumber,
Latitude_dd,
Longitude_dd,
CoordinateDatum,
HUCCode,
DrainageArea_mi2,
SiteTypeName,
CountyFIPSCode,
StateFIPSCode)
invertsampinfo = dplyr::left_join(dplyr::left_join(invertsamp,
invertsampinv,
by = "SIDNO"),
invertsite,
by = "SiteNumber") %>%
dplyr::select(-SiteNumber) %>%
dplyr::mutate(CountyFIPSCode = sprintf("%03d", CountyFIPSCode),
StateFIPSCode = sprintf("%02d", StateFIPSCode))
TotalRows = dplyr::left_join(TotalRows,
invertsampinfo,
by = "SIDNO")
if(abunMeasure == "abundance"){
abunMeasure = "Abundance"
notAbun <- "Density_m2"
} else {
notAbun <- "Abundance"
abunMeasure <- "Density_m2"}
abunMeasure == "abundance"
abunMeasure = "abundance"
if(abunMeasure == "abundance"){
abunMeasure = "Abundance"
notAbun <- "Density_m2"
} else {
notAbun <- "Abundance"
abunMeasure <- "Density_m2"}
mycols = StreamData:::.TaxLevCols_Inverts[[which(names(StreamData:::.TaxLevCols_Inverts) == taxonLevel)]]$mycols
if(abunMeasure == "abundance"){
abunMeasure = "Abundance"
notAbun <- "Density_m2"
} else {
notAbun <- "Abundance"
abunMeasure <- "Density_m2"}
mycols = StreamData:::.TaxLevCols_Inverts[[which(names(StreamData:::.TaxLevCols_Inverts) == taxonLevel)]]$mycols
taxonLevel = "genus"
mycols = StreamData:::.TaxLevCols_Inverts[[which(names(StreamData:::.TaxLevCols_Inverts) == taxonLevel)]]$mycols
taxonLevel = "Genus"
mycols = StreamData:::.TaxLevCols_Inverts[[which(names(StreamData:::.TaxLevCols_Inverts) == taxonLevel)]]$mycols
taxcols = StreamData:::.TaxLevCols_Inverts[[which(names(StreamData:::.TaxLevCols_Inverts) == taxonLevel)]]$taxcols
View(TotalRows)
getwd()
#call in external dataset with genera-lump info
read.csv("/Users/samantharumschlag/Documents/PowellCenter/Code/MahonRumschlagPowell/clust_labels.csv",header=T)
#call in external dataset with genera-lump info
clust_labels = read.csv("/Users/samantharumschlag/Documents/PowellCenter/Code/MahonRumschlagPowell/clust_labels.csv",header=T)
#create bench genus in TotalRows
TotalRows <- TotalRows %>%
mutate(BenchGenus = gsub( " .*$", "", gen_taxnames$BenchTaxonName ))
#create bench genus in TotalRows
TotalRows <- TotalRows %>%
mutate(BenchGenus = gsub( " .*$", "", TotalRows$BenchTaxonName ))
TotalRows <- TotalRows %>%
mutate(BenchGenus = gsub( " .*$", "", TotalRows$BenchTaxonName ))
TotalRows <- TotalRows %>%
mutate(BenchGenus = gsub( " .*$", "", TotalRows$BenchTaxonName ))
?mutate
TotalRows <- TotalRows %>%
dplyr::mutate(BenchGenus = gsub( " .*$", "", TotalRows$BenchTaxonName ))
?gsub
#create bench genus in TotalRows
TotalRows <- TotalRows %>%
dplyr::mutate(BenchGenus = gsub( " .*$", "", BenchTaxonName ))
View(clust_labels)
#for bench genera that are one of bench genera in TotalRows, rename - IS THE BEST WAY TO DO THIS WITH ifelse()?
#WHAT DOES taxonLevel call? Genus? If so, we should be changing Genus column
TotalRows$Genus2 <- ifelse(TotalRows$BenchGenus %in% clust_labels$genus, clust_labels$lump, TotalRows$Genus)
View(TotalRows)
check <- data.frame(TotalRows$BenchGenus, TotalRows$Genus, TotalRows$Genus2)
View(check)
str(clust_labels)
#call in external dataset with genera-lump info
clust_labels = read.csv("/Users/samantharumschlag/Documents/PowellCenter/Code/MahonRumschlagPowell/clust_labels.csv",
header=T, stringsAsFactors = FALSE)
TotalRows$BenchTaxonName
str(TotalRows$BenchTaxonName)
#for bench genera that are one of bench genera in TotalRows, rename - IS THE BEST WAY TO DO THIS WITH ifelse()?
#WHAT DOES taxonLevel call? Genus? If so, we should be changing Genus column
TotalRows$Genus2 <- ifelse(TotalRows$BenchGenus %in% clust_labels$genus, clust_labels$lump, TotalRows$Genus)
check <- data.frame(TotalRows$BenchGenus, TotalRows$Genus, TotalRows$Genus2)
View(check)
#create bench genus in TotalRows
TotalRows <- TotalRows %>%
dplyr::mutate(BenchGenus = as.character(gsub( " .*$", "", BenchTaxonName)))
TotalRows$BenchGenus
#for bench genera that are one of bench genera in TotalRows, rename - IS THE BEST WAY TO DO THIS WITH ifelse()?
#WHAT DOES taxonLevel call? Genus? If so, we should be changing Genus column
TotalRows$Genus2 <- ifelse(TotalRows$BenchGenus %in% clust_labels$genus, clust_labels$lump, TotalRows$Genus)
check <- data.frame(TotalRows$BenchGenus, TotalRows$Genus, TotalRows$Genus2)
View(check)
str(clust_labels)
