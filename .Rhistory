-PUBLICATION_DATE, -TRIBE, -SUBFAMILY, -TAXA_ID,
-FFG, -HABIT, -PTV, -AG_ECO9, -NON_TARGET, -SITESAMP,
-STATE, -UNIQUE_ID) %>%
dplyr::mutate(YEAR = str_sub(DATE_COL, -4,-1),
YEAR = as.numeric(YEAR)) %>%
dplyr::select(-DATE_COL) %>%
dplyr::relocate(colnames(NRSA_1314_inverts))
##Update this weird TARGET_TAXON that is THIENEMANNIMYIA GENUS GR., but does not
##have a genus associated with it; so make genus = "THIENEMANNIMYIA"
NRSA_1819_inverts$GENUS = ifelse(grepl("GENUS", NRSA_1819_inverts$TARGET_TAXON),
"THIENEMANNIMYIA",
NRSA_1819_inverts$GENUS)
##Bind all
NRSA_inverts <- dplyr::bind_rows(list(NRSA_0304_inverts, NRSA_0809_inverts,
NRSA_1314_inverts, NRSA_1819_inverts))
##Catch the "/" genus and make sure it is put in the GENUS column
NRSA_inverts <- NRSA_inverts %>%
mutate(GENUS = ifelse(grepl("/", TARGET_TAXON),
TARGET_TAXON,
GENUS))
##Convert Genera names from all caps to sentence case (GENUS to Genus)
NRSA_inverts$GENUS <- stringr::str_to_sentence(NRSA_inverts$GENUS)
##Fix issue w/ str_to_sentence that is causing Orthocladius to be lowercase
NRSA_inverts$GENUS <- ifelse(NRSA_inverts$GENUS == "Cricotopus/orthocladius",
"Cricotopus/Orthocladius",
NRSA_inverts$GENUS)
##Second step:
##Rarefy samples to 300 in the same manner as the NAQWA data for consistency
if(isTRUE(rarefy)) {
set.seed(seed)
NRSA_inverts <- NRSA_inverts %>%
##Create unique grouping based on UID, SITE_ID, YEAR, and VISIT_NO
##Group by this column
##Take the total individuals counted, remove those that are less than 300
tidyr::unite(Unique, c(UID, SITE_ID, YEAR, VISIT_NO), sep = "_", remove = F) %>%
dplyr::group_by(Unique) %>%
dplyr::mutate(indcounted = sum(TOTAL)) %>%
dplyr::filter(indcounted > 299) %>%
dplyr::select(-indcounted) %>%
dplyr::ungroup() %>%
##Again group by the unique sample column
##Replicate each unique sample and target taxon by the number of individuals
## found in the sample, then take 300 random individuals from these samples
dplyr::group_by(Unique, TARGET_TAXON) %>%
dplyr::slice(rep(1:dplyr::n(), times=TOTAL)) %>%
dplyr::ungroup() %>%
dplyr::group_by(Unique) %>%
dplyr::sample_n(size = 300) %>%
dplyr::group_by(Unique, TARGET_TAXON) %>%
dplyr::mutate(TOTAL = dplyr::n()) %>%
dplyr::slice(1) %>%
dplyr::ungroup() %>%
dplyr::select(-Unique)
} else {}
##Third step:
##FIX ALL TAXONOMIC ISSUES; only needed IF taxonLevel = "Genus"
##NEED TO UPDATE THIS FOR FAMILY
###NEED TO GET switch1to1 in StreamData env
##Convert those genera that need to be updated
NRSA_inverts$GENUS <- ifelse(NRSA_inverts$GENUS %in% StreamData:::.switch1to1$BenchGenus,
StreamData:::.switch1to1$Genus,
NRSA_inverts$GENUS)
#If genera that are one of genera in dat1, rename the Genus with the slash
#label from dat1, else, keep the original Genus label
NRSA_inverts$GENUS <- ifelse(NRSA_inverts$GENUS %in% dat1$Genus,
dat1$Slash[match(NRSA_inverts$GENUS,
dat1$Genus)],
NRSA_inverts$GENUS)
#If genera that are one of problem slash genera, rename the Genus with the lumped
#label from fix_slash, else, keep the original Genus label
NRSA_inverts$GENUS <- ifelse(NRSA_inverts$GENUS %in% fix_slash$Slash,
fix_slash$Fix[match(NRSA_inverts$GENUS,
fix_slash$Slash)],
NRSA_inverts$GENUS)
#If bench genera that are one of bench genera in clust_labels, rename the Genus with the lump label from clust_labels
#else, keep the original Genus label
NRSA_inverts$GENUS <- ifelse(NRSA_inverts$GENUS %in% slashlump$genus,
slashlump$lump[match(NRSA_inverts$GENUS,
slashlump$genus)],
NRSA_inverts$GENUS)
if(isTRUE(NAWQAsubset)){
} else {}
##When "taxonLevel" isn't in all caps (in the function), create a NRSA specific
##taxonLevel that is in all caps
taxonLevel.nrsa <- base::toupper(taxonLevel)
NRSA_inverts %>%
filter(dplyr::vars(tidyselect::all_of(taxonLevel.nrsa)),
dplyr::any_vars(. %in% unique(TotalRows %>%
dplyr::select(tidyselect::all_of(taxonLevel)))
))
unique(TotalRows %>%
dplyr::select(tidyselect::all_of(taxonLevel))
nique(TotalRows %>%
dplyr::select(tidyselect::all_of(taxonLevel)))
unique(TotalRows %>%
dplyr::select(tidyselect::all_of(taxonLevel)))
filter(dplyr::vars(tidyselect::all_of(taxonLevel.nrsa)),
dplyr::any_vars(. %in% unique(TotalRows %>%
dplyr::select(tidyselect::all_of(taxonLevel)))
))
NRSA_inverts %>%
dplyr::filter(dplyr::vars(tidyselect::all_of(taxonLevel.nrsa)),
dplyr::any_vars(. %in% unique(TotalRows %>%
dplyr::select(tidyselect::all_of(taxonLevel)))
))
NRSA_inverts %>%
dplyr::filter(dplyr::vars(tidyselect::all_of(taxonLevel.nrsa)),
dplyr::any_vars(. == ""))
taxonLevel.nrsa
NRSA_inverts
NRSA_inverts %>%
dplyr::filter(dplyr::vars(tidyselect::all_of(taxonLevel.nrsa)),
dplyr::vars(. == ""))
NRSA_inverts %>%
dplyr::filter(dplyr::vars(tidyselect::all_of(taxonLevel.nrsa)) %in%
nique(TotalRows %>%
dplyr::select(tidyselect::all_of(taxonLevel))))
NRSA_inverts %>%
dplyr::filter(dplyr::vars(tidyselect::all_of(taxonLevel.nrsa)) %in%
unique(TotalRows %>%
dplyr::select(tidyselect::all_of(taxonLevel))))
NRSA_inverts %>%
dplyr::filter(dplyr::vars(tidyselect::all_of(taxonLevel.nrsa)) %in% "")
NRSA_inverts %>%
dplyr::filter_at(dplyr::vars(tidyselect::all_of(taxonLevel.nrsa)),
dplyr::any_vars(. %in% unique(TotalRows %>%
dplyr::select(tidyselect::all_of(taxonLevel)))
))
NRSA_inverts %>%
dplyr::filter_at(dplyr::vars(tidyselect::all_of(taxonLevel.nrsa)),
dplyr::any_vars(. == "")
))
NRSA_inverts %>%
dplyr::filter_at(dplyr::vars(tidyselect::all_of(taxonLevel.nrsa)),
dplyr::any_vars(. == "")
)
NRSA_inverts %>%
dplyr::filter_at(dplyr::vars(tidyselect::all_of(taxonLevel.nrsa)),
dplyr::any_vars(. %in% unique(TotalRows %>%
dplyr::select(tidyselect::all_of(taxonLevel)))
))
?%in%
?in
?\%in%
NRSA_inverts$GENUS %in%   unique(TotalRows$Genus)
NRSA_inverts %>%
filter(GENUS %in% unique(TotalRows$Genus)               )
NRSA_inverts %>%
filter(tidyselect::all_of(taxonLevel.nrsa) %in% unique(TotalRows$Genus))
NRSA_inverts %>%
filter(tidyselect::all_of(taxonLevel.nrsa), ~ . %in% unique(TotalRows$Genus))
NRSA_inverts %>%
filter(tidyselect::all_of(taxonLevel.nrsa), . %in% unique(TotalRows$Genus))
NAWQAsubset
NRSA_inverts
NRSA_inverts %>%
filter(GENUS %in% unique(TotalRows$Genus))
NAWQAgenera <- unique(TotalRows$Genus)
NRSAgenera <- unique(NRSA_inverts$GENUS)
NAWQAgeneraONLY <- NAWQAgenera[!(NAWQAgenera %in% NRSAgenera)]
NAWQAgeneraONLY
NRSAgenera[!(NRSAgenera %in% NAWQAgenera)]
invert_comms1
#All species are one
invert_comms1 = TotalRows %>%
dplyr::filter(PublishedTaxonNameLevel %in% taxcols) %>%
dplyr::filter_at(dplyr::vars(tidyselect::all_of(taxonLevel)), dplyr::any_vars(. != "")) %>%
tidyr::unite(UNIQUEID, c(SIDNO, tidyselect::all_of(taxonLevel)), sep = "_", remove = FALSE) %>%
dplyr::group_by(UNIQUEID) %>%
dplyr::mutate(Abundance = sum(Abundance)) %>%
dplyr::slice(1) %>%
dplyr::ungroup() %>%
dplyr::mutate(Density_m2 = ifelse(is.na(AreaSampTot_m2),
NA,
Abundance / AreaSampTot_m2)) %>%
dplyr::select(-tidyselect::any_of(c("LabOrderID", "LabRecordID", "FieldComponent",
"LabComponent", "LabProcName",
"TaxonomicResultReviewStatus",
"PublishedSortOrder", "BioDataTaxonName", "BioDataShortName",
"BenchTaxonName", "BenchTaxonNameReferenceCode",
"AdjRawCount", "RawCount",
"FieldSplitRatio", "LabSubsamplingRatio", "UniqueTaxonFlag",
"TargetLevelNotReachedReason", "Artifact", "BenchNotes",
"TaxonRecordSource", "IdentificationDate",
"VerificationEntity", "VerificationDate", "CurationEntity",
"CurationDate", 'ITIS_TSN', "ITIS_MatchCode", "PublishedTaxonName",
"PublishedTaxonNameAuthority", "ScientificName",
"TaxonVersionNumber", "NWQLSubsamplingCode",
"Ratio", 'X', "NumbEntries", "SampleGrouping", "LabRecordIDs",
"Ratios", "Note", "Lifestage", "UNIQUEID", "PublishedTaxonNameLevel",
"SamplerType", "DatasetPortion", "TotAreaSampled_m2"))) %>%
dplyr::select(-tidyselect::any_of(mycols)) %>%
dplyr::select(-tidyselect::any_of(notAbun)) %>%
tidyr::pivot_wider(names_from = tidyselect::all_of(taxonLevel),
names_prefix = "tax_",
values_from = tidyselect::all_of(abunMeasure),
values_fill = 0)
invert_comms1 = invert_comms1 %>%
dplyr::select(-Identifier,
-SIDNO,
-ReleaseCategory) %>%
dplyr::relocate(tidyselect::any_of(StreamData:::.ReorderUSGSBioDataColNames))
invert_comms1
NAWQAgeneraONLY <- paste("tax_", NAWQAgenera[!(NAWQAgenera %in% NRSAgenera)])
NAWQAgeneraONLY
NAWQAgeneraONLY <- paste("tax_", NAWQAgenera[!(NAWQAgenera %in% NRSAgenera)], sep = "")
NAWQAgeneraONLY
invert_comms1 %>%
dplyr::select(-tidyselect::any_of(NAWQAgeneraONLY))
invert_comms1
devtools::document()
27+27+40
devtools::document()
devtools::build()
devtools::document()
devtools::build()
##Read in NLCD data from streamcat dataset from Ryan Hill
streamcat <- read.csv(base::system.file("extdata",
"streamcat-usgs-nawqa-join.csv",
package = "StreamData"))
base::system.file("extdata",
"streamcat-usgs-nawqa-join.csv",
package = "StreamData")
devtools::document()
devtools::build()
devtools::document()
devtools::build()
?getNLCDData
devtools::document()
?getNLCDData
?left_join
?select
?unite
?mutate
?filter
devtools::document()
?tidyr
?getNLCDData
data.frame(SiteNumber = "USGS-05276005",
CollectionYear = 2007)
data = data.frame(SiteNumber = "USGS-05276005", CollectionYear = 2007)
scale = "Cat"
group = T
##Read in NLCD data from streamcat dataset from Ryan Hill
streamcat <- read.csv(base::system.file("extdata",
"streamcat-usgs-nawqa-join.csv",
package = "StreamData"))
streamcat <- read.csv(base::system.file("extdata",
"streamcat-usgs-nawqa-join.csv",
package = "StreamData"))
?isTRUE
read.csv(base::system.file("extdata",
"streamcat-usgs-nawqa-join.csv",
package = "StreamData"))
devtools::document()
devtools::document()
devtools::document()
devtools::document()
dat = data.frame(SiteNumber = "USGS-05276005",
CollectionYear = 1999)
ePest = "low"
lagTime = 1
lagType = "sum"
pestLevel = "type"
pestLevelName = "insecticide"
pest.dat <- utils::read.table(base::unz(base::system.file("extdata",
"pestCountyEstYrs.zip",
package = "StreamData"),
"pestCountyEstYrs.txt"),
sep = "\t", header= T,
colClasses = c("STATE_FIPS_CODE" = "character",
"COUNTY_FIPS_CODE" = "character"))  %>%
mutate(compound = stringr::str_to_lower(COMPOUND))
library(tidyverse)
pest.dat <- utils::read.table(base::unz(base::system.file("extdata",
"pestCountyEstYrs.zip",
package = "StreamData"),
"pestCountyEstYrs.txt"),
sep = "\t", header= T,
colClasses = c("STATE_FIPS_CODE" = "character",
"COUNTY_FIPS_CODE" = "character"))  %>%
mutate(compound = stringr::str_to_lower(COMPOUND))
ePest = "EPEST_LOW_KG"
dropC = "EPEST_HIGH_KG"
data = data.frame(SiteNumber = "USGS-05276005",
CollectionYear = 1999)
#takes input data and links cnty and state FIPS
site.dat <- data %>% dplyr::left_join(StreamData:::.site.info, by = "SiteNumber")
site.dat
site.dat.nrw = nrow(site.dat)
site.dat.nrw
site.dat = site.dat[rep(row.names(site.dat), each = lagTime + 1),]
site.dat
site.dat$LagYear = site.dat$CollectionYear
site.dat
site.dat$CollectionYear = site.dat$CollectionYear - rep(0:lagTime,
times = site.dat.nrw)
site.dat
#filter pest.dat by...
dat <- pest.dat %>%
# COUNTY FIPS, STATE FIPS
dplyr::filter(STATE_FIPS_CODE %in% site.dat$StateFIPSCode,
COUNTY_FIPS_CODE %in% site.dat$CountyFIPSCode,
# TIME (could include a LAG)
YEAR %in% site.dat$CollectionYear) %>%
# LOW estimates
dplyr::select(-tidyselect::any_of(dropC)) %>%
# GROUP by pesticide types (e.g. insecticides, herbicides, fungicides)
dplyr::left_join(.pest.info, by = c("compound" = "Name")) %>%
dplyr::filter_at(vars(any_of(pestLevel)), any_vars(. %in% pestLevelName)) %>%
# SUM (or average) by "insecticides", "herbicides", "fungicides" in each
# County-Yr-GROUP combo
dplyr::group_by(!!dplyr::sym(pestLevel), STATE_FIPS_CODE, COUNTY_FIPS_CODE, YEAR) %>%
dplyr::summarize(sumPest = sum(!!dplyr::sym(ePest), na.rm = TRUE)) %>%
dplyr::ungroup()
#filter pest.dat by...
dat <- pest.dat %>%
# COUNTY FIPS, STATE FIPS
dplyr::filter(STATE_FIPS_CODE %in% site.dat$StateFIPSCode,
COUNTY_FIPS_CODE %in% site.dat$CountyFIPSCode,
# TIME (could include a LAG)
YEAR %in% site.dat$CollectionYear) %>%
# LOW estimates
dplyr::select(-tidyselect::any_of(dropC)) %>%
# GROUP by pesticide types (e.g. insecticides, herbicides, fungicides)
dplyr::left_join(StreamData:::.pest.info, by = c("compound" = "Name")) %>%
dplyr::filter_at(vars(any_of(pestLevel)), any_vars(. %in% pestLevelName)) %>%
# SUM (or average) by "insecticides", "herbicides", "fungicides" in each
# County-Yr-GROUP combo
dplyr::group_by(!!dplyr::sym(pestLevel), STATE_FIPS_CODE, COUNTY_FIPS_CODE, YEAR) %>%
dplyr::summarize(sumPest = sum(!!dplyr::sym(ePest), na.rm = TRUE)) %>%
dplyr::ungroup()
dat
dat.wide <- dat %>%
tidyr::pivot_wider(names_from = !!dplyr::sym(pestLevel),
values_from = sumPest)
dat.wide
#filter pest.dat by...
dat <- pest.dat %>%
# COUNTY FIPS, STATE FIPS
dplyr::filter(STATE_FIPS_CODE %in% site.dat$StateFIPSCode,
COUNTY_FIPS_CODE %in% site.dat$CountyFIPSCode,
# TIME (could include a LAG)
YEAR %in% site.dat$CollectionYear) %>%
# LOW estimates
dplyr::select(-tidyselect::any_of(dropC)) %>%
# GROUP by pesticide types (e.g. insecticides, herbicides, fungicides)
dplyr::left_join(StreamData:::.pest.info, by = c("compound" = "Name")) %>%
dplyr::filter_at(vars(any_of(pestLevel)), any_vars(. %in% pestLevelName)) %>%
# SUM (or average) by "insecticides", "herbicides", "fungicides" in each
# County-Yr-GROUP combo
dplyr::group_by(!!dplyr::sym(pestLevel), STATE_FIPS_CODE, COUNTY_FIPS_CODE, YEAR) %>%
dplyr::summarize(sumPest = sum(!!dplyr::sym(ePest), na.rm = TRUE)) %>%
dplyr::ungroup()
dat.wide <- dat %>%
tidyr::pivot_wider(names_from = !!dplyr::sym(pestLevel),
values_from = sumPest)
dat.wide
site.dat.j <- site.dat %>%
dplyr::left_join(dat.wide, by = c("CollectionYear" = "YEAR",
"StateFIPSCode" = "STATE_FIPS_CODE",
"CountyFIPSCode" = "COUNTY_FIPS_CODE"))
site.dat.j
if(lagType == "sum"){
dat.end <- site.dat.j %>%
dplyr::select(-CollectionYear, -StateFIPSCode, -CountyFIPSCode) %>%
dplyr::group_by(SiteNumber, LagYear) %>%
dplyr::summarize_all(list(sum), na.rm = TRUE) %>%
dplyr::ungroup()
}else{
if(lagType == "mean"){
dat.end <- site.dat.j %>%
dplyr::select(-CollectionYear, -StateFIPSCode, -CountyFIPSCode) %>%
dplyr::group_by(SiteNumber, LagYear) %>%
dplyr::summarize_all(list(mean), na.rm = TRUE) %>%
dplyr::ungroup()
} else { if(!(lagType %in% c("sum", "mean"))){
stop("Provide lagType as 'sum' (sum across years) or 'mean' (average across years) ")
} }
}
dat.end
site.dat.j
lagTime
if(lagTime !=0){
if(lagType == "sum"){
dat.end <- site.dat.j %>%
dplyr::select(-CollectionYear, -StateFIPSCode, -CountyFIPSCode) %>%
dplyr::group_by(SiteNumber, LagYear) %>%
dplyr::summarize_all(list(sum), na.rm = TRUE) %>%
dplyr::ungroup()
}else{
if(lagType == "mean"){
dat.end <- site.dat.j %>%
dplyr::select(-CollectionYear, -StateFIPSCode, -CountyFIPSCode) %>%
dplyr::group_by(SiteNumber, LagYear) %>%
dplyr::summarize_all(list(mean), na.rm = TRUE) %>%
dplyr::ungroup()
} else { if(!(lagType %in% c("sum", "mean"))){
stop("Provide lagType as 'sum' (sum across years) or 'mean' (average across years) ")
} }
}
}else{
dat.end <- site.dat.j %>%
dplyr::select(-StateFIPSCode, -CountyFIPSCode)
}
dat.end
colnames(dat.end)
dat.end
ePest = "EPEST_LOW_KG"
dropC = "EPEST_HIGH_KG"
#takes input data and links cnty and state FIPS
site.dat <- data %>% dplyr::left_join(StreamData:::.site.info, by = "SiteNumber")
if(lagTime !=0){
site.dat.nrw = nrow(site.dat)
site.dat = site.dat[rep(row.names(site.dat), each = lagTime + 1),]
site.dat$LagYear = site.dat$CollectionYear
site.dat$CollectionYear = site.dat$CollectionYear - rep(0:lagTime,
times = site.dat.nrw)
}
#filter pest.dat by...
dat <- pest.dat %>%
# COUNTY FIPS, STATE FIPS
dplyr::filter(STATE_FIPS_CODE %in% site.dat$StateFIPSCode,
COUNTY_FIPS_CODE %in% site.dat$CountyFIPSCode,
# TIME (could include a LAG)
YEAR %in% site.dat$CollectionYear) %>%
# LOW estimates
dplyr::select(-tidyselect::any_of(dropC)) %>%
# GROUP by pesticide types (e.g. insecticides, herbicides, fungicides)
dplyr::left_join(StreamData:::.pest.info, by = c("compound" = "Name")) %>%
dplyr::filter_at(vars(any_of(pestLevel)), any_vars(. %in% pestLevelName)) %>%
# SUM (or average) by "insecticides", "herbicides", "fungicides" in each
# County-Yr-GROUP combo
dplyr::group_by(!!dplyr::sym(pestLevel), STATE_FIPS_CODE, COUNTY_FIPS_CODE, YEAR) %>%
dplyr::summarize(sumPest = sum(!!dplyr::sym(ePest), na.rm = TRUE)) %>%
dplyr::ungroup()
dat.wide <- dat %>%
tidyr::pivot_wider(names_from = !!dplyr::sym(pestLevel),
values_from = sumPest)
site.dat.j <- site.dat %>%
dplyr::left_join(dat.wide, by = c("CollectionYear" = "YEAR",
"StateFIPSCode" = "STATE_FIPS_CODE",
"CountyFIPSCode" = "COUNTY_FIPS_CODE"))
site.dat.j
lagType == "sum"
dat.end <- site.dat.j %>%
dplyr::select(-CollectionYear, -StateFIPSCode, -CountyFIPSCode) %>%
dplyr::group_by(SiteNumber, LagYear) %>%
dplyr::summarize_all(list(sum), na.rm = TRUE) %>%
dplyr::ungroup()
dat.end
data = data.frame(SiteNumber = c("USGS-05276005","USGS-01356190"),
CollectionYear = c(1999, 2004))
lagTime = 1
lagType = "sum"
pestLevel = "type"
pestLevelName = c("herbicide","insecticide")
#takes input data and links cnty and state FIPS
site.dat <- data %>% dplyr::left_join(StreamData:::.site.info, by = "SiteNumber")
site.dat
site.dat.nrw = nrow(site.dat)
site.dat = site.dat[rep(row.names(site.dat), each = lagTime + 1),]
site.dat$LagYear = site.dat$CollectionYear
site.dat$CollectionYear = site.dat$CollectionYear - rep(0:lagTime,
times = site.dat.nrw)
site.dat
#filter pest.dat by...
dat <- pest.dat %>%
# COUNTY FIPS, STATE FIPS
dplyr::filter(STATE_FIPS_CODE %in% site.dat$StateFIPSCode,
COUNTY_FIPS_CODE %in% site.dat$CountyFIPSCode,
# TIME (could include a LAG)
YEAR %in% site.dat$CollectionYear) %>%
# LOW estimates
dplyr::select(-tidyselect::any_of(dropC)) %>%
# GROUP by pesticide types (e.g. insecticides, herbicides, fungicides)
dplyr::left_join(StreamData:::.pest.info, by = c("compound" = "Name")) %>%
dplyr::filter_at(vars(any_of(pestLevel)), any_vars(. %in% pestLevelName)) %>%
# SUM (or average) by "insecticides", "herbicides", "fungicides" in each
# County-Yr-GROUP combo
dplyr::group_by(!!dplyr::sym(pestLevel), STATE_FIPS_CODE, COUNTY_FIPS_CODE, YEAR) %>%
dplyr::summarize(sumPest = sum(!!dplyr::sym(ePest), na.rm = TRUE)) %>%
dplyr::ungroup()
dat
dat.wide <- dat %>%
tidyr::pivot_wider(names_from = !!dplyr::sym(pestLevel),
values_from = sumPest)
dat.wide
site.dat.j <- site.dat %>%
dplyr::left_join(dat.wide, by = c("CollectionYear" = "YEAR",
"StateFIPSCode" = "STATE_FIPS_CODE",
"CountyFIPSCode" = "COUNTY_FIPS_CODE"))
site.dat.j
dat.end <- site.dat.j %>%
dplyr::select(-CollectionYear, -StateFIPSCode, -CountyFIPSCode) %>%
dplyr::group_by(SiteNumber, LagYear) %>%
dplyr::summarize_all(list(sum), na.rm = TRUE) %>%
dplyr::ungroup()
dat.end
colnames(dat.end)[which(colnames(dat.end) == "LagYear")]
which(colnames(dat.end) == "LagYear")
colnames(dat.end)[which(colnames(dat.end) == "LagYear")] = "CollectionYear"
dat.end
data = as.tibble(data.frame(SiteNumber = c("USGS-05276005","USGS-01356190"),
CollectionYear = c(1999, 2004)))
data = as_tibble(data.frame(SiteNumber = c("USGS-05276005","USGS-01356190"),
CollectionYear = c(1999, 2004)))
data
is.tibble(data)
tibble::is_tibble(data)
devtools::document()
devtools::document()
