##Filter to BERW; remove columns that are not needed (taxonomic resolutions are
##not available in all datasets, so remove those that are not found across data)
NRSA_1314_inverts = NRSA_1314_inverts %>%
filter(SAMPLE_TYPE %in% sampletype) %>%
dplyr::select(-IS_DISTINCT, -TOTAL300, -IS_DISTINCT300, -TOTAL300_OE,
-PUBLICATION_DATE, -TRIBE, -SUBFAMILY, -TAXA_ID)
##Update this weird TARGET_TAXON that is THIENEMANNIMYIA GENUS GR., but does not
##have a genus associated with it; so make genus = "THIENEMANNIMYIA"
NRSA_1314_inverts$GENUS = ifelse(grepl("GENUS", NRSA_1314_inverts$TARGET_TAXON),
"THIENEMANNIMYIA",
NRSA_1314_inverts$GENUS)
##Bind all
NRSA_inverts <- bind_rows(list(NRSA_0304_inverts, NRSA_0809_inverts, NRSA_1314_inverts))
##Second step:
##Rarefy samples to 300 in the same manner as the NAQWA data for consistency
set.seed(seed)
NRSA_inverts <- NRSA_inverts %>%
##Create unique grouping based on UID, SITE_ID, YEAR, and VISIT_NO
##Group by this column
##Take the total individuals counted, remove those that are less than 300
tidyr::unite(Unique, c(UID, SITE_ID, YEAR, VISIT_NO), sep = "_", remove = F) %>%
filter(Unique == "200304_0096_IAW02344_2004_2") %>%
dplyr::group_by(Unique) %>%
dplyr::mutate(indcounted = sum(TOTAL)) %>%
dplyr::filter(indcounted > 299) %>%
dplyr::select(-indcounted) %>%
dplyr::ungroup() %>%
##Again group by the unique sample column
##Replicate each unique sample and target taxon by the number of individuals
## found in the sample, then take 300 random individuals from these samples
dplyr::group_by(Unique, TARGET_TAXON) %>%
dplyr::slice(rep(1:dplyr::n(), times=TOTAL)) %>%
dplyr::ungroup() %>%
dplyr::group_by(Unique) %>%
dplyr::sample_n(size = 300) %>%
dplyr::group_by(Unique, TARGET_TAXON) %>%
dplyr::mutate(TOTAL = n()) %>%
dplyr::slice(1) %>%
dplyr::ungroup() %>%
dplyr::mutate(TOTAL = TOTAL / 300) %>%
dplyr::select(-Unique)
##Third step:
##FIX ALL TAXONOMIC ISSUES; only needed IF taxonLevel = "Genus"
##Convert Genera names from all caps to sentence case (GENUS to Genus)
NRSA_inverts$GENUS <- stringr::str_to_sentence(NRSA_inverts$GENUS)
##Unique Genera
genlist <- unique(NRSA_inverts$GENUS)
##Read in USGS taxonomy dataset
taxnames = read.csv("C:/Users/mikem/Documents/Research/USGS Stream Macros/MahonRumschlagPowell/20201028.1839.taxon_INVERT.csv",
fileEncoding="UTF-8-BOM")
##Create "bench genus"
taxnames <- taxnames %>%
mutate(BenchGenus = gsub( " .*$", "", BenchTaxonName ))
length(genlist)
sum(!(genlist %in% taxnames$BenchGenus))
41/923
##Identify those taxa that have taxonomy issues
taxsub <- taxnames %>%
filter(BenchGenus %in% genlist) %>%
dplyr::select(BenchGenus, PublishedTaxonName, Genus) %>%
group_by(BenchGenus, Genus) %>%
slice(1) %>%
ungroup() %>%
group_by(BenchGenus) %>%
mutate(count = n())
##Select those genera that are in a single new genus
##This will not be fixed with the clustering code below, so fix manually
##Will need to make this present within the R package itself
switch1to1 <- data.frame(taxsub %>%
filter(BenchGenus != Genus) %>%
filter(count == 1) %>%
dplyr::select(BenchGenus, Genus))
switch1to1[13,] <- c("Macronema", "Macrostemum")
switch1to1[14,] <- c("Gloiobdella", "Helobdella")
switch1to1[15,] <- c("Goniobasis", "Elimia")
switch1to1[16,] <- c("Teutonia", "Amboakis")
switch1to1[17,] <- c("Trasserkidrilus", "Tasserkidrilus")
library(tidyverse)
##Read in datasets directly from EPA website
NRSA_1314_inverts = read.csv("https://www.epa.gov/sites/production/files/2019-04/nrsa1314_bentcnts_04232019.csv",
colClasses = c("UID" = "character"),
stringsAsFactors = FALSE)
NRSA_1314_sites = read.csv("https://www.epa.gov/sites/production/files/2019-04/nrsa1314_siteinformation_wide_04292019.csv",
colClasses = c("UID" = "character"),
stringsAsFactors = FALSE)
NRSA_0809_inverts = read.csv("https://www.epa.gov/sites/production/files/2016-11/nrsa0809bentcts.csv",
colClasses = c("UID" = "character"),
stringsAsFactors = FALSE)
NRSA_0809_inverts_tax = read.csv("https://www.epa.gov/sites/production/files/2016-06/nrsa_0809_benttaxa.csv",
stringsAsFactors = FALSE)
NRSA_0809_sites = read.csv("https://www.epa.gov/sites/production/files/2015-09/siteinfo_0.csv",
colClasses = c("UID" = "character"),
stringsAsFactors = FALSE)
NRSA_0304_inverts = rbind(read.csv("https://www.epa.gov/sites/production/files/2014-10/wsa_bencnt_genus_ts_final_part1.csv",
stringsAsFactors = FALSE),
read.csv("https://www.epa.gov/sites/production/files/2014-10/wsa_bencnt_genus_ts_final_part2.csv",
stringsAsFactors = FALSE))
NRSA_0304_sites = read.csv("https://www.epa.gov/sites/production/files/2014-10/wsa_siteinfo_ts_final.csv",
stringsAsFactors = FALSE)
#############
##First step:
##Filter SAMPLE_TYPE to "BERW", "BERWW", or "REACHWIDE" in NRSA_inverts
sampletype = c("BERW", "BERWW", "REACHWIDE")
##2003/2004
NRSA_0304_inverts = NRSA_0304_inverts %>%
filter(INDEX_SAMPTYPE %in% sampletype) %>%
dplyr::select(-DISTINCT, -HABIT, -PTV, -FLAG_PTV, -FFG)
##Replace NAs with "", which is consistent with the other NRSA datasets
NRSA_0304_inverts$GENUS = ifelse(is.na(NRSA_0304_inverts$GENUS),
"",
NRSA_0304_inverts$GENUS)
NRSA_0304_inverts$FAMILY = ifelse(is.na(NRSA_0304_inverts$FAMILY),
"",
NRSA_0304_inverts$FAMILY)
NRSA_0304_inverts$ORDER = ifelse(is.na(NRSA_0304_inverts$ORDER),
"",
NRSA_0304_inverts$ORDER)
NRSA_0304_inverts$CLASS = ifelse(is.na(NRSA_0304_inverts$CLASS),
"",
NRSA_0304_inverts$CLASS)
##Use the names directly in Genus, Family, Order, Class, or Phylum
##Some names don't match or are at the subfamily level, which doesn't exist for all
##Datasets
NRSA_0304_inverts$TARGET_TAXON <- ifelse(NRSA_0304_inverts$GENUS != "",
NRSA_0304_inverts$GENUS,
ifelse(NRSA_0304_inverts$FAMILY != "",
NRSA_0304_inverts$FAMILY,
ifelse(NRSA_0304_inverts$ORDER != "",
NRSA_0304_inverts$ORDER,
ifelse(NRSA_0304_inverts$CLASS != "",
NRSA_0304_inverts$CLASS,
NRSA_0304_inverts$PHYLUM
)
)
)
)
##Create UID
NRSA_0304_inverts$UID <- paste("200304", NRSA_0304_inverts$SITE_ID, NRSA_0304_inverts$VISIT_NO,
sep = "_")
##Update column names to match those of 08/09 and 13/14
colnames(NRSA_0304_inverts)[c(4,10)] = c("SAMPLE_TYPE", "TOTAL")
##Rearrange columns to match those of 08/09 and 13/14
NRSA_0304_inverts <- NRSA_0304_inverts %>%
relocate(any_of(c("UID", "SITE_ID", "YEAR", "VISIT_NO", "SAMPLE_TYPE",
"TARGET_TAXON", "TOTAL", "PHYLUM", "CLASS", "ORDER",
"FAMILY", "GENUS")))
##2008/2009
##Filter to BERW; remove columns that are not needed
NRSA_0809_inverts = NRSA_0809_inverts %>%
filter(SAMPLE_TYPE %in% sampletype) %>%
dplyr::select(-IS_DISTINCT, -TOTAL300, -IS_DISTINCT300, -BENT_COM, -DATE_BENT,
-SAMPLE_CAT, -PUBLICATION_DATE) %>%
mutate(YEAR = paste("20", str_sub(DATE_COL, -2,-1), sep = ""),
YEAR = as.numeric(YEAR)) %>%
dplyr::select(-DATE_COL)
##Join the count data to the taxa data to match those of 03/04
NRSA_0809_inverts<- NRSA_0809_inverts %>%
left_join(NRSA_0809_inverts_tax %>%
dplyr::select(TAXA_ID, PHYLUM, CLASS, ORDER, FAMILY, GENUS),
by = "TAXA_ID")
##Update this weird TARGET_TAXON that is THIENEMANNIMYIA GENUS GR., but does not
##have a genus associated with it; so make genus = "THIENEMANNIMYIA"
NRSA_0809_inverts$GENUS = ifelse(grepl("GENUS", NRSA_0809_inverts$TARGET_TAXON),
"THIENEMANNIMYIA",
NRSA_0809_inverts$GENUS)
##Rearrange columns to match those of 08/09 and 13/14
NRSA_0809_inverts <- NRSA_0809_inverts %>%
relocate(YEAR, .before = SAMPLE_TYPE) %>%
dplyr::select(-TAXA_ID)
##2013/2014
##Filter to BERW; remove columns that are not needed (taxonomic resolutions are
##not available in all datasets, so remove those that are not found across data)
NRSA_1314_inverts = NRSA_1314_inverts %>%
filter(SAMPLE_TYPE %in% sampletype) %>%
dplyr::select(-IS_DISTINCT, -TOTAL300, -IS_DISTINCT300, -TOTAL300_OE,
-PUBLICATION_DATE, -TRIBE, -SUBFAMILY, -TAXA_ID)
##Update this weird TARGET_TAXON that is THIENEMANNIMYIA GENUS GR., but does not
##have a genus associated with it; so make genus = "THIENEMANNIMYIA"
NRSA_1314_inverts$GENUS = ifelse(grepl("GENUS", NRSA_1314_inverts$TARGET_TAXON),
"THIENEMANNIMYIA",
NRSA_1314_inverts$GENUS)
##Bind all
NRSA_inverts <- bind_rows(list(NRSA_0304_inverts, NRSA_0809_inverts, NRSA_1314_inverts))
##Second step:
##Rarefy samples to 300 in the same manner as the NAQWA data for consistency
set.seed(seed)
NRSA_inverts <- NRSA_inverts %>%
##Create unique grouping based on UID, SITE_ID, YEAR, and VISIT_NO
##Group by this column
##Take the total individuals counted, remove those that are less than 300
tidyr::unite(Unique, c(UID, SITE_ID, YEAR, VISIT_NO), sep = "_", remove = F) %>%
filter(Unique == "200304_0096_IAW02344_2004_2") %>%
dplyr::group_by(Unique) %>%
dplyr::mutate(indcounted = sum(TOTAL)) %>%
dplyr::filter(indcounted > 299) %>%
dplyr::select(-indcounted) %>%
dplyr::ungroup() %>%
##Again group by the unique sample column
##Replicate each unique sample and target taxon by the number of individuals
## found in the sample, then take 300 random individuals from these samples
dplyr::group_by(Unique, TARGET_TAXON) %>%
dplyr::slice(rep(1:dplyr::n(), times=TOTAL)) %>%
dplyr::ungroup() %>%
dplyr::group_by(Unique) %>%
dplyr::sample_n(size = 300) %>%
dplyr::group_by(Unique, TARGET_TAXON) %>%
dplyr::mutate(TOTAL = n()) %>%
dplyr::slice(1) %>%
dplyr::ungroup() %>%
dplyr::mutate(TOTAL = TOTAL / 300) %>%
dplyr::select(-Unique)
##Third step:
##FIX ALL TAXONOMIC ISSUES; only needed IF taxonLevel = "Genus"
##Convert Genera names from all caps to sentence case (GENUS to Genus)
NRSA_inverts$GENUS <- stringr::str_to_sentence(NRSA_inverts$GENUS)
##Unique Genera
genlist <- unique(NRSA_inverts$GENUS)
##Read in USGS taxonomy dataset
taxnames = read.csv("C:/Users/mikem/Documents/Research/USGS Stream Macros/MahonRumschlagPowell/20201028.1839.taxon_INVERT.csv",
fileEncoding="UTF-8-BOM")
##Create "bench genus"
taxnames <- taxnames %>%
mutate(BenchGenus = gsub( " .*$", "", BenchTaxonName ))
length(genlist)
sum(!(genlist %in% taxnames$BenchGenus))
41/923
##Identify those taxa that have taxonomy issues
taxsub <- taxnames %>%
filter(BenchGenus %in% genlist) %>%
dplyr::select(BenchGenus, PublishedTaxonName, Genus) %>%
group_by(BenchGenus, Genus) %>%
slice(1) %>%
ungroup() %>%
group_by(BenchGenus) %>%
mutate(count = n())
##Select those genera that are in a single new genus
##This will not be fixed with the clustering code below, so fix manually
##Will need to make this present within the R package itself
switch1to1 <- data.frame(taxsub %>%
filter(BenchGenus != Genus) %>%
filter(count == 1) %>%
dplyr::select(BenchGenus, Genus))
switch1to1[13,] <- c("Macronema", "Macrostemum")
switch1to1[14,] <- c("Gloiobdella", "Helobdella")
switch1to1[15,] <- c("Goniobasis", "Elimia")
switch1to1[16,] <- c("Teutonia", "Amboakis")
switch1to1[17,] <- c("Trasserkidrilus", "Tasserkidrilus")
switch1to1
.switch1to1 <- data.frame(BenchGenus = c("Anisogammarus",
"Asellus",
"Asheum",
"Corophium",
"Deronectes",
"Desserobdella",
"Dina",
"Mooreobdella",
"Nephelopsis",
"Physella",
"Pristinella",
"Stelechomyia",
"Macronema",
"Gloiobdella",
"Goniobasis",
"Teutonia",
"Trasserkidrilus"),
Genus = c("Ramellogammarus",
"Caecidotea",
"Polypedilum",
"Americorophium",
"Stictotarsus",
"Placobdella",
"Erpobdella",
"Erpobdella",
"Erpobdella",
"Physa",
"Pristina",
"Kribiodorum",
"Macrostemum",
"Helobdella",
"Elimia",
"Amboakis",
"Tasserkidrilus"))
.TaxLevCols_Algae = list("AlgalGroup" = list("mycols" = c("Phylum", "Class",
"Order", "Family",
"Genus", "Species"),
"taxcols" = c("AlgalGroup",
"Phylum", "Class",
"Order", "Family",
"Genus", "Species",
"Variety", "Form",
"Subspecies")),
"Phylum" = list("mycols" = c("AlgalGroup", "Class",
"Order", "Family",
"Genus", "Species"),
"taxcols" = c("Phylum", "Class",
"Order", "Family",
"Genus", "Species",
"Variety", "Form",
"Subspecies")),
"Class" = list("mycols" = c("AlgalGroup", "Phylum",
"Order", "Family",
"Genus", "Species"),
"taxcols" = c("Class",
"Order", "Family",
"Genus", "Species",
"Variety", "Form",
"Subspecies")),
"Order" = list("mycols" = c("AlgalGroup", "Phylum",
"Class",
"Family",
"Genus", "Species"),
"taxcols" = c("Order", "Family",
"Genus", "Species",
"Variety", "Form",
"Subspecies")),
"Family" = list("mycols" = c("AlgalGroup", "Phylum",
"Class",
"Order",
"Genus", "Species"),
"taxcols" = c("Family",
"Genus", "Species",
"Variety", "Form",
"Subspecies")),
"Genus" = list("mycols" = c("AlgalGroup", "Phylum",
"Class",
"Order", "Family",
"Species"),
"taxcols" = c("Genus", "Species",
"Variety", "Form",
"Subspecies")),
"Species" = list("mycols" = c("AlgalGroup", "Phylum",
"Class",
"Order", "Family",
"Genus"),
"taxcols" = c("Species",
"Variety", "Form",
"Subspecies"))
)
taxnames = c("Phylum", "Subphylum", "Class", "Subclass", "Infraclass",
"Superorder", "Order", "Suborder", "Infraorder", "Superfamily",
"Family", "Subfamily", "Tribe", "Genus", "Subgenus", "Species",
"Subspecies")
.TaxLevCols_Inverts = list("Phylum" = list("mycols" = taxnames[-(which(taxnames == "Phylum"))],
"taxcols" = taxnames[(which(taxnames == "Phylum")):length(taxnames)]),
"Subphylum" = list("mycols" = taxnames[-(which(taxnames == "Subphylum"))],
"taxcols" = taxnames[(which(taxnames == "Subphylum")):length(taxnames)]),
"Class" = list("mycols" = taxnames[-(which(taxnames == "Class"))],
"taxcols" = taxnames[(which(taxnames == "Class")):length(taxnames)]),
"Subclass" = list("mycols" = taxnames[-(which(taxnames == "Subclass"))],
"taxcols" = taxnames[(which(taxnames == "Subclass")):length(taxnames)]),
"Infraclass" = list("mycols" = taxnames[-(which(taxnames == "Infraclass"))],
"taxcols" = taxnames[(which(taxnames == "Infraclass")):length(taxnames)]),
"Superorder" = list("mycols" = taxnames[-(which(taxnames == "Superorder"))],
"taxcols" = taxnames[(which(taxnames == "Superorder")):length(taxnames)]),
"Order" = list("mycols" = taxnames[-(which(taxnames == "Order"))],
"taxcols" = taxnames[(which(taxnames == "Order")):length(taxnames)]),
"Suborder" = list("mycols" = taxnames[-(which(taxnames == "Suborder"))],
"taxcols" = taxnames[(which(taxnames == "Suborder")):length(taxnames)]),
"Infraorder" = list("mycols" = taxnames[-(which(taxnames == "Infraorder"))],
"taxcols" = taxnames[(which(taxnames == "Infraorder")):length(taxnames)]),
"Superfamily" = list("mycols" = taxnames[-(which(taxnames == "Superfamily"))],
"taxcols" = taxnames[(which(taxnames == "Superfamily")):length(taxnames)]),
"Family" = list("mycols" = taxnames[-(which(taxnames == "Family"))],
"taxcols" = taxnames[(which(taxnames == "Family")):length(taxnames)]),
"Subfamily" = list("mycols" = taxnames[-(which(taxnames == "Subfamily"))],
"taxcols" = taxnames[(which(taxnames == "Subfamily")):length(taxnames)]),
"Tribe" = list("mycols" = taxnames[-(which(taxnames == "Tribe"))],
"taxcols" = taxnames[(which(taxnames == "Tribe")):length(taxnames)]),
"Genus" = list("mycols" = taxnames[-(which(taxnames == "Genus"))],
"taxcols" = taxnames[(which(taxnames == "Genus")):length(taxnames)]),
"Subgenus" = list("mycols" = taxnames[-(which(taxnames == "Subgenus"))],
"taxcols" = taxnames[(which(taxnames == "Subgenus")):length(taxnames)]),
"Species" = list("mycols" = taxnames[-(which(taxnames == "Species"))],
"taxcols" = taxnames[(which(taxnames == "Species")):length(taxnames)]),
"Subspecies" = list("mycols" = taxnames[-(which(taxnames == "Subspecies"))],
"taxcols" = taxnames[(which(taxnames == "Subspecies")):length(taxnames)])
)
taxnamesFISH = c("Superclass", "Class", "Subclass",
"Superorder", "Order", "Superfamily",
"Family", "Subfamily", "Genus", "Species",
"Subspecies")
.TaxLevCols_Fish = list("Superclass" = list("mycols" = taxnamesFISH[-(which(taxnamesFISH == "Superclass"))],
"taxcols" = taxnamesFISH[(which(taxnamesFISH == "Superclass")):length(taxnamesFISH)]),
"Class" = list("mycols" = taxnamesFISH[-(which(taxnamesFISH == "Class"))],
"taxcols" = taxnamesFISH[(which(taxnamesFISH == "Class")):length(taxnamesFISH)]),
"Subclass" = list("mycols" = taxnamesFISH[-(which(taxnamesFISH == "Subclass"))],
"taxcols" = taxnamesFISH[(which(taxnamesFISH == "Subclass")):length(taxnamesFISH)]),
"Superorder" = list("mycols" = taxnamesFISH[-(which(taxnamesFISH == "Superorder"))],
"taxcols" = taxnamesFISH[(which(taxnamesFISH == "Superorder")):length(taxnamesFISH)]),
"Order" = list("mycols" = taxnamesFISH[-(which(taxnamesFISH == "Order"))],
"taxcols" = taxnamesFISH[(which(taxnamesFISH == "Order")):length(taxnamesFISH)]),
"Superfamily" = list("mycols" = taxnamesFISH[-(which(taxnamesFISH == "Superfamily"))],
"taxcols" = taxnamesFISH[(which(taxnamesFISH == "Superfamily")):length(taxnamesFISH)]),
"Family" = list("mycols" = taxnamesFISH[-(which(taxnamesFISH == "Family"))],
"taxcols" = taxnamesFISH[(which(taxnamesFISH == "Family")):length(taxnamesFISH)]),
"Subfamily" = list("mycols" = taxnamesFISH[-(which(taxnamesFISH == "Subfamily"))],
"taxcols" = taxnamesFISH[(which(taxnamesFISH == "Subfamily")):length(taxnamesFISH)]),
"Genus" = list("mycols" = taxnamesFISH[-(which(taxnamesFISH == "Genus"))],
"taxcols" = taxnamesFISH[(which(taxnamesFISH == "Genus")):length(taxnamesFISH)]),
"Species" = list("mycols" = taxnamesFISH[-(which(taxnamesFISH == "Species"))],
"taxcols" = taxnamesFISH[(which(taxnamesFISH == "Species")):length(taxnamesFISH)]),
"Subspecies" = list("mycols" = taxnamesFISH[-(which(taxnamesFISH == "Subspecies"))],
"taxcols" = taxnamesFISH[(which(taxnamesFISH == "Subspecies")):length(taxnamesFISH)])
)
Proprietary <- read.csv("C:/Users/mikem/Documents/R Package Builds/USGS_Invert_Functions/data/Proprietary.csv")
## Create a character ratio to avoid reading in the file and generating decimal ratios
Proprietary$Ratio <- paste('"', Proprietary$NWQLSubsamplingCode, '"', sep = " ")
Sampler <- read.csv("C:/Users/mikem/Documents/R Package Builds/USGS_Invert_Functions/data/Grotheer -- Ratio&SamplerType.csv")
Sampler$Ratio <- as.character(Sampler$Ratio)
## Combine 'Proprietary' and 'Sampler' using the "Ratio" character
.SamplingRatio_SamplerType <- left_join(Proprietary, Sampler, by = "Ratio")
.ReorderUSGSBioDataColNames = c("ProjectLabel",
"ProjectAssignedSampleLabel",
"NAWQA.SMCOD",
"NAWQAStudyUnitCode",
"CollectionDate",
"StartTime",
"TimeDatum",
"CollectionYear",
"CollectionMonth",
"CollectionDayOfYear",
"SiteVisitSampleNumber",
"ProvisionalData",
"SiteNumber",
"SiteName",
"StudyReachName",
"SiteTypeName",
"StateFIPSCode",
"CountyFIPSCode",
"Latitude_dd",
"Longitude_dd",
"CoordinateDatum",
"HUCCode",
"DrainageArea_mi2",
"SampleTypeCode",
"IdentificationEntity",
"AreaSampTot_m2",
"GeomorphicChannelUnit",
"ChannelBoundaries",
"ChannelFeatures",
"ReplicateType",
"MethodCode",
"MethodBasic",
"ReachLengthFished_m",
"NumberSeineHauls",
"NumberStationarySetsKicks",
"NumberSnorkelingTransects",
"MinutesShockTime",
"StandardMethod",
"SamplingMethodOrDevice",
"PeriphytonHabitatSampled",
"SubsurfaceGrabDepth_m")
.site.info <- read.csv("C:/Users/mikem/Documents/Research/USGS Stream Macros/PestDataForRPackageBuild/Biodata_Site_List.csv",
colClasses = c("StateFIPSCode" = "character",
"CountyFIPSCode" = "character"))
.pest.info <- read.csv("C:/Users/mikem/Documents/Research/USGS Stream Macros/PestDataForRPackageBuild/pestclassPANall_22Feb21.csv") %>%
dplyr::mutate(Name = stringr::str_to_lower(Name),
class = Class,
type = Type)
.clust_labels = read.csv("C:/Users/mikem/Documents/Research/USGS Stream Macros/MahonRumschlagPowell/clust_labels.csv",
header=T, stringsAsFactors = FALSE)
.switch1to1 <- data.frame(BenchGenus = c("Anisogammarus",
"Asellus",
"Asheum",
"Corophium",
"Deronectes",
"Desserobdella",
"Dina",
"Mooreobdella",
"Nephelopsis",
"Physella",
"Pristinella",
"Stelechomyia",
"Macronema",
"Gloiobdella",
"Goniobasis",
"Teutonia",
"Trasserkidrilus"),
Genus = c("Ramellogammarus",
"Caecidotea",
"Polypedilum",
"Americorophium",
"Stictotarsus",
"Placobdella",
"Erpobdella",
"Erpobdella",
"Erpobdella",
"Physa",
"Pristina",
"Kribiodorum",
"Macrostemum",
"Helobdella",
"Elimia",
"Amboakis",
"Tasserkidrilus"))
usethis::use_data(.TaxLevCols_Algae, .TaxLevCols_Inverts,
.TaxLevCols_Fish, .SamplingRatio_SamplerType,
.ReorderUSGSBioDataColNames,
.site.info,
.pest.info,
.clust_labels,
.switch1to1,
internal = TRUE)
usethis::use_data(.TaxLevCols_Algae, .TaxLevCols_Inverts,
.TaxLevCols_Fish, .SamplingRatio_SamplerType,
.ReorderUSGSBioDataColNames,
.site.info,
.pest.info,
.clust_labels,
.switch1to1,
internal = TRUE,
overwrite = TRUE)
