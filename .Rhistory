US_L3CODE, US_L3NAME) %>%
dplyr::mutate(RT_NRSA = "",
DATE_COL = as.Date(DATE_COL, format = "%m/%d/%Y"),
VISIT_NO = as.character(VISIT_NO),
MASTER_SITEID = SITE_ID) %>%
dplyr::relocate(RT_NRSA, .before = US_L3CODE) %>%
dplyr::relocate(MASTER_SITEID, .after = SITE_ID)
##13/14
##UID, SITE_ID, VISIT_NO, SITETYPE, DATE_COL, PSTL_CODE, LAT_DD83, LON_DD83,
##AG_ECO9, NRS13_Urban, RT_NRSA, US_L3CODE, US_L3NAME,
NRSA_1314_sites <- NRSA_1314_sites %>%
dplyr::select(UID, SITE_ID, VISIT_NO, SITETYPE, DATE_COL, PSTL_CODE,
LAT_DD83, LON_DD83, AG_ECO9, NRS13_URBN, RT_NRSA,
US_L3CODE, US_L3NAME) %>%
dplyr::mutate(RT_NRSA = ifelse(RT_NRSA == "?",
"",
RT_NRSA),
DATE_COL = as.Date(DATE_COL, format = "%m/%d/%Y"),
VISIT_NO = as.character(VISIT_NO),
MASTER_SITEID = SITE_ID) %>%
dplyr::relocate(MASTER_SITEID, .after = SITE_ID)
##08/09 - MISSING L3 NAME (not a problem)
##UID, SITE_ID, VISIT_NO, SITE_CLASS, DATE_COL, STATE, LAT_DD83, LONG_DD83,
##AGGR_ECO9_2015, URBAN, RT_NRSA, US_L3CODE_2015
NRSA_0809_sites <- NRSA_0809_sites %>%
dplyr::select(UID, SITE_ID, MASTER_SITEID, VISIT_NO, SITE_CLASS, DATE_COL, STATE,
LAT_DD83, LON_DD83, AGGR_ECO9_2015, URBAN, RT_NRSA,
US_L3CODE_2015) %>%
dplyr::mutate(RT_NRSA = ifelse(RT_NRSA == "R",
"R",
ifelse(RT_NRSA == "S",
"In",
ifelse(RT_NRSA == "T",
"Im",
"")))) %>%
dplyr::mutate(US_L3NAME = "",
DATE_COL = as.Date(DATE_COL, format = "%d-%b-%y"),
VISIT_NO = as.character(VISIT_NO))
##For some reason, one MASTER_SITEID is missing for one replicate sample, so give it the site id
NRSA_0809_sites$MASTER_SITEID[which(NRSA_0809_sites$SITE_ID == "FW08LA004")] = "FW08LA004"
##03/04 - MISSING UID (will create in the same way as above), URBAN
##SITE_ID, VISIT_NO, SITETYPE, DATE_COL, STATE, LAT_DD, LON_DD,
##ECOWSA9, RT_WSA, ECO3, ECO3_NM
NRSA_0304_sites <- NRSA_0304_sites %>%
dplyr::select(SITE_ID, VISIT_NO, SITETYPE, DATE_COL, STATE, LAT_DD, LON_DD,
ECOWSA9, RT_WSA, ECO3, ECO3_NM) %>%
dplyr::mutate(RT_WSA = ifelse(RT_WSA == "R",
"R",
ifelse(RT_WSA == "S",
"In",
ifelse(RT_WSA == "T",
"Im",
"")))) %>%
dplyr::mutate(URBAN = "",
UID = paste("200304", SITE_ID, VISIT_NO,
sep = "_"),
DATE_COL = as.Date(DATE_COL, format = "%m/%d/%Y"),
VISIT_NO = as.character(VISIT_NO),
MASTER_SITEID = SITE_ID) %>%
dplyr::relocate(UID, .before = SITE_ID) %>%
dplyr::relocate(URBAN, .before = RT_WSA) %>%
dplyr::relocate(MASTER_SITEID, .after = SITE_ID)
##Set all column names equal to each other
colnames(NRSA_0304_sites) =
colnames(NRSA_0809_sites) =
colnames(NRSA_1819_sites) =
colnames(NRSA_1314_sites)
NRSA_sites <-  dplyr::bind_rows(list(NRSA_1819_sites, NRSA_1314_sites,
NRSA_0809_sites, NRSA_0304_sites))
NRSA_sites$YEAR = lubridate::year(NRSA_sites$DATE_COL)
##Join with nrsa_comms1 to get site-level data
nrsa_comms1 = nrsa_comms1 %>%
tidyr::unite(UNIQUEID, c(UID, SITE_ID, YEAR, VISIT_NO),
sep = "_", remove = FALSE) %>%
dplyr::left_join(NRSA_sites %>%
tidyr::unite(UNIQUEID, c(UID, SITE_ID, YEAR, VISIT_NO),
sep = "_", remove = T), by = "UNIQUEID") %>%
dplyr::relocate(tidyselect::contains("tax_"), .after = last_col()) %>%
dplyr::mutate(ProjectLabel = ifelse(YEAR %in% c(2013, 2014),
"NRSA1314",
ifelse(YEAR %in% c(2008, 2009),
"NRSA0809",
ifelse(YEAR %in% c(2018, 2019),
"NRSA1819",
"WSA"))),
ProjectAssignedSampleLabel = UID,
NAWQA.SMCOD = UNIQUEID,
NAWQAStudyUnitCode = SITETYPE,
CollectionDate = DATE_COL,
StartTime = NA,
TimeDatum = NA,
CollectionYear = YEAR,
CollectionMonth = lubridate::month(DATE_COL),
CollectionDayOfYear = lubridate::yday(DATE_COL),
SiteVisitSampleNumber = VISIT_NO,
ProvisionalData = NA,
SiteNumber = MASTER_SITEID,
SiteName = MASTER_SITEID,
StateFIPSCode = NA,
CountyFIPSCode = NA,
Latitude_dd = LAT_DD83,
Longitude_dd = LON_DD83,
CoordinateDatum = "NAD83",
HUCCode = NA,
DrainageArea_mi2 = NA ,
SampleTypeCode = SAMPLE_TYPE,
IdentificationEntity = NA,
AreaSampTot_m2  = NA,
GeomorphicChannelUnit = NA,
ChannelBoundaries = NA,
ChannelFeatures = NA,
ReplicateType  = NA
) %>%
dplyr::select(-SAMPLE_TYPE, -LAT_DD83, -LON_DD83, -SITETYPE,
-SITE_ID, -MASTER_SITEID, -UID, -UNIQUEID, -DATE_COL,
-YEAR, -PSTL_CODE, -US_L3CODE, -US_L3NAME, -VISIT_NO,
-AG_ECO9, -NRS13_URBN, -RT_NRSA) %>%
dplyr::relocate(tidyselect::contains("tax_"), .after = last_col())
##To make sure the NRSA sites are correct crosswalked across sampling rounds
# rename the nrsa_comms1$SiteNumber based on the master crosswalk list from
# Richard Mitchell (w/ updates to include MASTER_SITEID)
##if site number in nrsa_comms1 is in the SITEID in the master crosswalk list,
##match the numbers and pull the corresponding unique id, which is the crosswalked site id,
##else provide an NA
nrsa_comms1$UNIQUE_ID <- ifelse(nrsa_comms1$SiteNumber %in% StreamData:::.NRSA_siteIDs$SITE_ID,
StreamData:::.NRSA_siteIDs$UNIQUE_ID[match(nrsa_comms1$SiteNumber,
StreamData:::.NRSA_siteIDs$SITE_ID)],
NA)
##if site number in nrsa_comms1 is in the MASTER_SITEID in the master crosswalk list,
##match the numbers and pull the corresponding unique id, which is the crosswalked site id,
##else give the current UNIQUE ID
nrsa_comms1$UNIQUE_ID <- ifelse(nrsa_comms1$SiteNumber %in% StreamData:::.NRSA_siteIDs$MASTER_SITEID,
StreamData:::.NRSA_siteIDs$UNIQUE_ID[match(nrsa_comms1$SiteNumber,
StreamData:::.NRSA_siteIDs$MASTER_SITEID)],
nrsa_comms1$UNIQUE_ID)
##if there are any NA values in UNIQUE ID, replace these with the SiteNumber
nrsa_comms1$SiteNumber = ifelse(is.na(nrsa_comms1$UNIQUE_ID),
nrsa_comms1$SiteNumber,
nrsa_comms1$UNIQUE_ID)
##remove the UNIQUEID column, as it is no longer needed
nrsa_comms1 <- nrsa_comms1 %>%
select(-UNIQUE_ID)
##Need to then join this dataset to invert_comms1
invert_comms1[setdiff(names(nrsa_comms1), names(invert_comms1))] <- NA
nrsa_comms1[setdiff(names(invert_comms1), names(nrsa_comms1))] <- NA
##Add Agency columns
invert_comms1$Agency <- "USGS"
nrsa_comms1$Agency <- "EPA"
invert_comms1 <- invert_comms1  %>%
dplyr::relocate(tidyselect::contains("tax_"), .after = last_col())
nrsa_comms1 <- nrsa_comms1  %>%
dplyr::relocate(tidyselect::contains("tax_"), .after = last_col()) %>%
dplyr::relocate(tidyselect::any_of(colnames(invert_comms1)))
invert_comms1 <- dplyr::bind_rows(invert_comms1, nrsa_comms1)
invert_comms1 = invert_comms1 %>%
dplyr::mutate(dplyr::across(tidyselect::starts_with("tax_"),
~ifelse(is.na(.x),
0,
.x)))
} else{ }
if(dataType == "occur") {
invert_comms1 = invert_comms1 %>%
dplyr::mutate(dplyr::across(tidyselect::starts_with("tax_"),
~replace(., . > 0, 1)))
}
##Remove the "tax_" prefix
colnames(invert_comms1) = sub("tax_", "", colnames(invert_comms1))
return(data.frame(invert_comms1))
}
invertdat <- getInvertData(dataType = "abun",
taxonLevel = "Genus",
taxonFix = "lump",
agency = c("USGS", "EPA"),
lifestage = FALSE,
rarefy = FALSE,
sharedTaxa = TRUE,
seed = 0)
View(invertdat)
colnames(invertdat)[1:32]
colnames(invertdat)[1:33]
colnames(invertdat)[1:33]
colnames(invertdat)[1:34]
colnames(invertdat)[1:33]
ncol(invertdat)
invertdat$TotalAbundance <- rowSums(invertdat[,c(34:600)])
invertdat %>%
filter(AreaSampTot_m2 > 0.125) %>%
filter(AreaSampTot_m2 < 5) %>%
filter(LabSubsamplingRatio > 0.015) %>%
ggplot(aes(x = CollectionYear,
y = TotalAbundance))+
scale_y_continuous(trans = "log")+
ggbeeswarm::geom_quasirandom(aes(color = LabSubsamplingRatio * FieldSplitRatio))+
stat_smooth()
invertdat %>%
# filter(AreaSampTot_m2 > 0.125) %>%
# filter(AreaSampTot_m2 < 5) %>%
# filter(LabSubsamplingRatio > 0.015) %>%
ggplot(aes(x = CollectionYear,
y = TotalAbundance))+
scale_y_continuous(trans = "log")+
ggbeeswarm::geom_quasirandom(aes(color = LabSubsamplingRatio * FieldSplitRatio))+
stat_smooth()
invertdat %>%
# filter(AreaSampTot_m2 > 0.125) %>%
# filter(AreaSampTot_m2 < 5) %>%
# filter(LabSubsamplingRatio > 0.015) %>%
ggplot(aes(x = CollectionYear,
y = TotalAbundance))+
scale_y_continuous(trans = "log")+
ggbeeswarm::geom_quasirandom()+
stat_smooth()
invertdat %>%
# filter(AreaSampTot_m2 > 0.125) %>%
# filter(AreaSampTot_m2 < 5) %>%
# filter(LabSubsamplingRatio > 0.015) %>%
ggplot(aes(x = CollectionYear,
y = TotalAbundance))+
facet_wrap(~Agency)+
scale_y_continuous(trans = "log")+
ggbeeswarm::geom_quasirandom()+
stat_smooth()
invertdat %>%
# filter(AreaSampTot_m2 > 0.125) %>%
# filter(AreaSampTot_m2 < 5) %>%
# filter(LabSubsamplingRatio > 0.015) %>%
ggplot(aes(x = CollectionYear,
y = TotalAbundance))+
scale_y_continuous(trans = "log")+
ggbeeswarm::geom_quasirandom(aes(color = Agency))+
stat_smooth()
invertdat %>%
# filter(AreaSampTot_m2 > 0.125) %>%
# filter(AreaSampTot_m2 < 5) %>%
# filter(LabSubsamplingRatio > 0.015) %>%
ggplot(aes(x = CollectionYear,
y = TotalAbundance+1))+
scale_y_continuous(trans = "log")+
ggbeeswarm::geom_quasirandom(aes(color = Agency))+
stat_smooth()
invertdat %>%
# filter(AreaSampTot_m2 > 0.125) %>%
# filter(AreaSampTot_m2 < 5) %>%
# filter(LabSubsamplingRatio > 0.015) %>%
ggplot(aes(x = CollectionYear,
y = TotalAbundance+1))+
scale_y_continuous(trans = "log")+
ggbeeswarm::geom_quasirandom(aes(color = Agency), alpha = 0.5)+
stat_smooth()
invertdat %>%
# filter(AreaSampTot_m2 > 0.125) %>%
# filter(AreaSampTot_m2 < 5) %>%
# filter(LabSubsamplingRatio > 0.015) %>%
ggplot(aes(x = CollectionYear,
y = TotalAbundance+1))+
scale_y_continuous(trans = "log")+
ggbeeswarm::geom_quasirandom(aes(color = Agency), alpha = 0.5)+
stat_smooth(method = "lm")
invertdat %>%
# filter(AreaSampTot_m2 > 0.125) %>%
# filter(AreaSampTot_m2 < 5) %>%
# filter(LabSubsamplingRatio > 0.015) %>%
ggplot(aes(x = CollectionYear,
y = TotalAbundance+1))+
facet_wrap(~Agency)+
scale_y_continuous(trans = "log")+
ggbeeswarm::geom_quasirandom(, alpha = 0.5)+
stat_smooth(method = "lm")
invertdat %>%
filter(AreaSampTot_m2 > 0.125) %>%
filter(AreaSampTot_m2 < 5) %>%
filter(LabSubsamplingRatio > 0.015) %>%
ggplot(aes(x = CollectionYear,
y = TotalAbundance+1))+
facet_wrap(~Agency)+
scale_y_continuous(trans = "log")+
ggbeeswarm::geom_quasirandom(, alpha = 0.5)+
stat_smooth(method = "lm")
invertdat %>%
filter(is.na(AreaSampTot_m2) | AreaSampTot_m2 > 0.125) %>%
filter(is.na(AreaSampTot_m2) | AreaSampTot_m2 < 5) %>%
filter(is.na(LabSubsamplingRatio) | LabSubsamplingRatio > 0.015) %>%
ggplot(aes(x = CollectionYear,
y = TotalAbundance+1))+
facet_wrap(~Agency)+
scale_y_continuous(trans = "log")+
ggbeeswarm::geom_quasirandom(, alpha = 0.5)+
stat_smooth(method = "lm")
invertdat %>%
filter(is.na(AreaSampTot_m2) | AreaSampTot_m2 > 0.125) %>%
filter(is.na(AreaSampTot_m2) | AreaSampTot_m2 < 5) %>%
filter(is.na(LabSubsamplingRatio) | LabSubsamplingRatio > 0.015) %>%
ggplot(aes(x = CollectionYear,
y = TotalAbundance+1))+
facet_wrap(~Agency)+
scale_y_continuous(trans = "log")+
ggbeeswarm::geom_quasirandom()+
stat_smooth()
invertdat %>%
filter(is.na(AreaSampTot_m2) | AreaSampTot_m2 > 0.125) %>%
filter(is.na(AreaSampTot_m2) | AreaSampTot_m2 < 5) %>%
filter(is.na(LabSubsamplingRatio) | LabSubsamplingRatio > 0.015) %>%
ggplot(aes(x = CollectionYear,
y = TotalAbundance+1))+
# facet_wrap(~Agency)+
scale_y_continuous(trans = "log")+
ggbeeswarm::geom_quasirandom()+
stat_smooth()
invertdat %>%
filter(is.na(AreaSampTot_m2) | AreaSampTot_m2 > 0.125) %>%
filter(is.na(AreaSampTot_m2) | AreaSampTot_m2 < 5) %>%
filter(is.na(LabSubsamplingRatio) | LabSubsamplingRatio > 0.015) %>%
ggplot(aes(x = CollectionYear,
y = TotalAbundance+1))+
# facet_wrap(~Agency)+
scale_y_continuous(trans = "log")+
ggbeeswarm::geom_quasirandom()+
stat_smooth(method = "lm")
invertdat %>%
filter(is.na(AreaSampTot_m2) | AreaSampTot_m2 > 0.125) %>%
filter(is.na(AreaSampTot_m2) | AreaSampTot_m2 < 5) %>%
filter(is.na(LabSubsamplingRatio) | LabSubsamplingRatio > 0.015) %>%
ggplot(aes(x = CollectionYear,
y = TotalAbundance+1))+
# facet_wrap(~Agency)+
scale_y_continuous(trans = "log")+
ggbeeswarm::geom_quasirandom()+
stat_smooth(method = "lm")+
stat_smooth(method = "gam")
invertdat %>%
filter(is.na(AreaSampTot_m2) | AreaSampTot_m2 > 0.125) %>%
filter(is.na(AreaSampTot_m2) | AreaSampTot_m2 < 5) %>%
filter(is.na(LabSubsamplingRatio) | LabSubsamplingRatio > 0.015) %>%
ggplot(aes(x = Agency,
y = TotalAbundance+1))+
# facet_wrap(~Agency)+
scale_y_continuous(trans = "log")+
ggbeeswarm::geom_quasirandom()
invertdat %>%
filter(is.na(AreaSampTot_m2) | AreaSampTot_m2 > 0.125) %>%
filter(is.na(AreaSampTot_m2) | AreaSampTot_m2 < 5) %>%
filter(is.na(LabSubsamplingRatio) | LabSubsamplingRatio > 0.015) %>%
ggplot(aes(x = Agency,
y = TotalAbundance+1))+
# facet_wrap(~Agency)+
scale_y_continuous(trans = "log")+
ggbeeswarm::geom_quasirandom()
invertdat %>%
filter(is.na(AreaSampTot_m2) | AreaSampTot_m2 > 0.125) %>%
filter(is.na(AreaSampTot_m2) | AreaSampTot_m2 < 5) %>%
filter(is.na(LabSubsamplingRatio) | LabSubsamplingRatio > 0.015) %>%
ggplot(aes(x = Agency,
y = TotalAbundance+1))+
# facet_wrap(~Agency)+
scale_y_continuous(trans = "log")+
ggbeeswarm::geom_quasirandom()+
stat_summary(fun.data = "meanbootci")
?stat_summary
invertdat %>%
filter(is.na(AreaSampTot_m2) | AreaSampTot_m2 > 0.125) %>%
filter(is.na(AreaSampTot_m2) | AreaSampTot_m2 < 5) %>%
filter(is.na(LabSubsamplingRatio) | LabSubsamplingRatio > 0.015) %>%
ggplot(aes(x = Agency,
y = TotalAbundance+1))+
# facet_wrap(~Agency)+
scale_y_continuous(trans = "log")+
ggbeeswarm::geom_quasirandom()+
stat_summary(fun.data = "mean_cl_boot")
invertdat %>%
filter(is.na(AreaSampTot_m2) | AreaSampTot_m2 > 0.125) %>%
filter(is.na(AreaSampTot_m2) | AreaSampTot_m2 < 5) %>%
filter(is.na(LabSubsamplingRatio) | LabSubsamplingRatio > 0.015) %>%
ggplot(aes(x = Agency,
y = TotalAbundance+1))+
# facet_wrap(~Agency)+
scale_y_continuous(trans = "log")+
ggbeeswarm::geom_quasirandom()+
stat_summary(fun.data = "mean_cl_boot", color = "red")
invertdat %>%
filter(is.na(AreaSampTot_m2) | AreaSampTot_m2 > 0.125) %>%
filter(is.na(AreaSampTot_m2) | AreaSampTot_m2 < 5) %>%
filter(is.na(LabSubsamplingRatio) | LabSubsamplingRatio > 0.015) %>%
ggplot(aes(x = Agency,
y = TotalAbundance+1))+
# facet_wrap(~Agency)+
scale_y_continuous(trans = "log")+
ggbeeswarm::geom_quasirandom()+
geom_boxplot(width = 0.5)+
stat_summary(fun.data = "mean_cl_boot", color = "red")
invertdat %>%
filter(is.na(AreaSampTot_m2) | AreaSampTot_m2 > 0.125) %>%
filter(is.na(AreaSampTot_m2) | AreaSampTot_m2 < 5) %>%
filter(is.na(LabSubsamplingRatio) | LabSubsamplingRatio > 0.015) %>%
ggplot(aes(x = Agency,
y = TotalAbundance+1))+
# facet_wrap(~Agency)+
scale_y_continuous(trans = "log")+
ggbeeswarm::geom_quasirandom()+
geom_boxplot(width = 0.15)+
stat_summary(fun.data = "mean_cl_boot", color = "red")
invertdat %>%
filter(is.na(AreaSampTot_m2) | AreaSampTot_m2 > 0.125) %>%
filter(is.na(AreaSampTot_m2) | AreaSampTot_m2 < 5) %>%
filter(is.na(LabSubsamplingRatio) | LabSubsamplingRatio > 0.015) %>%
ggplot(aes(x = Agency,
y = TotalAbundance+1))+
# facet_wrap(~Agency)+
scale_y_continuous(trans = "log")+
ggbeeswarm::geom_quasirandom()+
geom_boxplot(width = 0.15)+
stat_summary(fun.data = "mean_cl_boot", color = "red",geom = "pointrange")
invertdat %>%
filter(is.na(AreaSampTot_m2) | AreaSampTot_m2 > 0.125) %>%
filter(is.na(AreaSampTot_m2) | AreaSampTot_m2 < 5) %>%
filter(is.na(LabSubsamplingRatio) | LabSubsamplingRatio > 0.015) %>%
ggplot(aes(x = Agency,
y = TotalAbundance+1))+
# facet_wrap(~Agency)+
scale_y_continuous(trans = "log")+
ggbeeswarm::geom_quasirandom()+
geom_boxplot(width = 0.15, outlier.shape = NA, color = "green")+
stat_summary(fun.data = "mean_cl_boot", color = "red", geom = "pointrange")
m1 <- lm(log(TotalAbundance + 1) ~ CollectionYear + Agency,
data = invertdat %>%
filter(is.na(AreaSampTot_m2) | AreaSampTot_m2 > 0.125) %>%
filter(is.na(AreaSampTot_m2) | AreaSampTot_m2 < 5) %>%
filter(is.na(LabSubsamplingRatio) | LabSubsamplingRatio > 0.015)
)
summary(m1)
exp(0.615)
sjPlot::plot_model(m1, type = "eff", terms = c("CollectionYear", "Agency"))
exp(7.5)
exp(6.25)
1808.042-518.0128
1290.029/247
1290.029/27
m1 <- lm(log(TotalAbundance + 1) ~ CollectionYear * Agency,
data = invertdat %>%
filter(is.na(AreaSampTot_m2) | AreaSampTot_m2 > 0.125) %>%
filter(is.na(AreaSampTot_m2) | AreaSampTot_m2 < 5) %>%
filter(is.na(LabSubsamplingRatio) | LabSubsamplingRatio > 0.015)
)
sjPlot::plot_model(m1, type = "eff", terms = c("CollectionYear", "Agency"))
summary(m1)
m1 <- lm(log(TotalAbundance + 1) ~ year * Agency,
data = invertdat %>%
filter(is.na(AreaSampTot_m2) | AreaSampTot_m2 > 0.125) %>%
filter(is.na(AreaSampTot_m2) | AreaSampTot_m2 < 5) %>%
filter(is.na(LabSubsamplingRatio) | LabSubsamplingRatio > 0.015) %>%
mutate(year = CollectionYear - min(CollectionYear) + 1)
)
sjPlot::plot_model(m1, type = "eff", terms = c("year", "Agency"))
summary(year)
summary(m1)
m1 <- lm(log(TotalAbundance + 1) ~ year + Agency,
data = invertdat %>%
filter(is.na(AreaSampTot_m2) | AreaSampTot_m2 > 0.125) %>%
filter(is.na(AreaSampTot_m2) | AreaSampTot_m2 < 5) %>%
filter(is.na(LabSubsamplingRatio) | LabSubsamplingRatio > 0.015) %>%
mutate(year = CollectionYear - min(CollectionYear) + 1)
)
summary(m1)
sjPlot::plot_model(m1, type = "eff", terms = c("year", "Agency"))
m1 <- lm(log(TotalAbundance + 1) ~ year + Agency + ProjectLabel,
data = invertdat %>%
filter(is.na(AreaSampTot_m2) | AreaSampTot_m2 > 0.125) %>%
filter(is.na(AreaSampTot_m2) | AreaSampTot_m2 < 5) %>%
filter(is.na(LabSubsamplingRatio) | LabSubsamplingRatio > 0.015) %>%
mutate(year = CollectionYear - min(CollectionYear) + 1)
)
summary(m1)
sjPlot::plot_model(m1, type = "eff", terms = c("year", "Agency"))
sjPlot::plot_model(m1, type = "eff", terms = c("year", "Agency"))
summary(m1)
sjPlot::plot_model(m1, type = "eff", terms = c("year"))
m1 <- lm(log(TotalAbundance + 1) ~ year + ProjectLabel,
data = invertdat %>%
filter(is.na(AreaSampTot_m2) | AreaSampTot_m2 > 0.125) %>%
filter(is.na(AreaSampTot_m2) | AreaSampTot_m2 < 5) %>%
filter(is.na(LabSubsamplingRatio) | LabSubsamplingRatio > 0.015) %>%
mutate(year = CollectionYear - min(CollectionYear) + 1)
)
sjPlot::plot_model(m1, type = "eff", terms = c("year"))
summary(m1)
exp(-0.015685) - 1
-0.01556263^25
exp(25*-0.01556263)
(1 + (-0.015685 / 1)^25
)
(-0.015685 / 1)^25
(1 - (-0.015685 / 1))^25
(1 -0.015685)^25
devtools::document()
devtools::document()
warnings()
rm(list = c("getInvertData"))
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
warnings()
devtools::document()
devtools::document()
10^.7
10^-.3
log10(.5)
log10(2)
log(2)
log(.5)
